.IF	DEF,.$$.M6804

.IIF	NDEF,.$$.LIST	.NLIST	;CROSS-ASSEMBLER NOT LISTED
	;DURING CHECKOUT DEFINE .$$.LIST TO ENABLE LISTING
.IIF	DEF,.$$.LIST		.LIST
	;
	;
	.TITLE	M6804 CROSS-ASSEMBLER
	;
.IIF	DEF,.$$.LIST	.SBTTL	CROSS-ASSEMBLER INTRODUCTION
	;
	;****************************************************************
	;*								*
	;*	MACRO PACKAGE FOR THE MOTOROLA 6804 MICROPROCESSOR	*
	;*		TO RUN UNDER MACRO 11.				*
	;*								*
	;*								*
	;*	BY ALAN R. BALDWIN					*
	;*		PHYSICS DEPARTMENT				*
	;*		KENT STATE UNIVERSITY				*
	;*		KENT, OHIO  44242				*
	;*								*
	;*		V01 - JUNE  1984				*
	;*								*
	;****************************************************************
	;****************************************************************
	;*								*
	;*	REWRITTEN FOR THE ASXXXX 'ASCHECK' ASSEMBLER		*
	;*								*
	;*		DECEMBER 2008					*
	;*								*
	;****************************************************************
	;
	;****************************************************************
	;*								*
	;*	The M6804.MAC Macro Cross Assembler requires		*
	;*	the 'direct page' to be initialized by using		*
	;*	the following macro:					*
	;*								*
	;*	setdp							*
	;* or	setdp	0	(a non zero argument is an error)	*
	;*								*
	;*								*
	;*	This Cross Assembler removes the relocation		*
	;*	information from all addresses yielding an		*
	;*	ABSOLUTE ASSEMBLER.  Relocating assembled		*
	;*	code using the ASLINK relocation options		*
	;*	will not generate a correctly relocated			*
	;*	image.							*
	;*								*
	;****************************************************************
	;
.IIF	DEF,.$$.LIST	.PAGE
	;
	;THE FOLLOWING DIFFERENCES EXIST BETWEEN THIS CROSS-ASSEMBLER
	;AND MOTOROLA'S M6804 ASSEMBLER
	;	LABELS MUST TERMINATE WITH A :
	;	COMMENTS START WITH A ;
	;	IMMEDIATE MODE IS DENOTED BY A SEPERATE ARGUMENT - #
	;	INDEXED MODE DENOTED BY THE ARGUMENT @X OR @Y
	;
	;
	;DEFINITION OF ASSEMBLER DIRECTIVES WITH DIFFERENCES
	;	END -  USE	.END	END OF PROGRAM
	;	EQU -  USE  	=	EQUATE SYMBOL
	;	FCB -  USE	.FCB	FORM SINGLE-BYTE CONSTANT
	;	FCC -  USE	.FCC	FORM CONSTANT CHARACTERS
	;	FDB -  USE	.FDB	FORM DOUBLE-BYTE CONSTANT
	;	MON -  NOT IMPLEMENTED	RETURN TO MONITOR CONSOLE
	;	NAM -  USE	.SBTTL	PROGRAM NAME
	;	OPT -  NOT IMPLEMENTED	OPTION
	;	ORG -  USE	.ORG	ORIGIN
	;	PAGE - USE	.PAGE	ADVANCE LISTING TO TOP OF PAGE
	;	RMB -  USE	.RMB	RESERVE MEMORY BYTES
	;	SETDP -USE	SETDP	SET DIRECT PAGE BOUNDARY
	;	SPC -  NOT IMPLEMENTED	SPACE N LINES
	;
	;
	;PROCESSOR CONDITION CODE REVIEW
	;	TWO SETS OF FLAGS:
	;
	;	- CARRY BIT (C)
	;	- ZERO BIT (Z)
	;
	;PROCESSOR REGISTERS
	;	A - 8-BIT ACCUMULATOR (@377)
	;	X - 8-BIT INDEX REGISTER (@200)
	;	Y - 8-BIT INDEX REGISTER (@201)
	;
	;	STACK - SELF CONTAINED 'LIFO'
	;	PC - 12-BIT PROGRAM COUNTER
	;
.IIF	DEF,.$$.LIST	.PAGE
.IIF	DEF,.$$.LIST	.SBTTL	LOCAL VARIABLES
	;
	.LOCAL	...A,	...B,	...PAG,	...TYP
	.LOCAL	...IMM,	...DIR,	...EXT,	...IDX,	...FLG
	;
	;
	;BYTE ORDERING IS HI ... LO
	;
	.HILO
	;
	;
	;CONSTANTS ARE IN OCTAL
	;
	;
.IIF	DEF,.$$.LIST	.PAGE
.IIF	DEF,.$$.LIST	.SBTTL	ADDRESSING MACROS
	;
	;IMMEDIATE DATA
	;
.MACRO	.$.IMM		I,J,K
 ...IMM = -0Q1
 .IIF	IDN	^!I!,#	...IMM = 0Q0
 .IIF	GE,...IMM	...FLG =  0Q1
 .IIF	LT,...IMM	...FLG = -0Q1
 .IF	GE,...FLG
  .NVAL	...IMM,J
 .ENDIF
 .IF	LT,...FLG
  .IIF	NB,^!K!		.ERROR	1	;NOT IMMEDIATE
 .ENDIF
.ENDM	;.$.IMM
	;
	;DIRECT PAGE ADDRESSING
        ;
.MACRO	.$.DIR		I,J
 .NTYP	...TYP,I
 .IF EQ,...TYP
  ...DIR = I
 .ELSE
  ...DIR = I - ...PAG
 .ENDIF
 .IF	NE,(...DIR & 0Q177400)
  .IIF	NB,^!J!		.ERROR	1	;ADDRESS NOT IN PAGE
  ...DIR = ...DIR & 0Q377
 .ENDIF
.ENDM	;.$.DIR
	;
	;INDEXED ADRESSING
	;
.MACRO	.$.IDX		I,J
 ...IDX = -0Q1
 .IIF	IDN	^!I!,@x	...IDX = 0Q0
 .IIF	IDN	^!I!,@X	...IDX = 0Q0
 .IIF	IDN	^!I!,@y	...IDX = 0Q20
 .IIF	IDN	^!I!,@Y	...IDX = 0Q20
 .IIF	GE,...IDX	...FLG =  0Q1
 .IIF	LT,...IDX	...FLG = -0Q1
 .IF	LT,...FLG
   .IIF	NB,^!J!		.ERROR	1	;NOT INDEXED
 .ENDIF
.ENDM	;.$.IDX
	;
	;EXTENDED ADDRESSING
	;
.MACRO	.$.EXT		I,J
 .NTYP	...TYP,I
 .IF	EQ,...TYP
  ...EXT = I
 .ELSE
  .NVAL	...EXT,I
 .ENDIF
 .IF	NE,(...EXT & 0Q170000)
  .IIF	NB,^!J!		.ERROR	1	;ADDRESS EXCEEDS SPACE
 .ENDIF
 ...EXT = ...EXT & 0Q7777
.ENDM	;.$.EXT
	;
	;
.IIF	DEF,.$$.LIST	.PAGE
.IIF	DEF,.$$.LIST	.SBTTL	SINGLE BYTE 'INHERENT' INSTRUCTIONS

.MACRO	.$.$.$	H,I
 .MACRO	H
 .BYTE	I
 .ENDM	;Instruction
.ENDM	;.$.$.$

    ;MNEMONIC  OPCODE	;OPERATION
.$.$.$	RTI,	0Q262	;RETURN FROM INTERRUPT
.$.$.$	RTS,	0Q263	;RETURN FROM SUBROUTINE
.$.$.$	COMA,	0Q264	;COMPLEMENT A
.$.$.$	ROLA,	0Q265	;ROTATE LEFT A
.$.$.$	STOP,	0Q266	;STOP
.$.$.$	WAIT,	0Q267	;WAIT

	.MDELETE	.$.$.$


.IIF	DEF,.$$.LIST	.PAGE
.IIF	DEF,.$$.LIST	.SBTTL	RELATIVE BRANCH INSTRUCTIONS

.MACRO	.$.BKRNL	I,J
 ...A=J-.-0Q1
 .IIF	LT,...A+0Q20	.ERROR	1	;BRANCH OUT OF RANGE
 .IIF	GE,...A-0Q20	.ERROR	1	;BRANCH OUT OF RANGE
 .BYTE	I + (...A & 0Q37)
.ENDM	;.$.BKRNL

.MACRO	.$.$.$	H,I
 .MACRO	H	J
 .$.BKRNL	I,J
 .ENDM	;Instruction
.ENDM	;.$.$.$

    ;MNEMONIC  OPCODE	;OPFERATION
.$.$.$	BNE,	0Q0	;BRANCH IF (Z=0)
.$.$.$	BEQ,	0Q40	;BRANCH IF (Z=1)
.$.$.$	BCC,	0Q100	;BRANCH IF (C=0)
.$.$.$	BHS,	0Q100	;BRANCH IF (C=0)
.$.$.$	BCS,	0Q140	;BRANCH IF (C=1)
.$.$.$	BLO,	0Q140	;BRANCH IF (C=1)

	.MDELETE	.$.$.$


.IIF	DEF,.$$.LIST	.PAGE
.IIF	DEF,.$$.LIST	.SBTTL	LDA,STA,INC,DEC

.MACRO	.$.CKRNL	I,J,K
 .$.IMM		J,K
 .IF	GE,...FLG
  .IIF	EQ,I-0Q341	.ERROR	1	;STA # NOT ALLOWED
  .IIF	EQ,I-0Q346	.ERROR	1	;INC # NOT ALLOWED
  .IIF	EQ,I-0Q347	.ERROR	1	;DEC # NOT ALLOWED
  .BYTE	I + 0Q10,...IMM
  .MEXIT
 .ENDIF
 .$.IDX		J
 .IF	GE,...FLG
  .BYTE	I + ...IDX
  .MEXIT
 .ENDIF
 .$.DIR		J,ERROR
 .IF	GE,...DIR-0Q200
  .IF	LE,...DIR-0Q203
   .IIF	EQ,I-0Q346	.BYTE	0Q250 | (...DIR & 0Q3)
   .IIF	EQ,I-0Q347	.BYTE	0Q270 | (...DIR & 0Q3)
   .IIF	EQ,I-0Q340	.BYTE	0Q254 | (...DIR & 0Q3)
   .IIF	EQ,I-0Q341	.BYTE	0Q274 | (...DIR & 0Q3)
   .MEXIT
  .ENDIF
 .ENDIF
 .BYTE	I + 0Q30,...DIR
.ENDM	;.$.CKRNL

.MACRO	.$.$.$	H,I
 .MACRO	H	J,K
 .$.CKRNL	I,J,K
 .ENDM	;Instruction
.ENDM	;.$.$.$

    ;MNEMONIC  OPCODE	;OPERATION
.$.$.$	LDA,	0Q340	;LOAD ACCUMULATOR
.$.$.$	STA,	0Q341	;STORE ACCUMULATOR
.$.$.$	ADD,	0Q342	;ADD
.$.$.$	SUB,	0Q343	;SUBTRACT
.$.$.$	CMP,	0Q344	;COMPARE
.$.$.$	AND,	0Q345	;LOGICAL AND
.$.$.$	INC,	0Q346	;INCREMENT
.$.$.$	DEC,	0Q347	;DECREMENT

	.MDELETE	.$.$.$


.IIF	DEF,.$$.LIST	.PAGE
.IIF	DEF,.$$.LIST	.SBTTL	MVI,JMP,JSR

.MACRO	MVI	J,K,L
 .$.DIR		J,ERROR
 .$.IMM		K,L,ERROR
 .BYTE	0Q260,...DIR,...IMM
.ENDM	;MVI

.MACRO	JMP	J
 .$.EXT		J,ERROR
 ...EXT = ...EXT + 0Q110000
 .BYTE	>...EXT,<...EXT
.ENDM	;JMP

.MACRO	JSR	J
 .$.EXT		J,ERROR
 ...EXT = ...EXT + 0Q100000
 .BYTE	>...EXT,<...EXT
.ENDM	;JSR


.IIF	DEF,.$$.LIST	.PAGE
.IIF	DEF,.$$.LIST	.SBTTL	ALL BIT SET/CLEAR INSTRUCTIONS

.MACRO	.$.DKRNL	I,J
 .$.DIR		J,ERROR
 .BYTE	I,...DIR
.ENDM	;.$.DKRNL

.MACRO	.$.$.$	H,I
 .MACRO	H	J
 .$.DKRNL	I,J
 .ENDM	;Instruction
.ENDM	;.$.$.$

     ;MNEMONIC  OPCODE	;OPERATION
.$.$.$	BCLR0,	0Q320	;CLR BIT 0
.$.$.$	BCLR1,	0Q321	;CLR BIT 1
.$.$.$	BCLR2,	0Q322	;CLR BIT 2
.$.$.$	BCLR3,	0Q323	;CLR BIT 3
.$.$.$	BCLR4,	0Q324	;CLR BIT 4
.$.$.$	BCLR5,	0Q325	;CLR BIT 5
.$.$.$	BCLR6,	0Q326	;CLR BIT 6
.$.$.$	BCLR7,	0Q327	;CLR BIT 7
.$.$.$	BSET0,	0Q330	;SET BIT 0
.$.$.$	BSET1,	0Q331	;SET BIT 1
.$.$.$	BSET2,	0Q332	;SET BIT 2
.$.$.$	BSET3,	0Q333	;SET BIT 3
.$.$.$	BSET4,	0Q334	;SET BIT 4
.$.$.$	BSET5,	0Q335	;SET BIT 5
.$.$.$	BSET6,	0Q336	;SET BIT 6
.$.$.$	BSET7,	0Q337	;SET BIT 7

	.MDELETE	.$.$.$


.IIF	DEF,.$$.LIST	.PAGE
.IIF	DEF,.$$.LIST	.SBTTL	ALL BIT TEST AND BRANCH INSTRUCTIONS

.MACRO	.$.EKRNL	I,J,K
 ...A=K-.-0Q3
 .IIF	LT,...A+0Q200	.ERROR	1	;BRANCH OUT OF RANGE
 .IIF	GE,...A-0Q200	.ERROR	1	;BRANCH OUT OF RANGE
 .$.DIR		J,ERROR
 .BYTE	I,...DIR,...A
.ENDM	;.$.EKRNL

.MACRO	.$.$.$	H,I
 .MACRO	H	J,K
 .$.EKRNL	I,J,K
 .ENDM	;Instruction
.ENDM	;.$.$.$

     ;MNEMONIC  OPCODE	;OPERATION
.$.$.$	BRCLR0,	0Q300	;BRANCH ON BIT 0 CLR
.$.$.$	BRCLR1,	0Q301	;BRANCH ON BIT 1 CLR
.$.$.$	BRCLR2,	0Q302	;BRANCH ON BIT 2 CLR
.$.$.$	BRCLR3,	0Q303	;BRANCH ON BIT 3 CLR
.$.$.$	BRCLR4,	0Q304	;BRANCH ON BIT 4 CLR
.$.$.$	BRCLR5,	0Q305	;BRANCH ON BIT 5 CLR
.$.$.$	BRCLR6,	0Q306	;BRANCH ON BIT 6 CLR
.$.$.$	BRCLR7,	0Q307	;BRANCH ON BIT 7 CLR
.$.$.$	BRSET0,	0Q310	;BRANCH ON BIT 0 SET
.$.$.$	BRSET1,	0Q311	;BRANCH ON BIT 1 SET
.$.$.$	BRSET2,	0Q312	;BRANCH ON BIT 2 SET
.$.$.$	BRSET3,	0Q313	;BRANCH ON BIT 3 SET
.$.$.$	BRSET4,	0Q314	;BRANCH ON BIT 4 SET
.$.$.$	BRSET5,	0Q315	;BRANCH ON BIT 5 SET
.$.$.$	BRSET6,	0Q316	;BRANCH ON BIT 6 SET
.$.$.$	BRSET7,	0Q317	;BRANCH ON BIT 7 SET

	.MDELETE	.$.$.$


.IIF	DEF,.$$.LIST	.PAGE
.IIF	DEF,.$$.LIST	.SBTTL	IMPLIED INSTRUCTION MACROS

.MACRO	ASLA
 ADD	0Q377
.ENDM	;ASLA

.MACRO	CLRA
 SUB	0Q377
.ENDM	;CLRA

.MACRO	CLRX
 MVI	0Q200,#,0Q0
.ENDM	;CLRX

.MACRO	CLRY
 MVI	0Q201,#,0Q0
.ENDM	;CLRY

.MACRO	DECA
 DEC	0Q377
.ENDM	;DECA

.MACRO	DECX
 DEC	0Q200
.ENDM	;DECX

.MACRO	DECY
 DEC	0Q201
.ENDM	;DECY

.MACRO	INCA
 INC	0Q377
.ENDM	;INCA

.MACRO	INCX
 INC	0Q200
.ENDM	;INCX

.MACRO	INCY
 INC	0Q201
.ENDM	;INCY

.MACRO	LDXI	J,K
 MVI	0Q200,J,K
.ENDM	;LDXI

.MACRO	LDYI	J,K
 MVI	0Q201,J,K
.ENDM	;LDYI

.MACRO	NOP
 BEQ	.+0Q1
.ENDM	;NOP

.MACRO	TAX
 STA	0Q200
.ENDM	;TAX

.MACRO	TAY
 STA	0Q201
.ENDM	;TAY

.MACRO	TXA
 LDA	0Q200
.ENDM	;TXA

.MACRO	TYA
 LDA	0Q201
.ENDM	;TYA


.IIF	DEF,.$$.LIST	.PAGE
.IIF	DEF,.$$.LIST	.SBTTL	NON MOTOROLA IMPLIED INSTRUCTION MACROS

.MACRO	BAP	J
 BRCLR7	0Q377,J
.ENDM	;BAP

.MACRO	BAM	J
 BRSET7	0Q377,J
.ENDM	;BAM

.MACRO	BXPL	J
 BRCLR7	0Q200,J
.ENDM	;BXPL

.MACRO	BXMI	J
 BRSET7	0Q200,J
.ENDM	;BXMI

.MACRO	BYPL	J
 BRCLR7	0Q201,J
.ENDM	;BYPL

.MACRO	BYMI	J
 BRSET7	0Q201,J
.ENDM	;BYMI


.IIF	DEF,.$$.LIST	.PAGE
.IIF	DEF,.$$.LIST	.SBTTL	SPECIAL DIRECTIVES

.MACRO	SETDP	I
 ...A = 0Q0
 .IF	NB,^!I!
  .IIF	NE,I	.ERROR	1	;DIRECT PAGE MUST = 0
  .NVAL	...A,I
 .ENDIF
 .NVAL	...B,.
 ...PAG = (. - ...B) + (0Q400 * ...A)
.ENDM	;Instruction


.IIF	DEF,.$$.LIST	.LIST		;LIST PROGRAM PROPER
.IIF	DEF,.$$.LIST	.PAGE
.ENDIF
