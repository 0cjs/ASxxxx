{\rtf1\ansi\ansicpg1252\deff0{\fonttbl{\f0\fmodern\fprq1\fcharset0 Courier New;}}
{\colortbl ;\red0\green0\blue0;\red0\green0\blue255;\red255\green0\blue0;}
{\*\generator Msftedit 5.41.21.2500;}\viewkind4\uc1\pard\cf1\lang1033\b\f0\fs24\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                ASxxxx Assemblers\par
\par
\par
                                       and\par
\par
\par
                            ASLINK Relocating Linker\par
\par
\par
\par
\par
                                 Version   5.30\par
                                  January 2019\par
\page\par
\par
        CHAPTER 1  \cf2 THE ASSEMBLER\cf1                                      1-1 \par
          1.1     \cf2 THE ASXXXX ASSEMBLERS\cf1                               1-1 \par
          1.1.1     Assembly Pass 1                                  1-2 \par
          1.1.2     Assembly Pass 2                                  1-2 \par
          1.1.3     Assembly Pass 3                                  1-3 \par
          1.2     \cf2 SOURCE PROGRAM FORMAT\cf1                               1-3 \par
          1.2.1     Statement Format                                 1-3 \par
          1.2.1.1     Label Field                                    1-4 \par
          1.2.1.2     Operator Field                                 1-6 \par
          1.2.1.3     Operand Field                                  1-6 \par
          1.2.1.4     Comment Field                                  1-7 \par
          1.3     \cf2 SYMBOLS AND EXPRESSIONS\cf1                             1-7 \par
          1.3.1     Character Set                                    1-7 \par
          1.3.2     User-Defined Symbols                            1-11 \par
          1.3.3     Reusable Symbols                                1-12 \par
          1.3.4     Current Location Counter                        1-13 \par
          1.3.5     Numbers                                         1-15 \par
          1.3.6     Terms                                           1-15 \par
          1.3.7     Expressions                                     1-16 \par
          1.4     \cf2 GENERAL ASSEMBLER DIRECTIVES\cf1                       1-17 \par
          1.4.1     \cf3 .module \cf1 Directive                               1-18 \par
          1.4.2     \cf3 .title \cf1 Directive                                1-18 \par
          1.4.3     \cf3 .sbttl \cf1 Directive                                1-18 \par
          1.4.4     \cf3 .list \cf1 and \cf3 .nlist \cf1 Directives                     1-19 \par
          1.4.5     \cf3 .page \cf1 Directive                                 1-20 \par
          1.4.6     \cf3 .msg \cf1 Directive                                  1-21 \par
          1.4.7     \cf3 .error \cf1 Directive                                1-22 \par
          1.4.8     \cf3 .byte\cf1 , \cf3 .db\cf1 , and \cf3 .fcb \cf1 Directives                 1-22 \par
          1.4.9     \cf3 .word\cf1 , \cf3 .dw\cf1 , and \cf3 .fdb \cf1 Directives                 1-23 \par
          1.4.10    \cf3 .3byte \cf1 and \cf3 .triple \cf1 Directives                   1-23 \par
          1.4.11    \cf3 .4byte \cf1 and \cf3 .quad \cf1 Directive                      1-24 \par
          1.4.12    \cf3 .blkb\cf1 , \cf3 .ds\cf1 , \cf3 .rmb\cf1 , and \cf3 .rs \cf1 Directives            1-24 \par
          1.4.13    \cf3 .blkw\cf1 , \cf3 .blk3\cf1 , and \cf3 .blk4 \cf1 Directives              1-24 \par
          1.4.14    \cf3 .ascii\cf1 , \cf3 .str\cf1 , and \cf3 .fcc \cf1 Directives               1-25 \par
          1.4.15    \cf3 .ascis \cf1 and \cf3 .strs \cf1 Directives                     1-25 \par
          1.4.16    \cf3 .asciz \cf1 and \cf3 .strz \cf1 Directives                     1-26 \par
          1.4.17    \cf3 .assume \cf1 Directive                               1-27 \par
          1.4.18    \cf3 .radix \cf1 Directive                                1-27 \par
          1.4.19    \cf3 .even \cf1 Directive                                 1-28 \par
          1.4.20    \cf3 .odd \cf1 Directive                                  1-28 \par
          1.4.21    \cf3 .bndry \cf1 Directive                                1-28 \par
          1.4.22    \cf3 .area \cf1 Directive                                 1-30 \par
          1.4.23    \cf3 .bank \cf1 Directive                                 1-32 \par
          1.4.24    \cf3 .org \cf1 Directive                                  1-33 \par
          1.4.25    \cf3 .globl \cf1 Directive                                1-34 \par
          1.4.26    \cf3 .local \cf1 Directive                                1-35 \par
          1.4.27    \cf3 .equ\cf1 , \cf3 .gblequ\cf1 , and \cf3 .lclequ \cf1 Directives           1-36 \par
          1.4.28    \cf3 .if\cf1 , \cf3 .else\cf1 , and \cf3 .endif \cf1 Directives               1-36 \par
          1.4.29    \cf3 .iff\cf1 , \cf3 .ift\cf1 , and \cf3 .iftf \cf1 Directives                1-37 \par
          1.4.30    \cf3 .ifxx \cf1 Directives                                1-38 \par
          1.4.31    \cf3 .ifdef \cf1 Directive                                1-39 \par
          1.4.32    \cf3 .ifndef \cf1 Directive                               1-41 \par
          1.4.33    \cf3 .ifb \cf1 Directive                                  1-42 \par
\page\par
\par
                                                                 Page ii\par
        \par
\par
\par
          1.4.34    \cf3 .ifnb \cf1 Directive                                 1-43 \par
          1.4.35    \cf3 .ifidn \cf1 Directive                                1-44 \par
          1.4.36    \cf3 .ifdif \cf1 Directive                                1-45 \par
          1.4.37    \cf3 Alternate .if Directive Forms\cf1                    1-46 \par
          1.4.38    \cf3 Immediate Conditional Assembly Directives\cf1        1-47 \par
          1.4.39    \cf3 .include \cf1 Directive                              1-48 \par
          1.4.39.1    Including Files In Windows/DOS                1-50 \par
          1.4.39.2    Including Files in Linux                      1-51 \par
          1.4.40    \cf3 .define \cf1 and \cf3 .undefine \cf1 Directives                1-52 \par
          1.4.41    \cf3 .setdp \cf1 Directive                                1-53 \par
          1.4.42    \cf3 .16bit\cf1 , \cf3 .24bit\cf1 , and \cf3 .32bit \cf1 Directives           1-55 \par
          1.4.43    \cf3 .msb \cf1 Directive                                  1-55 \par
          1.4.44    \cf3 .lohi \cf1 and \cf3 .hilo \cf1 Directives                      1-56 \par
          1.4.45    \cf3 .end \cf1 Directive                                  1-56 \par
          1.5     \cf2 INVOKING ASXXXX\cf1                                    1-57 \par
          1.6     \cf2 ERRORS\cf1                                             1-61 \par
          1.7     \cf2 LISTING FILE\cf1                                       1-62 \par
          1.8     \cf2 SYMBOL TABLE FILE\cf1                                  1-65 \par
          1.9     \cf2 OBJECT FILE\cf1                                        1-65 \par
          1.10    \cf2 HINT FILE\cf1                                          1-66 \par
\par
        CHAPTER 2  \cf2 THE MACRO PROCESSOR\cf1                                2-1 \par
          2.1     \cf2 DEFINING MACROS\cf1                                     2-1 \par
          2.1.1     \cf3 .macro \cf1 Directive                                 2-2 \par
          2.1.2     \cf3 .endm \cf1 Directive                                  2-3 \par
          2.1.3     \cf3 .mexit \cf1 Directive                                 2-3 \par
          2.2     \cf2 CALLING MACROS\cf1                                      2-4 \par
          2.3     \cf2 ARGUMENTS IN MACRO DEFINITIONS AND MACRO CALLS\cf1      2-5 \par
          2.3.1     Macro Nesting                                    2-6 \par
          2.3.2     Special Characters in Macro Arguments            2-7 \par
          2.3.3     Passing Numerical Arguments as Symbols           2-8 \par
          2.3.4     Number of Arguments in Macro Calls               2-9 \par
          2.3.5     Creating Local Symbols Automatically             2-9 \par
          2.3.6     Concatenation of Macro Arguments                2-10 \par
          2.4     \cf2 MACRO ATTRIBUTE DIRECTIVES\cf1                         2-12 \par
          2.4.1     \cf3 .narg \cf1 Directive                                 2-12 \par
          2.4.2     \cf3 .nchr \cf1 Directive                                 2-13 \par
          2.4.3     \cf3 .ntyp \cf1 Directive                                 2-14 \par
          2.4.4     \cf3 .nval \cf1 Directive                                 2-15 \par
          2.5     \cf2 INDEFINITE REPEAT BLOCK DIRECTIVES\cf1                 2-15 \par
          2.5.1     \cf3 .irp \cf1 Directive                                  2-16 \par
          2.5.2     \cf3 .irpc \cf1 Directive                                 2-17 \par
          2.6     \cf2 REPEAT BLOCK DIRECTIVE\cf1                             2-18 \par
          2.6.1     \cf3 .rept \cf1 Directive                                 2-18 \par
          2.7     \cf2 MACRO DELETION DIRECTIVE\cf1                           2-19 \par
          2.7.1     \cf3 .mdelete \cf1 Directive                              2-19 \par
          2.8     \cf2 MACRO INVOCATION DETAILS\cf1                           2-19 \par
          2.9     \cf2 CONTROLLING MACRO LISTINGS\cf1                         2-20 \par
          2.10    \cf2 BUILDING A MACRO LIBRARY\cf1                           2-21 \par
\page\par
\par
                                                                Page iii\par
        \par
\par
\par
          2.10.1    .mlib Macro Directive                           2-21 \par
          2.10.2    .mcall Macro Directive                          2-22 \par
          2.11    \cf2 EXAMPLE MACRO CROSS ASSEMBLERS\cf1                     2-24 \par
\par
        CHAPTER 3  \cf2 THE LINKER\cf1                                         3-1 \par
          3.1     \cf2 ASLINK RELOCATING LINKER\cf1                            3-1 \par
          3.2     \cf2 INVOKING ASLINK\cf1                                     3-2 \par
          3.3     \cf2 LIBRARY PATH(S) AND FILE(S)\cf1                         3-5 \par
          3.4     \cf2 ASLINK PROCESSING\cf1                                   3-6 \par
          3.5     \cf2 ASXXXX VERSION 5.XX (4.XX) LINKING\cf1                  3-9 \par
          3.5.1     Object Module Format                             3-9 \par
          3.5.2     Header Line                                     3-10 \par
          3.5.3     Module Line                                     3-10 \par
          3.5.4     Merge Mode Line                                 3-10 \par
          3.5.5     Bank Line                                       3-11 \par
          3.5.6     Area Line                                       3-11 \par
          3.5.7     Symbol Line                                     3-12 \par
          3.5.8     T Line                                          3-12 \par
          3.5.9     R Line                                          3-12 \par
          3.5.10    P Line                                          3-13 \par
          3.5.11    24-Bit and 32-Bit Addressing                    3-14 \par
          3.5.12    ASlink V5.xx (V4.xx) Error Messages             3-14 \par
          3.6     \cf2 ASXXXX VERSION 3.XX LINKING\cf1                        3-17 \par
          3.6.1     Object Module Format                            3-17 \par
          3.6.2     Header Line                                     3-18 \par
          3.6.3     Module Line                                     3-18 \par
          3.6.4     Area Line                                       3-18 \par
          3.6.5     Symbol Line                                     3-18 \par
          3.6.6     T Line                                          3-19 \par
          3.6.7     R Line                                          3-19 \par
          3.6.8     P Line                                          3-20 \par
          3.6.9     24-Bit and 32-Bit Addressing                    3-20 \par
          3.6.10    ASlink V3.xx Error Messages                     3-21 \par
          3.7     \cf2 HINT FILE FORMAT FOR RELOCATED LISTINGS\cf1            3-23 \par
          3.8     \cf2 INTEL IHX OUTPUT FORMAT (16-BIT)\cf1                   3-25 \par
          3.9     \cf2 INTEL I86 OUTPUT FORMAT (24 OR 32-BIT)\cf1             3-27 \par
          3.10    \cf2 MOTOROLA S1-S9 OUTPUT FORMAT (16-BIT)\cf1              3-29 \par
          3.11    \cf2 MOTOROLA S2-S8 OUTPUT FORMAT (24-BIT)\cf1              3-30 \par
          3.12    \cf2 MOTOROLA S3-S7 OUTPUT FORMAT (32-BIT)\cf1              3-31 \par
          3.13    \cf2 TANDY COLOR COMPUTER DISK BASIC FORMAT\cf1             3-32 \par
\par
        CHAPTER 4  \cf2 BUILDING ASXXXX AND ASLINK\cf1                         4-1 \par
          4.1     \cf2 BUILDING ASXXXX AND ASLINK WITH LINUX\cf1               4-2 \par
          4.2     \cf2 BUILDING ASXXXX AND ASLINK UNDER CYGWIN\cf1             4-2 \par
          4.3     \cf2 BUILDING ASXXXX AND ASLINK WITH DJGPP\cf1               4-3 \par
          4.4     \cf2 BUILDING ASXXXX AND ASLINK WITH BORLAND'S\cf1\par
                  \cf2 TURBO C++ 3.0\cf1                                       4-3 \par
          4.4.1     Graphical User Interface                         4-4 \par
          4.4.2     Command Line Interface                           4-4 \par
\page\par
\par
                                                                 Page iv\par
        \par
\par
\par
          4.5     \cf2 BUILDING ASXXXX AND ASLINK WITH\cf1\par
                  \cf2 MS VISUAL C++ 6.0\cf1                                   4-5 \par
          4.5.1     Graphical User Interface                         4-5 \par
          4.5.2     Command Line Interface                           4-5 \par
          4.6     \cf2 BUILDING ASXXXX AND ASLINK WITH\cf1\par
                  \cf2 MS VISUAL STUDIO 2005\cf1                               4-6 \par
          4.6.1     Graphical User Interface                         4-6 \par
          4.6.2     Command Line Interface                           4-6 \par
          4.7     \cf2 BUILDING ASXXXX AND ASLINK WITH\cf1\par
                  \cf2 MS VISUAL STUDIO 2010\cf1                               4-7 \par
          4.7.1     Graphical User Interface                         4-7 \par
          4.7.2     Command Line Interface                           4-7 \par
          4.8     \cf2 BUILDING ASXXXX AND ASLINK WITH\cf1\par
                  \cf2 MS VISUAL STUDIO 2013\cf1                               4-8 \par
          4.8.1     Graphical User Interface                         4-8 \par
          4.8.2     Command Line Interface                           4-8 \par
          4.9     \cf2 BUILDING ASXXXX AND ASLINK WITH\cf1\par
                  \cf2 MS VISUAL STUDIO 2015\cf1                               4-9 \par
          4.9.1     Graphical User Interface                         4-9 \par
          4.9.2     Command Line Interface                          4-10 \par
          4.10    \cf2 BUILDING ASXXXX AND ASLINK WITH\cf1\par
                  \cf2 OPEN WATCOM V1.9\cf1                                   4-11 \par
          4.10.1    Graphical User Interface                        4-11 \par
          4.10.2    Command Line Interface                          4-11 \par
          4.11    \cf2 BUILDING ASXXXX AND ASLINK WITH\cf1\par
                  \cf2 SYMANTEC C/C++ V7.2\cf1                                4-12 \par
          4.11.1    Graphical User Interface                        4-12 \par
          4.11.2    Command Line Interface                          4-12 \par
          4.12    \cf2 THE _CLEAN.BAT AND _PREP.BAT FILES\cf1                 4-13 \par
\par
        APPENDIX A  \cf2 ASXSCN LISTING FILE SCANNER\cf1                       A-1 \par
\par
        APPENDIX B  \cf2 ASXCNV LISTING CONVERTER\cf1                          B-1 \par
\par
        APPENDIX C  \cf2 S19OS9 CONVERSION UTILITY\cf1                         C-1 \par
          C.1     \cf2 BACKGROUND\cf1                                          C-1 \par
          C.2     \cf2 CREATING AN OS9 MODULE\cf1                              C-2 \par
          C.2.1     Step 1:  Define Header Values                    C-3 \par
          C.2.2     Step 2:  Create The Module Header                C-3 \par
          C.2.3     Step 3:  Allocate Storage                        C-5 \par
          C.2.4     Step 4:  Insert The Program Code                 C-6 \par
          C.2.5     Step 5:  End Assembly By Inserting CRC           C-7 \par
          C.3     \cf2 THE CONVERSION UTILITY:  S19OS9\cf1                     C-7 \par
\par
        APPENDIX D  \cf2 RELEASE NOTES\cf1                                     D-1 \par
\par
        APPENDIX E  \cf2 CONTRIBUTORS\cf1                                      E-1 \par
\par
\page\par
\par
                                                                  Page v\par
        \par
\par
\par
        APPENDIX AA  \cf2 ASCHECK ASSEMBLER\cf1                               AA-1 \par
          AA.1    .opcode DIRECTIVE                                 AA-2 \par
\par
        APPENDIX AB  \cf2 AS1802 ASSEMBLER\cf1                                AB-1 \par
          AB.1    ACKNOWLEDGMENT                                    AB-1 \par
          AB.2    1802 REGISTER SET                                 AB-1 \par
          AB.3    1802 INSTRUCTION SET                              AB-2 \par
          AB.3.1    1802 Inherent Instructions                      AB-2 \par
          AB.3.2    1802 Short Branch Instructions                  AB-3 \par
          AB.3.3    1802 Long Branch Instructions                   AB-3 \par
          AB.3.4    1802 Immediate Instructions                     AB-3 \par
          AB.3.5    1802 Register Instructions                      AB-3 \par
          AB.3.6    1802 Input and Output Instructions              AB-4 \par
          AB.3.7    CDP1802 COSMAC Microprocessor Instruction\par
                    Set Summary                                     AB-5 \par
\par
        APPENDIX AC  \cf2 AS2650 ASSEMBLER\cf1                                AC-1 \par
          AC.1    2650 REGISTER SET                                 AC-1 \par
          AC.2    2650 INSTRUCTION SET                              AC-1 \par
          AC.2.1    Load / Store Instructions                       AC-2 \par
          AC.2.2    Arithmetic / Compare Instructions               AC-2 \par
          AC.2.3    Logical / Rotate Instructions                   AC-2 \par
          AC.2.4    Condition Code Branches                         AC-3 \par
          AC.2.5    Register Test Branches                          AC-3 \par
          AC.2.6    Branches (to Subroutines) / Returns             AC-3 \par
          AC.2.7    Input / Output                                  AC-3 \par
          AC.2.8    Miscellaneos                                    AC-4 \par
          AC.2.9    Program Status                                  AC-4 \par
\par
        APPENDIX AD  \cf2 AS430 ASSEMBLER\cf1                                 AD-1 \par
          AD.1    MPS430 REGISTER SET                               AD-1 \par
          AD.2    MPS430 ADDRESSING MODES                           AD-2 \par
          AD.2.1    MPS430 Instruction Mnemonics                    AD-3 \par
\par
        APPENDIX AE  \cf2 AS6100 ASSEMBLER\cf1                                AE-1 \par
          AE.1    6100 MACHINE DESCRIPTION                          AE-1 \par
          AE.2    ASSEMBLER SPECIFIC DIRECTIVES                     AE-1 \par
          AE.3    MACHINE SPECIFIC DIRECTIVES                       AE-2 \par
          AE.3.1    .setpg                                          AE-3 \par
          AE.3.2    .mempn                                          AE-3 \par
          AE.3.3    .mempa                                          AE-3 \par
          AE.4    6100 INSTRUCTION SET                              AE-4 \par
          AE.4.1    Basic Instructions                              AE-4 \par
          AE.4.2    Operate Instructions                            AE-5 \par
          AE.4.2.1    Group 1 Operate Instructions                  AE-5 \par
          AE.4.2.2    Group 2 Operate Instructions                  AE-6 \par
          AE.4.2.3    Group 3 Operate Instructions                  AE-6 \par
          AE.4.2.4    Group Errors                                  AE-7 \par
          AE.4.3    Input/Output (IOT) Instructions                 AE-7 \par
\page\par
\par
                                                                 Page vi\par
        \par
\par
\par
        APPENDIX AF  \cf2 AS61860 ASSEMBLER\cf1                               AF-1 \par
          AF.1    ACKNOWLEDGMENT                                    AF-1 \par
          AF.2    61860 REGISTER SET                                AF-1 \par
          AF.3    PROCESSOR SPECIFIC DIRECTIVES                     AF-2 \par
          AF.4    61860 INSTRUCTION SET                             AF-2 \par
          AF.4.1    Load Immediate Register                         AF-3 \par
          AF.4.2    Load Accumulator                                AF-3 \par
          AF.4.3    Store Accumulator                               AF-3 \par
          AF.4.4    Move Data                                       AF-3 \par
          AF.4.5    Exchange Data                                   AF-4 \par
          AF.4.6    Stack Operations                                AF-4 \par
          AF.4.7    Block Move Data                                 AF-4 \par
          AF.4.8    Block Exchange Data                             AF-4 \par
          AF.4.9    Increment and Decrement                         AF-5 \par
          AF.4.10   Increment/Decrement with Load/Store             AF-5 \par
          AF.4.11   Fill                                            AF-6 \par
          AF.4.12   Addition and Subtraction                        AF-6 \par
          AF.4.13   Shift Operations                                AF-6 \par
          AF.4.14   Boolean Operations                              AF-6 \par
          AF.4.15   Compare                                         AF-7 \par
          AF.4.16   CPU Control                                     AF-7 \par
          AF.4.17   Absolute Jumps                                  AF-7 \par
          AF.4.18   Relative Jumps                                  AF-8 \par
          AF.4.19   Calls                                           AF-8 \par
          AF.4.20   Input and output                                AF-8 \par
          AF.4.21   Unknown Commands                                AF-9 \par
\par
        APPENDIX AG  \cf2 AS6500 ASSEMBLER\cf1                                AG-1 \par
          AG.1    ACKNOWLEDGMENT                                    AG-1 \par
          AG.2    6500 REGISTER SET                                 AG-2 \par
          AG.3    6500 INSTRUCTION SET                              AG-2 \par
          AG.3.1    Processor Specific Directives                   AG-3 \par
          AG.3.2    65xx Core Inherent Instructions                 AG-3 \par
          AG.3.3    65xx Core Branch Instructions                   AG-3 \par
          AG.3.4    65xx Core Single Operand Instructions           AG-4 \par
          AG.3.5    65xx Core Double Operand Instructions           AG-4 \par
          AG.3.6    65xx Core Jump and Jump to Subroutine\par
                    Instructions                                    AG-4 \par
          AG.3.7    65xx Core Miscellaneous X and Y Register\par
                    Instructions                                    AG-4 \par
          AG.3.8    65F11 and 65F12 Specific Instructions           AG-5 \par
          AG.3.9    65C00/21 and 65C29 Specific Instructions        AG-5 \par
          AG.3.10   65C02, 65C102, and 65C112 Specific\par
                    Instructions                                    AG-6 \par
\par
        APPENDIX AH  \cf2 AS6800 ASSEMBLER\cf1                                AH-1 \par
          AH.1    6800 REGISTER SET                                 AH-1 \par
          AH.2    6800 INSTRUCTION SET                              AH-1 \par
          AH.2.1    Inherent Instructions                           AH-2 \par
\page\par
\par
                                                                Page vii\par
        \par
\par
\par
          AH.2.2    Branch Instructions                             AH-2 \par
          AH.2.3    Single Operand Instructions                     AH-3 \par
          AH.2.4    Double Operand Instructions                     AH-4 \par
          AH.2.5    Jump and Jump to Subroutine Instructions        AH-4 \par
          AH.2.6    Long Register Instructions                      AH-5 \par
\par
        APPENDIX AI  \cf2 AS6801 ASSEMBLER\cf1                                AI-1 \par
          AI.1    .hd6303 DIRECTIVE                                 AI-1 \par
          AI.2    6801 REGISTER SET                                 AI-1 \par
          AI.3    6801 INSTRUCTION SET                              AI-1 \par
          AI.3.1    Inherent Instructions                           AI-2 \par
          AI.3.2    Branch Instructions                             AI-3 \par
          AI.3.3    Single Operand Instructions                     AI-3 \par
          AI.3.4    Double Operand Instructions                     AI-5 \par
          AI.3.5    Jump and Jump to Subroutine Instructions        AI-5 \par
          AI.3.6    Long Register Instructions                      AI-6 \par
          AI.3.7    6303 Specific Instructions                      AI-6 \par
\par
        APPENDIX AJ  \cf2 AS6804 ASSEMBLER\cf1                                AJ-1 \par
          AJ.1    6804 REGISTER SET                                 AJ-1 \par
          AJ.2    6804 INSTRUCTION SET                              AJ-1 \par
          AJ.2.1    Inherent Instructions                           AJ-2 \par
          AJ.2.2    Branch Instructions                             AJ-2 \par
          AJ.2.3    Single Operand Instructions                     AJ-2 \par
          AJ.2.4    Jump and Jump to Subroutine Instructions        AJ-2 \par
          AJ.2.5    Bit Test Instructions                           AJ-3 \par
          AJ.2.6    Load Immediate data Instruction                 AJ-3 \par
          AJ.2.7    6804 Derived Instructions                       AJ-3 \par
\par
        APPENDIX AK  \cf2 AS68(HC)05 ASSEMBLER\cf1                            AK-1 \par
          AK.1    .6805 DIRECTIVE                                   AK-1 \par
          AK.2    .hc05 DIRECTIVE                                   AK-1 \par
          AK.3    THE .__.CPU.  VARIABLE                            AK-1 \par
          AK.4    6805 REGISTER SET                                 AK-2 \par
          AK.5    6805 INSTRUCTION SET                              AK-2 \par
          AK.5.1    Control Instructions                            AK-3 \par
          AK.5.2    Bit Manipulation Instructions                   AK-3 \par
          AK.5.3    Branch Instructions                             AK-3 \par
          AK.5.4    Read-Modify-Write Instructions                  AK-4 \par
          AK.5.5    Register\\Memory Instructions                    AK-4 \par
          AK.5.6    Jump and Jump to Subroutine Instructions        AK-5 \par
\par
        APPENDIX AL  \cf2 AS68(HC[S])08 ASSEMBLER\cf1                         AL-1 \par
          AL.1    PROCESSOR SPECIFIC DIRECTIVES                     AL-1 \par
          AL.1.1    .hc08 Directive                                 AL-1 \par
          AL.1.2    .hcs08 Directive                                AL-2 \par
          AL.1.3    .6805 Directive                                 AL-2 \par
          AL.1.4    .hc05 Directive                                 AL-2 \par
          AL.1.5    The .__.CPU.  Variable                          AL-3 \par
\page\par
\par
                                                               Page viii\par
        \par
\par
\par
          AL.2    68HC(S)08 REGISTER SET                            AL-3 \par
          AL.3    68HC(S)08 INSTRUCTION SET                         AL-4 \par
          AL.3.1    Control Instructions                            AL-5 \par
          AL.3.2    Bit Manipulation Instructions                   AL-5 \par
          AL.3.3    Branch Instructions                             AL-5 \par
          AL.3.4    Complex Branch Instructions                     AL-5 \par
          AL.3.5    Read-Modify-Write Instructions                  AL-6 \par
          AL.3.6    Register\\Memory Instructions                    AL-7 \par
          AL.3.7    Double Operand Move Instruction                 AL-7 \par
          AL.3.8    16-Bit <H:X> Index Register Instructions        AL-7 \par
          AL.3.9    Jump and Jump to Subroutine Instructions        AL-7 \par
\par
        APPENDIX AM  \cf2 AS6809 ASSEMBLER\cf1                                AM-1 \par
          AM.1    6809 REGISTER SET                                 AM-1 \par
          AM.2    6809 INSTRUCTION SET                              AM-1 \par
          AM.2.1    Inherent Instructions                           AM-3 \par
          AM.2.2    Short Branch Instructions                       AM-3 \par
          AM.2.3    Long Branch Instructions                        AM-4 \par
          AM.2.4    Single Operand Instructions                     AM-5 \par
          AM.2.5    Double Operand Instructions                     AM-6 \par
          AM.2.6    D-register Instructions                         AM-6 \par
          AM.2.7    Index/Stack Register Instructions               AM-7 \par
          AM.2.8    Jump and Jump to Subroutine Instructions        AM-7 \par
          AM.2.9    Register - Register Instructions                AM-7 \par
          AM.2.10   Condition Code Register Instructions            AM-7 \par
          AM.2.11   6800 Compatibility Instructions                 AM-8 \par
\par
        APPENDIX AN  \cf2 AS6811 ASSEMBLER\cf1                                AN-1 \par
          AN.1    68HC11 REGISTER SET                               AN-1 \par
          AN.2    68HC11 INSTRUCTION SET                            AN-1 \par
          AN.2.1    Inherent Instructions                           AN-2 \par
          AN.2.2    Branch Instructions                             AN-3 \par
          AN.2.3    Single Operand Instructions                     AN-4 \par
          AN.2.4    Double Operand Instructions                     AN-5 \par
          AN.2.5    Bit Manupulation Instructions                   AN-5 \par
          AN.2.6    Jump and Jump to Subroutine Instructions        AN-6 \par
          AN.2.7    Long Register Instructions                      AN-6 \par
\par
        APPENDIX AO  \cf2 AS68(HC[S])12 ASSEMBLER\cf1                         AO-1 \par
          AO.1    PROCESSOR SPECIFIC DIRECTIVES                     AO-1 \par
          AO.1.1    .hc12 Directive                                 AO-1 \par
          AO.1.2    .hcs12 Directive                                AO-1 \par
          AO.1.3    The .__.CPU.  Variable                          AO-2 \par
          AO.2    68HC(S)12 REGISTER SET                            AO-2 \par
          AO.3    68HC(S)12 INSTRUCTION SET                         AO-3 \par
          AO.3.1    Inherent Instructions                           AO-4 \par
          AO.3.2    Short Branch Instructions                       AO-5 \par
          AO.3.3    Long Branch Instructions                        AO-5 \par
          AO.3.4    Branch on Decrement, Test, or Increment         AO-5 \par
\page\par
\par
                                                                 Page ix\par
        \par
\par
\par
          AO.3.5    Bit Clear and Set Instructions                  AO-5 \par
          AO.3.6    Branch on Bit Clear or Set                      AO-6 \par
          AO.3.7    Single Operand Instructions                     AO-6 \par
          AO.3.8    Double Operand Instructions                     AO-7 \par
          AO.3.9    Move Instructions                               AO-7 \par
          AO.3.10   D-register Instructions                         AO-7 \par
          AO.3.11   Index/Stack Register Instructions               AO-8 \par
          AO.3.12   Jump and Jump/Call to Subroutine\par
                    Instructions                                    AO-8 \par
          AO.3.13   Other Special Instructions                      AO-8 \par
          AO.3.14   Register - Register Instructions                AO-8 \par
          AO.3.15   Condition Code Register Instructions            AO-9 \par
          AO.3.16   M68HC11 Compatibility Mode Instructions         AO-9 \par
\par
        APPENDIX AP  \cf2 AS6816 ASSEMBLER\cf1                                AP-1 \par
          AP.1    68HC16 REGISTER SET                               AP-1 \par
          AP.2    68HC16 INSTRUCTION SET                            AP-1 \par
          AP.2.1    Inherent Instructions                           AP-3 \par
          AP.2.2    Push/Pull Multiple Register Instructions        AP-3 \par
          AP.2.3    Short Branch Instructions                       AP-3 \par
          AP.2.4    Long Branch Instructions                        AP-4 \par
          AP.2.5    Bit Manipulation Instructions                   AP-4 \par
          AP.2.6    Single Operand Instructions                     AP-5 \par
          AP.2.7    Double Operand Instructions                     AP-6 \par
          AP.2.8    Index/Stack Register Instructions               AP-7 \par
          AP.2.9    Jump and Jump to Subroutine Instructions        AP-7 \par
          AP.2.10   Condition Code Register Instructions            AP-7 \par
          AP.2.11   Multiply and Accumulate Instructions            AP-7 \par
\par
        APPENDIX AQ  \cf2 AS740 ASSEMBLER\cf1                                 AQ-1 \par
          AQ.1    ACKNOWLEDGMENT                                    AQ-1 \par
          AQ.2    740 REGISTER SET                                  AQ-1 \par
          AQ.3    740 INSTRUCTION SET                               AQ-2 \par
          AQ.3.1    Inherent Instructions                           AQ-3 \par
          AQ.3.2    Branch Instructions                             AQ-3 \par
          AQ.3.3    Single Operand Instructions                     AQ-3 \par
          AQ.3.4    Double Operand Instructions                     AQ-4 \par
          AQ.3.5    Jump and Jump to Subroutine Instructions        AQ-4 \par
          AQ.3.6    Miscellaneous X and Y Register Instructions     AQ-4 \par
          AQ.3.7    Bit Instructions                                AQ-4 \par
          AQ.3.8    Other Instructions                              AQ-4 \par
\par
        APPENDIX AR  \cf2 AS78K0 ASSEMBLER\cf1                                AR-1 \par
          AR.1    PROCESSOR SPECIFIC DIRECTIVES                     AR-1 \par
          AR.1.1    .setdp Directive                                AR-1 \par
          AR.1.2    .xerr Directive                                 AR-2 \par
          AR.2    78K/0 REGISTER SET                                AR-3 \par
          AR.3    78K/0 INSTRUCTION SET                             AR-3 \par
          AR.3.1    Inherent Instructions                           AR-5 \par
\page\par
\par
                                                                  Page x\par
        \par
\par
\par
          AR.3.2    Branch Instructions                             AR-5 \par
          AR.3.3    Single Operand Instructions                     AR-6 \par
          AR.3.4    Double Operand Instructions                     AR-6 \par
\par
        APPENDIX AS  \cf2 AS78K0S ASSEMBLER\cf1                               AS-1 \par
          AS.1    78K/0S REGISTER SET                               AS-1 \par
          AS.2    78K/0S INSTRUCTION SET                            AS-1 \par
          AS.2.1    Inherent Instructions                           AS-3 \par
          AS.2.2    Branch Instructions                             AS-3 \par
          AS.2.3    Single Operand Instructions                     AS-3 \par
          AS.2.4    Double Operand Instructions                     AS-4 \par
\par
        APPENDIX AT  \cf2 AS8008 ASSEMBLER\cf1                                AT-1 \par
          AT.1    8008 REGISTER SET                                 AT-1 \par
          AT.2    8008 INSTRUCTION SET                              AT-2 \par
          AT.2.1    Instruction Listing                             AT-2 \par
\par
        APPENDIX AU  \cf2 AS8008S ASSEMBLER\cf1                               AU-1 \par
          AU.1    8008 REGISTER SET                                 AU-1 \par
          AU.2    8008 INSTRUCTION SET                              AU-2 \par
          AU.2.1    Instruction Listing                             AU-3 \par
\par
        APPENDIX AV  \cf2 AS8048 ASSEMBLER\cf1                                AV-1 \par
          AV.1    .8048 DIRECTIVE                                   AV-1 \par
          AV.2    .8041 DIRECTIVE                                   AV-1 \par
          AV.3    .8022 DIRECTIVE                                   AV-2 \par
          AV.4    .8021 DIRECTIVE                                   AV-2 \par
          AV.5    THE .__.CPU.  VARIABLE                            AV-2 \par
          AV.6    8048 REGISTER SET                                 AV-3 \par
          AV.7    8048 INSTRUCTION SET                              AV-4 \par
          AV.7.1    Alphabetical Instruction Listing                AV-5 \par
\par
        APPENDIX AW  \cf2 AS8051 ASSEMBLER\cf1                                AW-1 \par
          AW.1    ACKNOWLEDGMENT                                    AW-1 \par
          AW.2    8051 REGISTER SET                                 AW-1 \par
          AW.3    8051 INSTRUCTION SET                              AW-2 \par
          AW.3.1    Inherent Instructions                           AW-2 \par
          AW.3.2    Move Instructions                               AW-3 \par
          AW.3.3    Single Operand Instructions                     AW-3 \par
          AW.3.4    Two Operand Instructions                        AW-4 \par
          AW.3.5    Call and Return Instructions                    AW-4 \par
          AW.3.6    Jump Instructions                               AW-4 \par
          AW.3.7    Predefined Symbols:  SFR Map                    AW-5 \par
          AW.3.8    Predefined Symbols:  SFR Bit Addresses          AW-6 \par
          AW.3.9    Predefined Symbols:  Control Bits               AW-7 \par
\par
        APPENDIX AX  \cf2 AS8085 ASSEMBLER\cf1                                AX-1 \par
          AX.1    8085 REGISTER SET                                 AX-1 \par
          AX.2    8085 INSTRUCTION SET                              AX-1 \par
\page\par
\par
                                                                 Page xi\par
        \par
\par
\par
          AX.2.1    Inherent Instructions                           AX-2 \par
          AX.2.2    Register/Memory/Immediate Instructions          AX-2 \par
          AX.2.3    Call and Return Instructions                    AX-2 \par
          AX.2.4    Jump Instructions                               AX-3 \par
          AX.2.5    Input/Output/Reset Instructions                 AX-3 \par
          AX.2.6    Move Instructions                               AX-3 \par
          AX.2.7    Other Instructions                              AX-3 \par
          AX.2.8    Unspecified Instructions                        AX-4 \par
          AX.3    UNSPECIFIED OPCODE ARTICLE                        AX-5 \par
\par
        APPENDIX AY  \cf2 AS8X300 ASSEMBLER\cf1                               AY-1 \par
          AY.1    PROCESSOR SPECIFIC DIRECTIVES                     AY-1 \par
          AY.1.1    .8x300 Directive                                AY-1 \par
          AY.1.2    .8x305 Directive                                AY-2 \par
          AY.1.3    .liv Directive                                  AY-2 \par
          AY.1.4    .riv Directive                                  AY-2 \par
          AY.1.5    .fdef Directive                                 AY-2 \par
          AY.1.6    .xtnd Directive                                 AY-3 \par
          AY.1.7    .xerr Directive                                 AY-3 \par
          AY.2    THE 8X300/8X305 MACRO LIBRARY                     AY-4 \par
          AY.2.1    ORG                                             AY-4 \par
          AY.2.2    PROC                                            AY-5 \par
          AY.2.3    ENTRY                                           AY-5 \par
          AY.2.4    CALL, RTN, and CALL_TABLE                       AY-5 \par
          AY.3    8X300 AND 8X305 REGISTER SETS                     AY-7 \par
          AY.4    8X300 AND 8X305 INSTRUCTION SETS                  AY-8 \par
          AY.4.1    Instruction Listing                             AY-9 \par
\par
        APPENDIX AZ  \cf2 AS8XCXXX ASSEMBLER\cf1                              AZ-1 \par
          AZ.1    ACKNOWLEDGMENTS                                   AZ-1 \par
          AZ.2    AS8XCXXX ASSEMBLER DIRECTIVES                     AZ-1 \par
          AZ.2.1    Processor Selection Directives                  AZ-1 \par
          AZ.2.2    .cpu Directive                                  AZ-2 \par
          AZ.2.3    Processor Addressing Range Directives           AZ-3 \par
          AZ.2.4    The .__.CPU.  Variable                          AZ-3 \par
          AZ.2.5    DS80C390 Addressing Mode Directive              AZ-4 \par
          AZ.2.6    The .msb Directive                              AZ-4 \par
          AZ.3    DS8XCXXX REGISTER SET                             AZ-6 \par
          AZ.4    DS8XCXXX INSTRUCTION SET                          AZ-6 \par
          AZ.4.1    Inherent Instructions                           AZ-7 \par
          AZ.4.2    Move Instructions                               AZ-7 \par
          AZ.4.3    Single Operand Instructions                     AZ-8 \par
          AZ.4.4    Two Operand Instructions                        AZ-8 \par
          AZ.4.5    Call and Return Instructions                    AZ-9 \par
          AZ.4.6    Jump Instructions                               AZ-9 \par
          AZ.5    DS8XCXXX SPECIAL FUNCTION REGISTERS              AZ-10 \par
          AZ.5.1    SFR Map                                        AZ-10 \par
          AZ.5.2    Bit Addressable Registers:  Generic            AZ-11 \par
          AZ.5.3    Bit Addressable Registers:  Specific           AZ-12 \par
\page\par
\par
                                                                Page xii\par
        \par
\par
\par
          AZ.5.4    Optional Symbols:  Control Bits                AZ-13 \par
          AZ.6    DS80C310 SPECIAL FUNCTION REGISTERS              AZ-14 \par
          AZ.6.1    SFR Map                                        AZ-14 \par
          AZ.6.2    Bit Addressable Registers:  Generic            AZ-15 \par
          AZ.6.3    Bit Addressable Registers:  Specific           AZ-16 \par
          AZ.6.4    Optional Symbols:  Control Bits                AZ-17 \par
          AZ.7    DS80C320/DS80C323 SPECIAL FUNCTION REGISTERS     AZ-18 \par
          AZ.7.1    SFR Map                                        AZ-18 \par
          AZ.7.2    Bit Addressable Registers:  Generic            AZ-19 \par
          AZ.7.3    Bit Addressable Registers:  Specific           AZ-20 \par
          AZ.7.4    Optional Symbols:  Control Bits                AZ-21 \par
          AZ.8    DS80C390 SPECIAL FUNCTION REGISTERS              AZ-22 \par
          AZ.8.1    SFR Map                                        AZ-22 \par
          AZ.8.2    Bit Addressable Registers:  Generic            AZ-23 \par
          AZ.8.3    Bit Addressable Registers:  Specific           AZ-24 \par
          AZ.8.4    Optional Symbols:  Control Bits                AZ-25 \par
          AZ.9    DS83C520/DS87C520 SPECIAL FUNCTION REGISTERS     AZ-27 \par
          AZ.9.1    SFR Map                                        AZ-27 \par
          AZ.9.2    Bit Addressable Registers:  Generic            AZ-28 \par
          AZ.9.3    Bit Addressable Registers:  Specific           AZ-29 \par
          AZ.9.4    Optional Symbols:  Control Bits                AZ-30 \par
          AZ.10   DS83C530/DS87C530 SPECIAL FUNCTION REGISTERS     AZ-31 \par
          AZ.10.1   SFR Map                                        AZ-31 \par
          AZ.10.2   Bit Addressable Registers:  Generic            AZ-32 \par
          AZ.10.3   Bit Addressable Registers:  Specific           AZ-33 \par
          AZ.10.4   Optional Symbols:  Control Bits                AZ-34 \par
          AZ.11   DS83C550/DS87C550 SPECIAL FUNCTION REGISTERS     AZ-35 \par
          AZ.11.1   SFR Map                                        AZ-35 \par
          AZ.11.2   Bit Addressable Registers:  Generic            AZ-37 \par
          AZ.11.3   Bit Addressable Registers:  Specific           AZ-39 \par
          AZ.11.4   Optional Symbols:  Control Bits                AZ-41 \par
\par
        APPENDIX BA  \cf2 ASAVR ASSEMBLER\cf1                                 BA-1 \par
          BA.1    AVR ASSEMBLER NOTES                               BA-1 \par
          BA.1.1    Processor Specific Directives                   BA-2 \par
          BA.1.2    The .__.CPU.  Variable                          BA-3 \par
          BA.2    AVR REGISTER SET                                  BA-4 \par
          BA.3    AVR INSTRUCTION SET                               BA-4 \par
          BA.3.1    AVR Arithmetic and Logical Instructions         BA-6 \par
          BA.3.2    AVR Bit and Bit-Test Instructions               BA-6 \par
          BA.3.3    AVR Skip on Test Instructions                   BA-7 \par
          BA.3.4    AVR Jump/Call/Return Instructions               BA-7 \par
          BA.3.5    AVR Short Branch Instructions                   BA-7 \par
          BA.3.6    AVR Short Branch Instructions with Bit Test     BA-7 \par
          BA.3.7    AVR Data Transfer Instructions                  BA-7 \par
\par
        APPENDIX BB  \cf2 ASEZ80 ASSEMBLER\cf1                                BB-1 \par
          BB.1    ACKNOWLEDGMENT                                    BB-1 \par
          BB.2    PROCESSOR SPECIFIC DIRECTIVES                     BB-1 \par
\page\par
\par
                                                               Page xiii\par
        \par
\par
\par
          BB.2.1    .z80 Directive                                  BB-2 \par
          BB.2.2    .adl Directive                                  BB-2 \par
          BB.2.3    .msb Directive                                  BB-2 \par
          BB.3    EZ80 ADDRESSING AND INSTRUCTIONS                  BB-4 \par
          BB.3.1    Instruction Symbols                             BB-4 \par
          BB.3.2    EZ80 Instructions                               BB-6 \par
          BB.3.3    Arithmetic Instructions                         BB-9 \par
          BB.3.4    Bit Manipulation Instructions                  BB-10 \par
          BB.3.5    Block Transfer and Compare Instructions        BB-10 \par
          BB.3.6    Exchange Instructions                          BB-10 \par
          BB.3.7    Input/Output Instructions                      BB-10 \par
          BB.3.8    Load Instructions                              BB-11 \par
          BB.3.9    Logical Instructions                           BB-11 \par
          BB.3.10   Processor Control Instructions                 BB-11 \par
          BB.3.11   Program Flow Instructions                      BB-11 \par
          BB.3.12   Shift and Rotate Instructions                  BB-12 \par
\par
        APPENDIX BC  \cf2 ASF2MC8 ASSEMBLER\cf1                               BC-1 \par
          BC.1    PROCESSOR SPECIFIC DIRECTIVES                     BC-1 \par
          BC.1.1    .F2MC8L Directive                               BC-1 \par
          BC.1.2    .F2MC8FX Directive                              BC-1 \par
          BC.1.3    The .__.CPU.  Variable                          BC-2 \par
          BC.2    F2MC8L/F2MC8FX REGISTERS                          BC-2 \par
          BC.3    F2MC8L/F2MC8FX INSTRUCTION SET                    BC-3 \par
          BC.3.1    Transfer Instructions                           BC-5 \par
          BC.3.2    Operation Instructions                          BC-5 \par
          BC.3.3    Branch/Jump/Call Instructions                   BC-5 \par
          BC.3.4    Other Instructions                              BC-5 \par
\par
        APPENDIX BD  \cf2 ASF8 ASSEMBLER\cf1                                  BD-1 \par
          BD.1    F8 REGISTERS                                      BD-2 \par
          BD.2    F8 INSTRUCTION SET                                BD-4 \par
          BD.2.1    Accumulator Group Instructions                  BD-5 \par
          BD.2.2    Branch Instructions                             BD-5 \par
          BD.2.3    Memory Reference Instructions                   BD-5 \par
          BD.2.4    Address Register Instructions                   BD-5 \par
          BD.2.5    Scratchpad Register Instructions                BD-6 \par
          BD.2.6    Miscellaneous Instructions                      BD-6 \par
\par
        APPENDIX BE  \cf2 ASGB ASSEMBLER\cf1                                  BE-1 \par
          BE.1    ACKNOWLEDGEMENT                                   BE-1 \par
          BE.2    INTRODUCTION                                      BE-1 \par
          BE.3    GAMEBOY REGISTER SET AND CONDITIONS               BE-2 \par
          BE.4    GAMEBOY INSTRUCTION SET                           BE-2 \par
          BE.4.1    .tile Directive                                 BE-3 \par
          BE.4.2    Potentially Controversial Mnemonic Selection    BE-4 \par
          BE.4.2.1    Auto-Indexing Loads                           BE-5 \par
          BE.4.2.2    Input and Output Operations                   BE-5 \par
          BE.4.2.3    The 'stop' Instruction                        BE-5 \par
\page\par
\par
                                                                Page xiv\par
        \par
\par
\par
          BE.4.3    Inherent Instructions                           BE-6 \par
          BE.4.4    Implicit Operand Instructions                   BE-6 \par
          BE.4.5    Load Instructions                               BE-6 \par
          BE.4.6    Call/Return Instructions                        BE-7 \par
          BE.4.7    Jump Instructions                               BE-7 \par
          BE.4.8    Bit Manipulation Instructions                   BE-7 \par
          BE.4.9    Input and Output Instructions                   BE-7 \par
          BE.4.10   Register Pair Instructions                      BE-8 \par
\par
        APPENDIX BF  \cf2 ASH8 ASSEMBLER\cf1                                  BF-1 \par
          BF.1    H8/3XX REGISTER SET                               BF-1 \par
          BF.2    H8/3XX INSTRUCTION SET                            BF-1 \par
          BF.2.1    Inherent Instructions                           BF-2 \par
          BF.2.2    Branch Instructions                             BF-3 \par
          BF.2.3    Single Operand Instructions                     BF-4 \par
          BF.2.4    Double Operand Instructions                     BF-5 \par
          BF.2.5    Mov Instructions                                BF-7 \par
          BF.2.6    Bit Manipulation Instructions                   BF-8 \par
          BF.2.7    Extended Bit Manipulation Instructions          BF-9 \par
          BF.2.8    Condition Code Instructions                     BF-9 \par
          BF.2.9    Other Instructions                             BF-10 \par
          BF.2.10   Jump and Jump to Subroutine Instructions       BF-10 \par
\par
        APPENDIX BG  \cf2 ASM8C ASSEMBLER\cf1                                 BG-1 \par
          BG.1    M8C REGISTER SET                                  BG-1 \par
          BG.2    M8C ADDRESSING MODES                              BG-1 \par
          BG.3    M8C INSTRUCTION SET                               BG-2 \par
          BG.3.1    Double Operand Arithmetic Instructions          BG-2 \par
          BG.3.2    Double Operand Logic Instructions               BG-3 \par
          BG.3.3    Miscellaneous Double Operand Instructions       BG-3 \par
          BG.3.4    Single Operand Shift/Rotate Instructions        BG-3 \par
          BG.3.5    Miscellaneous Single Operand Instructions       BG-4 \par
          BG.3.6    Move Instructions                               BG-4 \par
          BG.3.7    Inherent Instructions                           BG-5 \par
          BG.3.8    Branching Instructions                          BG-5 \par
          BG.3.9    Relative Table Read Instruction                 BG-5 \par
\par
        APPENDIX BH  \cf2 ASPIC ASSEMBLER\cf1                                 BH-1 \par
          BH.1    PIC ASSEMBLER NOTES                               BH-1 \par
          BH.2    PROCESSOR SPECIFIC DIRECTIVES                     BH-1 \par
          BH.2.1    .pic Directive                                  BH-2 \par
          BH.2.2    .picnopic Directive                             BH-3 \par
          BH.2.3    .pic12bit Directive                             BH-3 \par
          BH.2.4    .pic14bit Directive                             BH-3 \par
          BH.2.5    .pic16bit Directive                             BH-3 \par
          BH.2.6    .pic20bit Directive                             BH-4 \par
          BH.2.7    The .__.CPU.  Variable                          BH-4 \par
          BH.2.8    .picfix Directive                               BH-5 \par
          BH.2.9    .maxram Directive                               BH-5 \par
\page\par
\par
                                                                 Page xv\par
        \par
\par
\par
          BH.2.10   .badram Directive                               BH-5 \par
          BH.2.11   .setdmm Directive                               BH-6 \par
          BH.3    12-BIT OPCODE PIC                                 BH-6 \par
          BH.4    14-BIT OPCODE PIC                                 BH-7 \par
          BH.5    16-BIT OPCODE PIC                                 BH-9 \par
          BH.6    20-BIT ADDRESSING PIC                            BH-10 \par
          BH.7    PIC OPCODES                                      BH-11 \par
\par
        APPENDIX BI  \cf2 ASRAB ASSEMBLER\cf1                                 BI-1 \par
          BI.1    ACKNOWLEDGMENT                                    BI-1 \par
          BI.2    PROCESSOR SPECIFIC DIRECTIVES                     BI-1 \par
          BI.2.1    .r2k Directive                                  BI-2 \par
          BI.2.2    .hd64 Directive                                 BI-2 \par
          BI.2.3    .z80 Directive                                  BI-2 \par
          BI.2.4    The .__.CPU.  Variable                          BI-3 \par
          BI.3    RABBIT 2000/3000 ADDRESSING AND INSTRUCTIONS      BI-4 \par
          BI.3.1    Instruction Symbols                             BI-4 \par
          BI.3.2    Rabbit Instructions                             BI-6 \par
          BI.4    Z80/HD64180 ADDRESSING AND INSTRUCTIONS           BI-8 \par
          BI.4.1    Inherent Instructions                           BI-9 \par
          BI.4.2    Implicit Operand Instructions                   BI-9 \par
          BI.4.3    Load Instruction                               BI-10 \par
          BI.4.4    Call/Return Instructions                       BI-10 \par
          BI.4.5    Jump and Jump to Subroutine Instructions       BI-10 \par
          BI.4.6    Bit Manipulation Instructions                  BI-11 \par
          BI.4.7    Interrupt Mode and Reset Instructions          BI-11 \par
          BI.4.8    Input and Output Instructions                  BI-11 \par
          BI.4.9    Register Pair Instructions                     BI-11 \par
          BI.4.10   HD64180 Specific Instructions                  BI-12 \par
\par
        APPENDIX BJ  \cf2 ASSCMP ASSEMBLER\cf1                                BJ-1 \par
          BJ.1    SC/MP REGISTER SET                                BJ-1 \par
          BJ.2    SC/MP ADDRESSING MODES                            BJ-1 \par
          BJ.3    SC/MP INSTRUCTION SET                             BJ-2 \par
          BJ.3.1    Memory Reference Instructions                   BJ-2 \par
          BJ.3.2    Immediate Instructions                          BJ-2 \par
          BJ.3.3    Extension Register Instructions                 BJ-3 \par
          BJ.3.4    Memory Increment/Decrement Instructions         BJ-3 \par
          BJ.3.5    Transfer Instructions                           BJ-3 \par
          BJ.3.6    Pointer Register Move Instructions              BJ-3 \par
          BJ.3.7    Shift, Rotate, Serial I/O Instructions          BJ-4 \par
          BJ.3.8    Single-Byte Miscellaneous Instructions          BJ-4 \par
          BJ.3.9    Double-Byte Miscellaneous Instruction           BJ-4 \par
\par
        APPENDIX BK  \cf2 ASST6 ASSEMBLER\cf1                                 BK-1 \par
          BK.1    ST6 REGISTER SET                                  BK-1 \par
          BK.2    ST6 INSTRUCTION SET                               BK-1 \par
          BK.2.1    Inherent Instructions                           BK-2 \par
          BK.2.2    Conditional Branch Instructions                 BK-2 \par
\page\par
\par
                                                                Page xvi\par
        \par
\par
\par
          BK.2.3    Bit Manipulation Instructions                   BK-2 \par
          BK.2.4    Single Operand Instructions                     BK-2 \par
          BK.2.5    Double Operand Instructions                     BK-3 \par
          BK.2.6    Call to Subroutine and Jump Instructions        BK-3 \par
          BK.2.7    Load and Store Instructions                     BK-3 \par
\par
        APPENDIX BL  \cf2 ASST7 ASSEMBLER\cf1                                 BL-1 \par
          BL.1    ST7 REGISTER SET                                  BL-1 \par
          BL.2    ST7 INSTRUCTION SET                               BL-1 \par
          BL.2.1    Inherent Instructions                           BL-4 \par
          BL.2.2    Conditional Branch Instructions                 BL-4 \par
          BL.2.3    Bit Test and Branch Instructions                BL-4 \par
          BL.2.4    Bit Manipulation Instructions                   BL-5 \par
          BL.2.5    Single Operand Instructions                     BL-5 \par
          BL.2.6    Double Operand Instructions                     BL-5 \par
          BL.2.7    Call to Subroutine and Jump Instructions        BL-5 \par
\par
        APPENDIX BM  \cf2 ASST8 ASSEMBLER\cf1                                 BM-1 \par
          BM.1    ST8 REGISTER SET                                  BM-1 \par
          BM.2    ST8 INSTRUCTION SET                               BM-1 \par
          BM.2.1    Inherent Instructions                           BM-5 \par
          BM.2.2    Conditional Branch Instructions                 BM-5 \par
          BM.2.3    Bit Test and Branch Instructions                BM-5 \par
          BM.2.4    Bit Manipulation Instructions                   BM-5 \par
          BM.2.5    Single Operand Instructions                     BM-6 \par
          BM.2.6    Double Operand Instructions                     BM-7 \par
          BM.2.7    Call to Subroutine and Jump Instructions        BM-7 \par
\par
        APPENDIX BN  \cf2 ASZ8 ASSEMBLER\cf1                                  BN-1 \par
          BN.1    Z8 REGISTER SET                                   BN-1 \par
          BN.2    Z8 INSTRUCTION SET                                BN-1 \par
          BN.2.1    Load Instructions                               BN-2 \par
          BN.2.2    Arithmetic Instructions                         BN-3 \par
          BN.2.3    Logical Instructions                            BN-3 \par
          BN.2.4    Program Control Instructions                    BN-3 \par
          BN.2.5    Bit Manipulation Instructions                   BN-3 \par
          BN.2.6    Block Transfer Instructions                     BN-3 \par
          BN.2.7    Rotate and Shift Instructions                   BN-3 \par
          BN.2.8    Cpu Control Instructions                        BN-4 \par
\par
        APPENDIX BO  \cf2 ASZ80 ASSEMBLER\cf1                                 BO-1 \par
          BO.1    .z80 DIRECTIVE                                    BO-1 \par
          BO.2    .hd64 DIRECTIVE                                   BO-1 \par
          BO.3    THE .__.CPU.  VARIABLE                            BO-2 \par
          BO.4    Z80 REGISTER SET AND CONDITIONS                   BO-2 \par
          BO.5    Z80 INSTRUCTION SET                               BO-3 \par
          BO.5.1    Inherent Instructions                           BO-4 \par
          BO.5.2    Implicit Operand Instructions                   BO-4 \par
          BO.5.3    Load Instruction                                BO-5 \par
\page\par
\par
                                                               Page xvii\par
        \par
\par
\par
          BO.5.4    Call/Return Instructions                        BO-5 \par
          BO.5.5    Jump and Jump to Subroutine Instructions        BO-5 \par
          BO.5.6    Bit Manipulation Instructions                   BO-6 \par
          BO.5.7    Interrupt Mode and Reset Instructions           BO-6 \par
          BO.5.8    Input and Output Instructions                   BO-6 \par
          BO.5.9    Register Pair Instructions                      BO-6 \par
          BO.5.10   HD64180/Z180 Specific Instructions              BO-7 \par
\par
        APPENDIX BP  \cf2 ASZ280 ASSEMBLER\cf1                                BP-1 \par
          BP.1    ACKNOWLEDGMENT                                    BP-1 \par
          BP.2    PROCESSOR SPECIFIC DIRECTIVES                     BP-1 \par
          BP.2.1    .z80 Directive                                  BP-2 \par
          BP.2.2    .z80u Directive                                 BP-2 \par
          BP.2.3    .z180 Directive                                 BP-2 \par
          BP.2.4    .z280 Directive                                 BP-3 \par
          BP.2.5    .z280n Directive                                BP-3 \par
          BP.2.6    .z280p Directive                                BP-3 \par
          BP.2.7    The .__.CPU.  Variable                          BP-4 \par
          BP.3    Z280 ADDRESSING AND INSTRUCTIONS                  BP-5 \par
          BP.3.1    Registers                                       BP-5 \par
          BP.3.2    Condition Codes                                 BP-5 \par
          BP.3.3    Z280 Instructions                               BP-6 \par
          BP.3.3.1    Instruction Modes                             BP-6 \par
          BP.3.3.2    Argument Formats                              BP-7 \par
          BP.3.3.3    8-Bit Load Group Instructions                 BP-8 \par
          BP.3.3.4    16-Bit Load and Exchange Group\par
                      Instructions                                  BP-8 \par
          BP.3.3.5    Block Transfer and Search Group\par
                      Instructions                                  BP-9 \par
          BP.3.3.6    8-Bit Arithmetic and Logic Group              BP-9 \par
          BP.3.3.7    16-Bit Arithmetic Operation Instructions     BP-10 \par
          BP.3.3.8    Bit Manipulation, Rotate and Shift Group     BP-10 \par
          BP.3.3.9    Program Control Group Instructions           BP-11 \par
          BP.3.3.10   Program Control Group Instructions           BP-11 \par
          BP.3.3.11   CPU Control Group Instructions               BP-12 \par
          BP.3.3.12   Extended Instructions                        BP-12 \par
          BP.3.4    Z280 Excution Cycles                           BP-12 \par
          BP.4    Z80/HD64180 ADDRESSING AND INSTRUCTIONS          BP-13 \par
          BP.4.1    Inherent Instructions                          BP-13 \par
          BP.4.2    Implicit Operand Instructions                  BP-14 \par
          BP.4.3    Load Instruction                               BP-14 \par
          BP.4.4    Call/Return Instructions                       BP-15 \par
          BP.4.5    Jump and Jump to Subroutine Instructions       BP-15 \par
          BP.4.6    Bit Manipulation Instructions                  BP-15 \par
          BP.4.7    Interrupt Mode and Reset Instructions          BP-15 \par
          BP.4.8    Input and Output Instructions                  BP-16 \par
          BP.4.9    Register Pair Instructions                     BP-16 \par
          BP.4.10   HD64180 Specific Instructions                  BP-16 \par
          BP.4.11   Z80 Undocumented Instructions                  BP-17 \par
\page\par
\par
                                                                  Page 2\par
        \par
\par
\par
         \par
                                  \cf2 P R E F A C E\cf1\par
\par
\par
\par
\par
\par
           The  ASxxxx  assemblers  were  written following the style of\par
        several unfinished cross assemblers found in the Digital  Equip-\par
        ment  Corporation  Users  Society  (DECUS) distribution of the C\par
        programming language.  The incomplete DECUS  code  was  provided\par
        with  no  documentation  as  to  the  input syntax or the output\par
        format.  I wish to thank the author for inspiring  me  to  begin\par
        the development of this set of assemblers.  \par
\par
           The  ASLINK  program was written as a companion to the ASxxxx\par
        assemblers, its design and implementation was not  derived  from\par
        any other work.  \par
\par
           I  would  greatly  appreciate  receiving  the  details of any\par
        changes, additions, or errors pertaining to these  programs  and\par
        will  attempt  to  incorporate  any  fixes  or  generally useful\par
        changes in a future update to these programs.  \par
\par
\par
\par
                Alan R.  Baldwin \par
                Kent State University \par
                Physics Department \par
                Kent, Ohio 44242 \par
                U.S.A.  \par
\par
\par
                http://shop-pdp.net \par
\par
                baldwin@shop-pdp.net \par
\par
                baldwin@kent.edu \par
                tel:  (330) 672 2531 \par
                fax:  (330) 672 2959 \par
\page\par
\par
                                                                  Page 3\par
        \par
\par
\par
         \par
               \cf2 E N D   U S E R   L I C E N S E   A G R E E M E N T\cf1\par
\par
\par
\par
\par
\par
           Copyright (C) 1989-2019 Alan R.  Baldwin \par
\par
           This  program  is  free  software:   you  can redistribute it\par
        and/or modify it under the  terms  of  the  GNU  General  Public\par
        License  as  published  by  the Free Software Foundation, either\par
        version 3 of the License, or (at your option) any later version. \par
\par
           This  program is distributed in the hope that it will be use-\par
        ful, but WITHOUT ANY WARRANTY;  without even  the  implied  war-\par
        ranty  of  MERCHANTABILITY  or FITNESS FOR A PARTICULAR PURPOSE.\par
        See the GNU General Public License for more details.  \par
\par
           You  should  have  received  a copy of the GNU General Public\par
        License   along   with    this    program.     If    not,    see\par
        <http://www.gnu.org/licenses/>.  \par
\page\par
\par
                                                                  Page 4\par
        \par
\par
\par
        ASxxxx Cross Assemblers, Version 5.30, January 2019 \par
\par
        Submitted by Alan R.  Baldwin, \par
        Kent State University, Kent, Ohio \par
\par
        Operating System:  Linux, Windows, MS-DOS \par
        or other supporting ANSI C.  \par
\par
        Source Langauge:  C \par
\par
        Abstract:  \par
\par
           The  ASxxxx  assemblers are a series of microprocessor assem-\par
        blers written in the C programming  language.   This  collection\par
        contains  cross  assemblers  for the 1802, S2650, SC/MP, MPS430,\par
        6100, 61860,  6500,  6800(6802/6808),  6801(6803/HD6303),  6804,\par
        6805,  68HC(S)08,  6809,  68HC11, 68HC(S)12, 68HC16, 740, 78K/0,\par
        78K/0S,  8008,  8008S,  8048(8041/8022/8021)  8051,  8085(8080),\par
        8X300(8X305),   DS8XCXXX,   AVR,   EZ80,   F2MC8L/FX,   F8/3870,\par
        GameBoy(Z80), H8/3xx, Cypress PSoC(M8C), PIC, Rabbit  2000/3000,\par
        ST6,  ST7,  ST8,  Z8, Z80(HD64180), and Z280 series microproces-\par
        sors.  Each  assembler  has  a  device  specific  section  which\par
        includes:   (1)  device description, byte order, and file exten-\par
        sion information, (2) a table of assembler  general  directives,\par
        special directives, assembler mnemonics and associated operation\par
        codes, (3) machine  specific  code  for  processing  the  device\par
        mnemonics, addressing modes, and special directives.  \par
\par
           The assemblers have a common device independent section which\par
        handles the details of file input/output, symbol  table  genera-\par
        tion,  program/data  areas,  expression  analysis, and assembler\par
        directive processing.  \par
\par
           The  assemblers  provide  the following features:  (1) alpha-\par
        betized, formatted symbol table listings, (2) relocatable object\par
        modules, (3) global symbols for linking object modules, (4) con-\par
        ditional assembly directives, (5) reusable  local  symbols,  (6)\par
        include-file  processing,  and  (7)  a  general macro processing\par
        facility.  \par
\par
           The  companion program ASLINK is a relocating linker perform-\par
        ing the following functions:  (1) bind multiple  object  modules\par
        into  a  single  memory  image,  (2) resolve inter-module symbol\par
        references,  (3)  resolve  undefined  symbols   from   specified\par
        librarys of object modules, (4) process absolute, relative, con-\par
        catenated, and overlay attributes in data and program  sections,\par
        (5)  perform  byte and word program-counter relative (pc or pcr)\par
        addressing calculations, (6) define absolute  symbol  values  at\par
        link  time, (7) define absolute area base address values at link\par
\page\par
\par
                                                                  Page 5\par
        \par
\par
\par
        time, (8) produce an Intel Hex  record,  Motorola  S  record  or\par
        Tandy  CoCo  Disk  Basic  output  file, (9) produce a map of the\par
        linked memory image, and (10) update the ASxxxx assembler  list-\par
        ing files with the absolute linked addresses and data.  \par
\par
           The  assemblers  and  linker have been tested using Linux and\par
        DJGPP, Cygwin, Symantec C/C++ V7.2, Borland Turbo C++ 3.0,  Open\par
        Watcom  V1.9,  VC6,  Visual  Studio  2005, 2010, 2013, and 2015.\par
        Complete source code and documentation for  the  assemblers  and\par
        linker  is  included  with the distribution.  Additionally, test\par
        code for each assembler and several  microprocessor  monitors  (\par
        ASSIST05  for  the  6805,  MONDEB and ASSIST09 for the 6809, and\par
        BUFFALO 2.5 for the 6811) are included as  working  examples  of\par
        use of these assemblers.  \par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                    \cf2 CHAPTER 1\cf1\par
\par
                                  \cf2 THE ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        1.1  \cf2 THE ASXXXX ASSEMBLERS\cf1  \par
\par
\par
           The  ASxxxx  assemblers are a series of microprocessor assem-\par
        blers written in the C programming language.  Each assembler has\par
        a device specific section which includes:  \par
\par
             1.  device  description, byte order, and file extension in-\par
                 formation \par
\par
             2.  a  table  of  the assembler general directives, special\par
                 device directives, assembler mnemonics  and  associated\par
                 operation codes \par
\par
             3.  machine specific code for processing the device mnemon-\par
                 ics, addressing modes, and special directives \par
\par
        The device specific information is detailed in the appendices.  \par
\par
           The assemblers have a common device independent section which\par
        handles the details of file input/output, symbol  table  genera-\par
        tion,  program/data  areas,  expression  analysis, and assembler\par
        directive processing.  \par
\par
        The assemblers provide the following features:  \par
\par
             1.  Command string control of assembly functions \par
\par
             2.  Alphabetized, formatted symbol table listing \par
\par
             3.  Relocatable object modules \par
\par
\page\par
\par
        THE ASSEMBLER                                           PAGE 1-2\par
        THE ASXXXX ASSEMBLERS\par
\par
\par
             4.  Global symbols for linking object modules \par
\par
             5.  Conditional assembly directives \par
\par
             6.  Program sectioning directives \par
\par
\par
           ASxxxx assembles one or more source files into a single relo-\par
        catable ascii object file.  The output of the ASxxxx  assemblers\par
        consists of an ascii relocatable object file(*.rel), an assembly\par
        listing file(*.lst), and a symbol file(*.sym) each controlled by\par
        an  assembler  option.  If both the object and listing files are\par
        specified then a listing to relocated listing hint file  (*.hlr)\par
        is  created  as  a  helper for the linker to properly create the\par
        relocated listing file.  \par
\par
\par
        1.1.1  Assembly Pass 1 \par
\par
\par
           During  pass  1, ASxxxx opens all source files and performs a\par
        rudimentary assembly of each source statement.  During this pro-\par
        cess  all symbol tables are built, program sections defined, and\par
        number of bytes for each assembled source line is estimated.  \par
\par
           At the end of pass 1 all undefined symbols may be made global\par
        (external) using the ASxxxx switch -g, otherwise undefined  sym-\par
        bols will be flagged as errors during succeeding passes.  \par
\par
\par
        1.1.2  Assembly Pass 2 \par
\par
\par
           During  pass  2  the ASxxxx assembler resolves forward refer-\par
        ences and determines the number  of  bytes  for  each  assembled\par
        line.   The  number  of bytes used by a particular assembler in-\par
        struction may depend upon the addressing mode, whether  the  in-\par
        struction allows multiple forms based upon the relative distance\par
        to the addressed location, or other factors.   Pass  2  resolves\par
        these cases and determines the address of all symbols.  \par
\par
\par
\page\par
\par
        THE ASSEMBLER                                           PAGE 1-3\par
        THE ASXXXX ASSEMBLERS\par
\par
\par
        1.1.3  Assembly Pass 3 \par
\par
\par
           Pass 3 by the assembler generates the listing file, the relo-\par
        catable output file, the listing to relocated listing hint file,\par
        and  the  symbol  tables.  Also during pass 3 the errors will be\par
        reported.  \par
\par
           The  relocatable object file is an ascii file containing sym-\par
        bol references and definitions, program  area  definitions,  and\par
        the  relocatable assembled code, the linker ASLINK will use this\par
        information to generate an absolute load file  (Intel,  Motorola\par
        or Tandy CoCo Disk Basic formats).  \par
\par
\par
        1.2  \cf2 SOURCE PROGRAM FORMAT\cf1  \par
\par
\par
\par
        1.2.1  Statement Format \par
\par
\par
           A source program is composed of assembly-language statements.\par
        Each statement must be completed on one line.  A line  may  con-\par
        tain a maximum of 128 characters, longer lines are truncated and\par
        lost.  \par
\par
           An  ASxxxx  assembler  statement  may  have  as  many as four\par
        fields.  These fields are identified by their order  within  the\par
        statement  and/or  by separating characters between fields.  The\par
        general format of the ASxxxx statement is:  \par
\par
              [label:]  Operator        Operand         [;Comment(s)] \par
\par
           The  label and comment fields are optional.  The operator and\par
        operand fields are interdependent.  The operator field may be an\par
        assembler  directive or an assembly mnemonic.  The operand field\par
        may be optional or required as defined in  the  context  of  the\par
        operator.  \par
\par
           ASxxxx  interprets  and  processes source statements one at a\par
        time.  Each statement causes a particular operation to  be  per-\par
        formed.  \par
\par
\par
\page\par
\par
        THE ASSEMBLER                                           PAGE 1-4\par
        SOURCE PROGRAM FORMAT\par
\par
\par
        1.2.1.1  Label Field  - \par
\par
           A  label is a user-defined symbol which is assigned the value\par
        of the current location counter and entered into  the  user  de-\par
        fined  symbol  table.   The  current location counter is used by\par
        ASxxxx to assign memory addresses to the source  program  state-\par
        ments as they are encountered during the assembly process.  Thus\par
        a label is a means  of  symbolically  referring  to  a  specific\par
        statement.  \par
\par
           When  a program section is absolute, the value of the current\par
        location counter is absolute;  its value references an  absolute\par
        memory  address.   Similarly, when a program section is relocat-\par
        able, the value of the current location counter is  relocatable.\par
        A  relocation  bias  calculated at link time is added to the ap-\par
        parent value of the current location counter  to  establish  its\par
        effective  absolute  address  at  execution time.  (The user can\par
        also force the linker to relocate sections defined as  absolute.\par
        This may be required under special circumstances.) \par
\par
           If  present,  a  label  must  be  the first field in a source\par
        statement and must be terminated by a colon (:).   For  example,\par
        if  the  value  of  the  current  location  counter  is absolute\par
        01F0(H), the statement:  \par
\par
              abcd:     nop \par
\par
        assigns  the  value  01F0(H) to the label abcd.  If the location\par
        counter value were relocatable, the final value of abcd would be\par
        01F0(H)+K, where K represents the relocation bias of the program\par
        section, as calculated by the linker at link time.  \par
\par
           More  than  one label may appear within a single label field.\par
        Each label so specified is assigned the same address value.  For\par
        example,  if  the  value  of  the  current  location  counter is\par
        1FF0(H), the multiple labels in the following statement are each\par
        assigned the value 1FF0(H):  \par
\par
              abcd:     aq:     $abc:   nop \par
\par
           Multiple labels may also appear on successive lines.  For ex-\par
        ample, the statements \par
\par
              abcd:  \par
              aq:  \par
              $abc:     nop \par
\par
        likewise  cause  the  same value to be assigned to all three la-\par
        bels.  \par
\page\par
\par
        THE ASSEMBLER                                           PAGE 1-5\par
        SOURCE PROGRAM FORMAT\par
\par
\par
           A  double  colon  (::)  defines the label as a global symbol.\par
        For example, the statement \par
\par
              abcd::    nop \par
\par
        establishes the label abcd as a global symbol.  The distinguish-\par
        ing attribute of a global symbol is that it  can  be  referenced\par
        from  within an object module other than the module in which the\par
        symbol is defined.  References to this label  in  other  modules\par
        are  resolved when the modules are linked as a composite execut-\par
        able image.  \par
\par
        The legal characters for defining labels are:  \par
\par
                A through Z \par
                a through z \par
                0 through 9 \par
                . (Period) \par
                $ (Dollar sign) \par
                _ (underscore) \par
\par
           A  label  may  be  any  length,  however  only  the  first 79\par
        characters are significant and, therefore must be  unique  among\par
        all  labels in the source program (not necessarily among separa-\par
        tely compiled modules).  An error code(s) (<m> or <p>)  will  be\par
        generated  in the assembly listing if the first 79 characters in\par
        two or more labels are the same.  The <m> code is caused by  the\par
        redeclaration  of  the symbol or its reference by another state-\par
        ment.  The <p> code is generated because the symbols location is\par
        changing on each pass through the source file.  \par
\par
           The  label  must  not  start with the characters 0-9, as this\par
        designates a reusable symbol with special  attributes  described\par
        in a later section.  \par
\par
           The  label  must  not  start  with  the  sequence $$, as this\par
        represents the temporary radix 16 for constants.  \par
\par
\par
\page\par
\par
        THE ASSEMBLER                                           PAGE 1-6\par
        SOURCE PROGRAM FORMAT\par
\par
\par
        1.2.1.2  Operator Field  - \par
\par
           The  operator field specifies the action to be performed.  It\par
        may consist of an instruction mnemonic (op code) or an assembler\par
        directive.  \par
\par
           When  the  operator is an instruction mnemonic, a machine in-\par
        struction is generated and the assembler evaluates the addresses\par
        of  the operands which follow.  When the operator is a directive\par
        ASxxxx performs certain control actions or processing operations\par
        during assembly of the source program.  \par
\par
           Leading  and  trailing  spaces  or tabs in the operator field\par
        have no significance;  such characters serve  only  to  separate\par
        the operator field from the preceeding and following fields.  \par
\par
           An operator is terminated by a space, tab or end of line.  \par
\par
\par
        1.2.1.3  Operand Field  - \par
\par
           When  the  operator is an instruction mnemonic (op code), the\par
        operand  field  contains  program  variables  that  are  to   be\par
        evaluated/manipulated by the operator.  \par
\par
           Operands  may  be  expressions  or  symbols, depending on the\par
        operator.  Multiple expressions used in the operand  fields  may\par
        be  separated  by a comma.  An operand should be preceeded by an\par
        operator field;  if it is not, the statement will give an  error\par
        (<q> or <o>).   All operands following instruction mnemonics are\par
        treated as expressions.  \par
\par
           The operand field is terminated by a semicolon when the field\par
        is followed  by  a  comment.   For  example,  in  the  following\par
        statement:  \par
\par
              label:    lda     abcd,x          ;Comment field \par
\par
        the  tab  between lda and abcd terminates the operator field and\par
        defines the beginning of the operand field;  a  comma  separates\par
        the operands abcd and x;  and a semicolon terminates the operand\par
        field and defines the beginning of the comment field.   When  no\par
        comment  field  follows,  the operand field is terminated by the\par
        end of the source line.  \par
\par
\par
\page\par
\par
        THE ASSEMBLER                                           PAGE 1-7\par
        SOURCE PROGRAM FORMAT\par
\par
\par
        1.2.1.4  Comment Field  - \par
\par
           The comment field begins with a semicolon and extends through\par
        the end of the line.  This field is optional and may contain any\par
        7-bit ascii character except null.  \par
\par
           Comments  do not affect assembly processing or program execu-\par
        tion.  \par
\par
\par
        1.3  \cf2 SYMBOLS AND EXPRESSIONS\cf1  \par
\par
\par
           This  section  describes the generic components of the ASxxxx\par
        assemblers:  the character set, the conventions observed in con-\par
        structing  symbols,  and  the use of numbers, operators, and ex-\par
        pressions.  \par
\par
\par
        1.3.1  Character Set \par
\par
\par
           The following characters are legal in ASxxxx source programs: \par
\par
             1.  The  letters  A  through Z.  Both upper- and lower-case\par
                 letters are acceptable.  The  assemblers,  by  default,\par
                 are  case  sensitive,  i.e.   ABCD and abcd are not the\par
                 same symbols.  (The assemblers can be made case  insen-\par
                 sitive by using the -z command line option.) \par
\par
             2.  The digits 0 through 9 \par
\par
             3.  The  characters . (period), $ (dollar sign), and _ (un-\par
                 derscore).  \par
\par
             4.  The special characters listed in Tables 1 through 6.  \par
\par
\par
           Tables  1  through  6  describe  the various ASxxxx label and\par
        field terminators, assignment operators, operand separators, as-\par
        sembly, unary, binary, and radix operators.  \par
\page\par
\par
        THE ASSEMBLER                                           PAGE 1-8\par
        SYMBOLS AND EXPRESSIONS\par
\par
\par
        Table 1         Label Terminators and Assignment Operators \par
        ---------------------------------------------------------------- \par
\par
                :   Colon               Label terminator.  \par
\par
                ::  Double colon        Label  Terminator;   defines the\par
                                        label as a global label.  \par
\par
                =   Equal sign          Direct assignment operator.  \par
\par
                ==  Global equal        Direct assignment operator;  de-\par
                                        fines the  symbol  as  a  global\par
                                        symbol.  \par
\par
                =:  Local equal         Direct assignment operator;  de-\par
                                        fines the symbol as a local sym-\par
                                        bol.  \par
\par
        ---------------------------------------------------------------- \par
\par
\par
\par
\par
\par
        Table 2         Field Terminators and Operand Separators \par
        ---------------------------------------------------------------- \par
\par
                    Tab                 Item or field terminator.  \par
\par
                    Space               Item or field terminator.  \par
\par
                ,   Comma               Operand field separator.  \par
\par
                ;   Semicolon           Comment field indicator.  \par
\par
        ---------------------------------------------------------------- \par
\par
\par
\par
\par
\par
\page\par
\par
        THE ASSEMBLER                                           PAGE 1-9\par
        SYMBOLS AND EXPRESSIONS\par
\par
\par
        Table 3         Assembler Operators \par
        ---------------------------------------------------------------- \par
\par
                #   Number sign         Immediate expression indicator. \par
\par
                .   Period              Current location counter.  \par
\par
                (   Left parenthesis    Expression delimiter.  \par
\par
                )   Right parenthesis   Expression delimeter.  \par
\par
        ---------------------------------------------------------------- \par
\par
\par
\par
\par
\par
        Table 4         Unary Operators \par
        ---------------------------------------------------------------- \par
\par
                <   Left bracket        <FEDC   Produces  the lower byte\par
                                                value of the expression.\par
                                                (DC) \par
\par
                >   Right bracket       >FEDC   Produces  the upper byte\par
                                                value of the expression.\par
                                                (FE) \par
\par
                +   Plus sign           +A      Positive value of A \par
\par
                -   Minus sign          -A      Produces   the  negative\par
                                                (2's complement) of A.  \par
\par
                ~   Tilde               ~A      Produces the 1's comple-\par
                                                ment of A.  \par
\par
                '   Single quote        'D      Produces  the  value  of\par
                                                the character D.  \par
\par
                "   Double quote        "AB     Produces the double byte\par
                                                value for AB.  \par
\par
                \\   Backslash           '\\n     Unix style characters \par
                                                \\b, \\f, \\n, \\r, \\t \par
                                     or '\\001   or octal byte values.  \par
\par
        ---------------------------------------------------------------- \par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-10\par
        SYMBOLS AND EXPRESSIONS\par
\par
\par
\par
\par
\par
\par
\par
        Table 5         Binary Operators \par
        ---------------------------------------------------------------- \par
\par
                <<  Double          0800 << 4   Produces the 4 bit \par
                    Left bracket                left-shifted   value  of\par
                                                0800.  (8000) \par
\par
                >>  Double          0800 >> 4   Produces the 4 bit \par
                    Right bracket               right-shifted  value  of\par
                                                0800.  (0080) \par
\par
                +   Plus sign       A + B       Arithmetic      Addition\par
                                                operator.  \par
\par
                -   Minus sign      A - B       Arithmetic   Subtraction\par
                                                operator.  \par
\par
                *   Asterisk        A * B       Arithmetic   Multiplica-\par
                                                tion operator.  \par
\par
                /   Slash           A / B       Arithmetic      Division\par
                                                operator.  \par
\par
                &   Ampersand       A & B       Logical AND operator.  \par
\par
                |   Bar             A | B       Logical OR operator.  \par
\par
                %   Percent sign    A % B       Modulus operator.  \par
\par
                ^   Up arrow or     A ^ B       EXCLUSIVE OR operator.  \par
                    circumflex \par
\par
        ---------------------------------------------------------------- \par
\par
\par
\par
\par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-11\par
        SYMBOLS AND EXPRESSIONS\par
\par
\par
        Table 6         Temporary Radix Operators \par
        ---------------------------------------------------------------- \par
\par
                $%,   0b, 0B            Binary radix operator.  \par
\par
                $&,   0o, 0O, 0q, 0Q    Octal radix operator.  \par
\par
                $#,   0d, 0D            Decimal radix operator.  \par
\par
                $$,   0h, 0H, 0x, 0X    Hexidecimal radix operator.  \par
\par
\par
                Potential  ambiguities arising from the use of 0b and 0d\par
                as temporary radix operators may be circumvented by pre-\par
                ceding  all  non-prefixed  hexidecimal  numbers with 00.\par
                Leading 0's are required in any  case  where  the  first\par
                hexidecimal  digit is abcdef as the assembler will treat\par
                the letter sequence as a label.  \par
\par
        ---------------------------------------------------------------- \par
\par
\par
\par
\par
\par
\par
\par
        1.3.2  User-Defined Symbols \par
\par
\par
           User-defined  symbols are those symbols that are equated to a\par
        specific value through a direct assignment statement  or  appear\par
        as  labels.  These symbols are added to the User Symbol Table as\par
        they are encountered during assembly.  \par
\par
        The following rules govern the creation of user-defined symbols: \par
\par
             1.  Symbols  can  be  composed  of alphanumeric characters,\par
                 dollar signs ($),  periods  (.),  and  underscores  (_)\par
                 only.  \par
\par
             2.  The  first  character  of a symbol must not be a number\par
                 (except in the case of reusable symbols).  \par
\par
             3.  The  first 79 characters of a symbol must be unique.  A\par
                 symbol  can  be  written  with  more  than   79   legal\par
                 characters,  but the 80th and subsequent characters are\par
                 ignored.  \par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-12\par
        SYMBOLS AND EXPRESSIONS\par
\par
\par
             4.  Spaces and Tabs must not be embedded within a symbol.  \par
\par
\par
\par
        1.3.3  Reusable Symbols \par
\par
\par
           Reusable  symbols are specially formatted symbols used as la-\par
        bels within a block of coding that has been delimited as a reus-\par
        able symbol block.  Reusable symbols are of the form n$, where n\par
        is a decimal integer from 0 to 65535,  inclusive.   Examples  of\par
        reusable symbols are:  \par
\par
              1$ \par
              27$ \par
              138$ \par
              244$ \par
\par
           The range of a reusable symbol block consists of those state-\par
        ments between two normally constructed  symbolic  labels.   Note\par
        that a statement of the form:  \par
\par
              ALPHA = EXPRESSION \par
\par
        is a direct assignment statement but does not create a label and\par
        thus does not delimit the range of a reusable symbol block.  \par
\par
           Note  that  the  range  of a reusable symbol block may extend\par
        across program areas.  \par
\par
           Reusable symbols provide a convenient means of generating la-\par
        bels for branch instructions and other  such  references  within\par
        reusable symbol blocks.  Using reusable symbols reduces the pos-\par
        sibility of symbols with multiple definitions appearing within a\par
        user  program.   In  addition,  the use of reusable symbols dif-\par
        ferentiates entry-point labels from other labels, since reusable\par
        labels cannot be referenced from outside their respective symbol\par
        blocks.  Thus, reusable symbols of the same name can  appear  in\par
        other  symbol blocks without conflict.  Reusable symbols require\par
        less symbol table space  than  normal  symbols.   Their  use  is\par
        recommended.  \par
\par
           The  use  of  the  same reusable symbol within a symbol block\par
        will generate one or both of the <m> or <p> errors.  \par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-13\par
        SYMBOLS AND EXPRESSIONS\par
\par
\par
        Example of reusable symbols:  \par
\par
                a:      ldx     #atable ;get table address\par
                        lda     #0d48   ;table length\par
                1$:     clr     ,x+     ;clear\par
                        deca\par
                        bne     1$\par
                        \par
                b:      ldx     #btable ;get table address\par
                        lda     #0d48   ;table length\par
                1$:     clr     ,x+     ;clear\par
                        deca\par
                        bne     1$\par
\par
\par
        1.3.4  Current Location Counter \par
\par
\par
           The  period  (.) is the symbol for the current location coun-\par
        ter.  When used in the operand  field  of  an  instruction,  the\par
        period   represents  the  address  of  the  first  byte  of  the\par
        instruction:  \par
\par
                AS:     ldx     #.      ;The period (.) refers to\par
                                        ;the address of the ldx\par
                                        ;instruction.\par
\par
           When  used  in  the  operand field of an ASxxxx directive, it\par
        represents the address of the current byte or word:  \par
\par
                QK = 0\par
        \par
                .word   0xFFFE,.+4,QK   ;The operand .+4 in the .word\par
                                        ;directive represents a value\par
                                        ;stored in the second of the\par
                                        ;three words during assembly.\par
\par
           If  we  assume  the  current  value of the program counter is\par
        0H0200, then during assembly, ASxxxx  reserves  three  words  of\par
        storage  starting  at  location 0H0200.  The first value, a hex-\par
        idecimal constant FFFE, will be stored at location 0H0200.   The\par
        second  value  represented  by  .+4  will  be stored at location\par
        0H0202, its value will be 0H0206 ( = 0H0202  +  4).   The  third\par
        value  defined  by  the  symbol  QK  will  be placed at location\par
        0H0204.  \par
\par
           At the beginning of each assembly pass, ASxxxx resets the lo-\par
        cation counter.   Normally,  consecutive  memory  locations  are\par
        assigned  to  each  byte of object code generated.  However, the\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-14\par
        SYMBOLS AND EXPRESSIONS\par
\par
\par
        value of the location counter can be changed  through  a  direct\par
        assignment statement of the following form:  \par
\par
              . = . + expression \par
\par
\par
           The  new  location  counter can only be specified relative to\par
        the current location counter.  Neglecting to specify the current\par
        program  counter  along with the expression on the right side of\par
        the assignment operator will generate the <.> error.   (Absolute\par
        program areas may use the .org directive to specify the absolute\par
        location of the current program counter.) \par
\par
        The following coding illustrates the use of the current location\par
        counter:  \par
\par
                .area   CODE1   (ABS)   ;program area CODE1\par
                                        ;is ABSOLUTE\par
        \par
                .org    0H100           ;set location to\par
                                        ;0H100 absolute\par
        \par
        num1:   ldx     #.+0H10         ;The label num1 has\par
                                        ;the value 0H100.\par
                                        ;X is loaded with\par
                                        ;0H100 + 0H10\par
        \par
                .org    0H130           ;location counter\par
                                        ;set to 0H130\par
        \par
        num2:   ldy     #.              ;The label num2 has\par
                                        ;the value 0H130.\par
                                        ;Y is loaded with\par
                                        ;value 0H130.\par
        \par
        \par
                .area   CODE2   (REL)   ;program area CODE2\par
                                        ;is RELOCATABLE\par
        \par
                . = . + 0H20            ;Set location counter\par
                                        ;to relocatable 0H20 of\par
                                        ;the program section.\par
        \par
        num3:   .word   0               ;The label num3 has\par
                                        ;the value\par
                                        ;of relocatable 0H20.\par
        \par
                . = . + 0H40            ;will reserve 0H40\par
                                        ;bytes of storage as will\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-15\par
        SYMBOLS AND EXPRESSIONS\par
\par
\par
                .blkb   0H40            ;or\par
                .blkw   0H20\par
\par
           The  .blkb  and .blkw directives are the preferred methods of\par
        allocating space.  \par
\par
\par
        1.3.5  Numbers \par
\par
\par
           ASxxxx  assumes that all numbers in the source program are to\par
        be interpreted in decimal radix unless otherwise specified.  The\par
        .radix  directive  may  be used to specify the default as octal,\par
        decimal, or hexidecimal.  Individual numbers can  be  designated\par
        as  binary, octal, decimal, or hexidecimal through the temporary\par
        radix prefixes shown in table 6.  \par
\par
           Negative  numbers  must be preceeded by a minus sign;  ASxxxx\par
        translates such numbers into two's  complement  form.   Positive\par
        numbers may (but need not) be preceeded by a plus sign.  \par
\par
           Numbers are always considered to be absolute values, therefor\par
        they are never relocatable.  \par
\par
\par
        1.3.6  Terms \par
\par
\par
           A  term is a component of an expression and may be one of the\par
        following:  \par
\par
\par
             1.  A number.  \par
\par
             2.  A symbol:  \par
                 1.  A  period (.) specified in an expression causes the\par
                     current location counter to be used.  \par
                 2.  A User-defined symbol.  \par
                 3.  An undefined symbol is assigned a value of zero and\par
                     inserted in the User-Defined symbol table as an un-\par
                     defined symbol.  \par
\par
             3.  A single quote followed by a single ascii character, or\par
                 a double quote followed by two ascii characters.  \par
\par
             4.  An  expression enclosed in parenthesis.  Any expression\par
                 so enclosed is evaluated and reduced to a  single  term\par
                 before  the  remainder  of  the  expression in which it\par
                 appears is evaluated.  Parenthesis, for example, may be\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-16\par
        SYMBOLS AND EXPRESSIONS\par
\par
\par
                 used  to  alter the left-to-right evaluation of expres-\par
                 sions, (as in A*B+C versus A*(B+C)), or to apply a  un-\par
                 ary operator to an entire expression (as in -(A+B)).  \par
\par
             5.  A unary operator followed by a symbol or number.  \par
\par
\par
\par
        1.3.7  Expressions \par
\par
\par
           Expressions  are  combinations  of  terms  joined together by\par
        binary operators.  Expressions reduce to a value.   The  evalua-\par
        tion  of  an expression includes the determination of its attri-\par
        butes.  A resultant expression value may be one of  three  types\par
        (as  described  later  in this section):  relocatable, absolute,\par
        and external.  \par
\par
        Expressions are evaluate with an operand hierarchy as follows:  \par
\par
                *       /       %       multiplication,\par
                                        division, and\par
                                        modulus first.\par
        \par
                +       -               addition and\par
                                        subtraction second.\par
        \par
                <<      >>              left shift and\par
                                        right shift third.\par
        \par
                ^                       exclusive or fourth.\par
        \par
                &                       logical and fifth.\par
        \par
                |                       logical or last\par
        \par
                except that unary operators take precedence over binary\par
                operators.\par
\par
\par
           A  missing  or  illegal  operator  terminates  the expression\par
        analysis, causing error codes <o> and/or  <q>  to  be  generated\par
        depending upon the context of the expression itself.  \par
\par
           At assembly time the value of an external (global) expression\par
        is equal to the value of the absolute part of  that  expression.\par
        For  example,  the expression external+4, where 'external' is an\par
        external symbol, has the value of 4.  This expression,  however,\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-17\par
        SYMBOLS AND EXPRESSIONS\par
\par
\par
        when  evaluated  at link time takes on the resolved value of the\par
        symbol 'external', plus 4.  \par
\par
           Expressions,  when  evaluated  by  ASxxxx,  are  one of three\par
        types:  relocatable, absolute, or external.  The following  dis-\par
        tinctions are important:  \par
\par
             1.  An  expression is relocatable if its value is fixed re-\par
                 lative to the base address of the program area in which\par
                 it appears;  it will have an offset value added at link\par
                 time.  Terms that contain labels defined in relocatable\par
                 program  areas  will  have  a relocatable value;  simi-\par
                 larly, a period (.)  in  a  relocatable  program  area,\par
                 representing  the value of the current program location\par
                 counter, will also have a relocatable value.  \par
\par
             2.  An  expression  is  absolute if its value is fixed.  An\par
                 expression whose terms are numbers and ascii characters\par
                 will  reduce  to  an absolute value.  A relocatable ex-\par
                 pression or term minus a relocatable term,  where  both\par
                 elements  being  evaluated  belong  to the same program\par
                 area, is an absolute expression.  This is because every\par
                 term  in  a  program area has the same relocation bias.\par
                 When one term is subtracted from the other the  reloca-\par
                 tion bias is zero.  \par
\par
             3.  An  expression is external (or global) if it contains a\par
                 single global reference (plus or minus an absolute  ex-\par
                 pression  value) that is not defined within the current\par
                 program.  Thus, an external  expression  is  only  par-\par
                 tially  defined following assembly and must be resolved\par
                 at link time.  \par
\par
\par
\par
        1.4  \cf2 GENERAL ASSEMBLER DIRECTIVES\cf1  \par
\par
\par
           An  ASxxxx  directive  is placed in the operator field of the\par
        source line.  Only one directive is  allowed  per  source  line.\par
        Each  directive  may  have  a blank operand field or one or more\par
        operands.  Legal operands differ with each directive.  \par
\par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-18\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
        1.4.1  \cf3 .module \cf1 Directive \par
\par
        Format:  \par
\par
                .module name \par
\par
           The  .module  directive causes the name to be included in the\par
        assemblers output file as an identifier for this particular  ob-\par
        ject module.  The name may be from 1 to 79 characters in length.\par
        The name may not have any embedded white space (spaces or tabs).\par
        Only  one  identifier is allowed per assembled module.  The main\par
        use of this directive  is  to  allow  the  linker  to  report  a\par
        modules'  use  of undefined symbols.  At link time all undefined\par
        symbols are  reported  and  the  modules  referencing  them  are\par
        listed.  \par
\par
\par
        1.4.2  \cf3 .title \cf1 Directive \par
\par
        Format:  \par
\par
                .title  string \par
\par
           The .title directive provides a character string to be placed\par
        on the second line of each page during listing.  The string  be-\par
        gins  with  the first non white space character (after any space\par
        or tab) and ends with the end of the line.  \par
\par
\par
        1.4.3  \cf3 .sbttl \cf1 Directive \par
\par
        Format:  \par
\par
                .sbttl  string \par
\par
           The .sbttl directive provides a character string to be placed\par
        on the third line of each page during listing.  The  string  be-\par
        gins  with  the first non white space character (after any space\par
        or tab) and ends with the end of the line.  \par
\par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-19\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
        1.4.4  \cf3 .list \cf1 and \cf3 .nlist \cf1 Directives \par
\par
        Format:  \par
\par
                .list                           ;Basic .list \par
\par
                .list   expr                    ;with expression \par
\par
                .list   (arg1,arg2,...,argn)    ;with sublist options \par
\par
                .nlist                          ;Basic .nlist \par
\par
                .nlist  expr                    ;with expression \par
\par
                .nlist  (arg1,arg2,...,argn)    ;with sublist options \par
\par
\par
        The  .list  and  .nlist directives control the listing output to\par
        the .lst  file.   The  directives  have  the  following  sublist\par
        options:  \par
\par
                err     -       errors\par
                loc     -       program location\par
                bin     -       binary output\par
                eqt     -       symbol or .if evaluation\par
                cyc     -       opcode cycle count\par
                lin     -       source line number\par
                src     -       source line text\par
                pag     -       pagination\par
                lst     -       .list/.nlist line listing\par
                md      -       macro definition listing\par
                me      -       macro expansion listing\par
                meb     -       macro expansion binary listing\par
        \par
                !       -       sets the listing mode to\par
                                !(.list) or !(.nlist) before\par
                                applying the sublist options\par
\par
\par
        The  'normal' listing mode .list is the combination of err, loc,\par
        bin, eqt, cyc, lin, src, pag, lst, and md enabled  with  me  and\par
        meb  disabled.  The 'normal' listing mode .nlist has all sublist\par
        items disabled.  When specifying sublist options the option list\par
        must   be  enclosed  within  parenthesis  and  multiple  options\par
        seperated by commas.  \par
\par
           The NOT option, !, is used to set the listing mode to the op-\par
        posite of the .list or  .nlist  directive  before  applying  the\par
        sublist options.  For example:  \par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-20\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
\par
                .nlist  (!)     is equivalent to .list  and\par
                .list   (!)     is equivalent to .nlist\par
                                any additional options will\par
                                be applied normally\par
\par
\par
           Normal  .list/.nlist processing is disabled within false con-\par
        ditional blocks.  However, the .list/.nlist with  an  expression\par
        can  override  this  behavior  if  the expression has a non zero\par
        value.  \par
\par
           Examples of listing options:  \par
\par
                .list   (meb)   ; macro processing lists only\par
                                ; generated binary and location\par
        \par
                .list   (me)    ; listing options are enabled\par
                                ; during macro processing\par
        \par
                .nlist  (src)   ; .nlist src lines not listed\par
        \par
                .nlist  (!,lst) ; list all except .nlist\par
        \par
                .nlist          ; combination lists only\par
                .list   (src)   ; the source line\par
        \par
                .list   (!,src) ; list only the source line\par
        \par
                .list   1       ; enable listing even within\par
                                ; a FALSE conditional block\par
\par
\par
        1.4.5  \cf3 .page \cf1 Directive \par
\par
        Format:  \par
\par
                .page \par
\par
           The .page directive causes a page ejection with a new heading\par
        to be printed.  The new page occurs after the next line  of  the\par
        source  program is processed, this allows an immediately follow-\par
        ing .sbttl directive to appear  on  the  new  page.   The  .page\par
        source  line will not appear in the file listing.  Paging may be\par
        disabled by invoking the -p directive or by using the directive: \par
\par
                .nlist  (pag)\par
\par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-21\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
           If  the .page directive is followed by a non zero constant or\par
        an expression that evaluates to a non zero value then pagination\par
        will be enabled within a false condition range to allow extended\par
        textual information to be incorporated  in  the  source  program\par
        with out the need to use the comment delimiter (;):  \par
\par
                .if     0\par
        \par
                .page   1       ;Enable pagination within 'if' block.\par
                This text will be bypassed during assembly\par
                but appear in the listing file.\par
                .\par
                .\par
                .\par
        \par
                .endif\par
\par
\par
        1.4.6  \cf3 .msg \cf1 Directive \par
\par
        Format:  \par
\par
                .msg     /string/               or \par
\par
                .msg    ^/string/ \par
\par
\par
        where:  string  represents a text string.  The string is printed\par
                        to the console during the final assembly pass.  \par
\par
                /  /    represent   the  delimiting  characters.   These\par
                        delimiters   may   be   any   paired    printing\par
                        characters,  as  long  as the characters are not\par
                        contained within  the  string  itself.   If  the\par
                        delimiting  characters  do  not  match, the .msg\par
                        directive will give the <q> error.  \par
\par
\par
           The  .msg  directive  is  useful to report assembly status or\par
        other information during the assembly process.  \par
\par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-22\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
        1.4.7  \cf3 .error \cf1 Directive \par
\par
        Format:  \par
\par
                .error exp \par
\par
        where:  exp     represents   an  absolute  expression.   If  the\par
                        evaluation of the expression results  in  a  non\par
                        zero value then an <e> error is reported and the\par
                        text line is listed in the generated error.  \par
\par
\par
           The  .error  directive  is  useful to report configuration or\par
        value errors during the assembly process.  (The .error directive\par
        is  identical in function to the .assume directive, just perhaps\par
        more descriptive.) \par
\par
\par
        1.4.8  \cf3 .byte\cf1 , \cf3 .db\cf1 , and \cf3 .fcb \cf1 Directives \par
\par
        Format:  \par
\par
                .byte   exp             ;Stores the binary value\par
                .db     exp             ;of the expression in the\par
                .fcb    exp             ;next byte.\par
        \par
                .byte   exp1,exp2,expn  ;Stores the binary values\par
                .db     exp1,exp2,expn  ;of the list of expressions\par
                .fcb    exp1,exp2,expn  ;in successive bytes.\par
        \par
        where:  exp,    represent expressions that will be\par
                exp1,   truncated to 8-bits of data.\par
                .       Each expression will be calculated,\par
                .       the high-order byte will be truncated.\par
                .       Multiple expressions must be\par
                expn    separated by commas.\par
\par
           The  .byte, .db, or .fcb directives are used to generate suc-\par
        cessive bytes of binary data in the object module.  \par
\par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-23\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
        1.4.9  \cf3 .word\cf1 , \cf3 .dw\cf1 , and \cf3 .fdb \cf1 Directives \par
\par
        Format:  \par
\par
                .word   exp             ;Stores the binary value\par
                .dw     exp             ;of the expression in\par
                .fdb    exp             ;the next word.\par
        \par
                .word   exp1,exp2,expn  ;Stores the binary values\par
                .dw     exp1,exp2,expn  ;of the list of expressions\par
                .fdb    exp1,exp2,expn  ;in successive words.\par
        \par
        where:  exp,    represent expressions that will occupy two\par
                exp1,   bytes of data. Each expression will be\par
                .       calculated as a 16-bit word expression.\par
                .       Multiple expressions must be\par
                expn    separated by commas.\par
\par
           The  .word, .dw, or .fdb directives are used to generate suc-\par
        cessive words of binary data in the object module.  \par
\par
\par
        1.4.10  \cf3 .3byte \cf1 and \cf3 .triple \cf1 Directives \par
\par
        Format:  \par
\par
                .3byte  exp             ;Stores the binary value\par
                .triple exp             ;of the expression in\par
                                        ;the next triple (3 bytes).\par
        \par
                .3byte  exp1,exp2,expn  ;Stores the binary values\par
                .triple exp1,exp2,expn  ;of the list of expressions\par
                                        ;in successive triples\par
                                        ;(3 bytes).\par
        \par
        where:  exp,    represent expressions that will occupy three\par
                exp1,   bytes of data. Each expression will be\par
                .       calculated as a 24-bit word expression.\par
                .       Multiple expressions must be\par
                expn    separated by commas.\par
\par
           The  .3byte  or .triple directive is used to generate succes-\par
        sive triples of binary data in the object module.  (These direc-\par
        tives   are  only  available  in  assemblers  supporting  24-bit\par
        addressing.) \par
\par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-24\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
        1.4.11  \cf3 .4byte \cf1 and \cf3 .quad \cf1 Directive \par
\par
        Format:  \par
\par
                .4byte  exp             ;Stores the binary value\par
                .quad   exp             ;of the expression in\par
                                        ;the next quad (4 bytes).\par
        \par
                .4byte  exp1,exp2,expn  ;Stores the binary values\par
                .quad   exp1,exp2,expn  ;of the list of expressions\par
                                        ;in successive quads\par
                                        ;(4 bytes).\par
        \par
        where:  exp,    represent expressions that will occupy three\par
                exp1,   bytes of data. Each expression will be\par
                .       calculated as a 32-bit word expression.\par
                .       Multiple expressions must be\par
                expn    separated by commas.\par
\par
           The  .4byte or .quad directive is used to generate successive\par
        quads of binary data in the object  module.   (These  directives\par
        are only available in assemblers supporting 32-bit addressing.) \par
\par
\par
        1.4.12  \cf3 .blkb\cf1 , \cf3 .ds\cf1 , \cf3 .rmb\cf1 , and \cf3 .rs \cf1 Directives \par
\par
        Format:  \par
\par
                .blkb   N       ;reserve N bytes of space\par
                .ds     N       ;reserve N bytes of space\par
                .rmb    N       ;reserve N bytes of space\par
                .rs     N       ;reserve N bytes of space\par
\par
           The  .blkb, .ds, .rmb, and .rs directives reserve byte blocks\par
        in the object module;  \par
\par
\par
        1.4.13  \cf3 .blkw\cf1 , \cf3 .blk3\cf1 , and \cf3 .blk4 \cf1 Directives \par
\par
        Format:  \par
\par
                .blkw   N       ;reserve N words of space\par
                .blk3   N       ;reserve N triples of space\par
                .blk4   N       ;reserve N quads of space\par
\par
           The .blkw directive reserves word blocks;  the .blk3 reserves\par
        3  byte  blocks(available  in   assemblers   supporting   24-bit\par
        addressing);   the  .blk4  reserves  4 byte blocks (available in\par
        assemblers supporting 32-bit addressing).  \par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-25\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
        1.4.14  \cf3 .ascii\cf1 , \cf3 .str\cf1 , and \cf3 .fcc \cf1 Directives \par
\par
        Format:  \par
\par
                .ascii   /string/               or \par
\par
                .ascii  ^/string/ \par
\par
                .fcc     /string/               or \par
\par
                .fcc    ^/string/ \par
\par
                .str     /string/               or \par
\par
                .str    ^/string/ \par
\par
\par
        where:  string  is a string of printable ascii characters.  \par
\par
                /  /    represent   the  delimiting  characters.   These\par
                        delimiters   may   be   any   paired    printing\par
                        characters,  as  long  as the characters are not\par
                        contained within  the  string  itself.   If  the\par
                        delimiting  characters  do not match, the .ascii\par
                        directive will give the <q> error.  \par
\par
        The  .ascii,  .fcc, and .str directives place one binary byte of\par
        data for each character in the string into the object module.  \par
\par
\par
        1.4.15  \cf3 .ascis \cf1 and \cf3 .strs \cf1 Directives \par
\par
        Format:  \par
\par
                .ascis   /string/               or \par
\par
                .ascis  ^/string/ \par
\par
                .strs    /string/               or \par
\par
                .strs   ^/string/ \par
\par
\par
        where:  string  is a string of printable ascii characters.  \par
\par
                /  /    represent   the  delimiting  characters.   These\par
                        delimiters   may   be   any   paired    printing\par
                        characters,  as  long  as the characters are not\par
                        contained within  the  string  itself.   If  the\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-26\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
                        delimiting  characters  do not match, the .ascis\par
                        and .strs directives will give the <q> error.  \par
\par
\par
           The .ascis and .strs directives place one binary byte of data\par
        for each character in the string into the  object  module.   The\par
        last character in the string will have the high order bit set.  \par
\par
\par
        1.4.16  \cf3 .asciz \cf1 and \cf3 .strz \cf1 Directives \par
\par
        Format:  \par
\par
                .asciz   /string/               or \par
\par
                .asciz  ^/string/ \par
\par
                .strz    /string/               or \par
\par
                .strz   ^/string/ \par
\par
\par
        where:  string  is a string of printable ascii characters.  \par
\par
                /  /    represent   the  delimiting  characters.   These\par
                        delimiters   may   be   any   paired    printing\par
                        characters,  as  long  as the characters are not\par
                        contained within  the  string  itself.   If  the\par
                        delimiting  characters  do not match, the .asciz\par
                        and .strz directive will give the <q> error.  \par
\par
\par
           The .asciz and .strz directives place one binary byte of data\par
        for each character in the string into the object  module.   Fol-\par
        lowing  all  the  character data a zero byte is inserted to ter-\par
        minate the character string.  \par
\par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-27\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
        1.4.17  \cf3 .assume \cf1 Directive \par
\par
        Format:  \par
\par
                .assume exp \par
\par
        where:  exp     represents   an  absolute  expression.   If  the\par
                        evaluation of the expression results  in  a  non\par
                        zero value then an <e> error is reported and the\par
                        text line is listed in the generated error.  \par
\par
\par
           The  .assume  directive  is useful to check assumptions about\par
        assembler values.  (The .assume directive is identical in  func-\par
        tion to the .error directive, just perhaps more descriptive.) \par
\par
\par
        1.4.18  \cf3 .radix \cf1 Directive \par
\par
        Format:  \par
\par
                .radix  character \par
\par
        where:  character  represents  a single character specifying the\par
                default radix to be used for  succeeding  numbers.   The\par
                character may be any one of the following:  \par
\par
                        B,b     Binary\par
        \par
                        O,o     Octal\par
                        Q,q\par
        \par
                        D,d     Decimal\par
                        'blank'\par
        \par
                        H,h     Hexidecimal\par
                        X,x\par
\par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-28\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
        1.4.19  \cf3 .even \cf1 Directive \par
\par
        Format:  \par
\par
                .even \par
\par
           The .even directive ensures that the current location counter\par
        contains an even boundary value by adding 1 if the current loca-\par
        tion is odd.  \par
\par
\par
        1.4.20  \cf3 .odd \cf1 Directive \par
\par
        Format:  \par
\par
                .odd \par
\par
           The  .odd directive ensures that the current location counter\par
        contains an odd boundary value by adding one if the current  lo-\par
        cation is even.  \par
\par
\par
        1.4.21  \cf3 .bndry \cf1 Directive \par
\par
        Format:  \par
\par
                .bndry  n \par
\par
           If  the current location is not an integer multiple of n then\par
        the location counter is increased to the next  integer  multiple\par
        of n.  \par
\par
           As an example:  \par
\par
                .bndry  4 \par
\par
        changes  the current location to be at a multiple of 4, a 4-byte\par
        boundary.  \par
\par
           The boundary specifications are propagated to the linker as a\par
        boundary modulus, ie the smallest common boundary for all  .odd,\par
        .even, and .bndry directives contained within the area.  A boun-\par
        dary value of 1 is equivalent to .odd and a boundary value of  2\par
        is equivalent to .even.  Because areas are always assembled with\par
        an initial address of 0, an even address, both  .odd  and  .even\par
        are modulus 2 boundaries.  \par
\par
           As  an  example, suppose there are two sections:  a CODE sec-\par
        tion and a DATA section.  The program code is  written  so  that\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-29\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
        the  data  associated with this section of the program code fol-\par
        lows immediately.  \par
\par
                        .area   CODE\par
                        ; Subroutine 1 Code\par
                        ; Uses data having a boundary of 6\par
        \par
                        .area   DATA\par
                        ; Subroutine 1 Data\par
                        .bndry  6\par
                        .word   1, 2, 3\par
        \par
                        ...\par
        \par
                        .area   CODE\par
                        ; Subroutine 2 Code\par
                        ; Uses data having a boundary of 8\par
        \par
                        .area   DATA\par
                        ; Subroutine 2 Data\par
                        .bndry  8\par
                        .word   1, 2, 3, 4,\par
\par
\par
           Since  the CODE and DATA sections are assembled during a sin-\par
        gle assembly (also applies to include files) the  the  assembler\par
        compiles all CODE segments as a single area segment.  The assem-\par
        bler also compiles all the DATA segments as a single  area  seg-\par
        ment  which  has  two .bndry directives and will have a boundary\par
        modulus of 24.  24 is the smallest boundary divisible by 6 and 8\par
        with  no remainder.  When the assembled file is linked the loca-\par
        tion of the data in the DATA area will be offset to  an  address\par
        which has a boundary modulus of 24.  \par
\par
           When  multiple files containing the same area names (projects\par
        with multiple independently compiled files or library files) are\par
        linked  together  each  area segment will be offset to match the\par
        segments boundary modulus.  \par
\par
           Boundary  specifications  will also be preserved when an area\par
        base address is specified with the -b linker option  and/or  the\par
        area is placed within a bank.  \par
\par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-30\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
        1.4.22  \cf3 .area \cf1 Directive \par
\par
        Format:  \par
\par
                .area   name    [(options)] \par
\par
        where:  name    represents the symbolic name of the program sec-\par
                        tion.   This  name  may  be  the  same  as   any\par
                        user-defined  symbol  or  bank as the area names\par
                        are independent  of  all  symbols,  labels,  and\par
                        banks.  \par
\par
                options specify the type of program or data area:  \par
                        ABS     absolute (automatically invokes OVR) \par
                        REL     relocatable \par
                        OVR     overlay \par
                        CON     concatenate \par
                        NOPAG   non-paged area \par
                        PAG     paged area \par
\par
                options specify a code or data segment:  \par
                        CSEG    Code segment \par
                        DSEG    Data segment \par
\par
                option  specifies the data area bank:  \par
                        BANK    Named collection of areas \par
\par
\par
           The .area directive provides a means of defining and separat-\par
        ing multiple programming and data sections.   The  name  is  the\par
        area  label used by the assembler and the linker to collect code\par
        from various separately assembled modules into one section.  The\par
        name may be from 1 to 79 characters in length.  \par
\par
           The options are specified within parenthesis and separated by\par
        commas as shown in the following example:  \par
\par
                .area  TEST  (REL,CON)  ;This section is relocatable\par
                                        ;and concatenated with other\par
                                        ;sections of this program area.\par
        \par
                .area  DATA  (REL,OVR)  ;This section is relocatable\par
                                        ;and overlays other sections\par
                                        ;of this program area.\par
        \par
                .area  SYS   (ABS,OVR)  ;(CON not allowed with ABS)\par
                                        ;This section is defined as\par
                                        ;absolute. Absolute sections\par
                                        ;are always overlayed with\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-31\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
                                        ;other sections of this program\par
                                        ;area.\par
        \par
                .area  PAGE  (PAG)      ;This is a paged section. The\par
                                        ;section must be on a 256 byte\par
                                        ;boundary and its length is\par
                                        ;checked by the linker to be\par
                                        ;no larger than 256 bytes.\par
                                        ;This is useful for direct page\par
                                        ;areas.\par
\par
           The  default  area type is REL|CON;  i.e.  a relocatable sec-\par
        tion which is concatenated with other sections of code with  the\par
        same area name.  The ABS option indicates an absolute area.  The\par
        OVR and CON options indicate if program  sections  of  the  same\par
        name  will overlay each other (start at the same location) or be\par
        concatenated with each other (appended to each other).  \par
\par
           The  area can be specified as either a code segment, CSEG, or\par
        a data segment, DSEG.  The CSEG and DSEG descriptors are  useful\par
        when  the  microprocessor  code  and  data  unit allocations are\par
        unequal:  e.g.  the executable code  uses  an  allocation  of  2\par
        bytes for each instruction and is addressed at an increment of 1\par
        for every instruction, and the data uses an allocation of 1 byte\par
        for  each element and is addressed at an increment of 1 for each\par
        data byte.  The allocation units are defined by the architecture\par
        of the particular microprocessor.  \par
\par
           The  .area  directive also provides a means of specifying the\par
        bank this area is associated with.  All areas associated with  a\par
        particular  bank  are  combined  at  link  time  into a block of\par
        code/data.  \par
\par
           The  CSEG,  DSEG,  and  BANK options are specified within the\par
        parenthesis as shown in the following examples:  \par
\par
                .area   C_SEG   (CSEG,BANK=C1)\par
                                        ;This is a code section\par
                                        ;and is included in bank C1\par
                .area   D_SEG   (DSEG,BANK=D1)\par
                                        ;This is a data section\par
                                        ;and is included in bank D1.\par
\par
           Multiple  invocations  of  the  .area directive with the same\par
        name must specify the same options or leave  the  options  field\par
        blank,  this  defaults  to  the previously specified options for\par
        this program area.  \par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-32\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
        The   ASxxxx   assemblers   automatically  provide  two  program\par
        sections:  \par
\par
\par
                '_CODE'         This  is  the  default  code/data  area.\par
                                This   program   area   is    of    type\par
                                (REL,CON,CSEG).  \par
\par
                '_DATA'         This  is the default optional data area.\par
                                This   program   area   is    of    type\par
                                (REL,CON,DSEG).  \par
\par
        The .area names and options are never case sensitive.  \par
\par
\par
        1.4.23  \cf3 .bank \cf1 Directive \par
\par
        Format:  \par
\par
                .bank   name    [(options)] \par
\par
        where:  name    represents  the  symbolic  name of the bank sec-\par
                        tion.   This  name  may  be  the  same  as   any\par
                        user-defined  symbol  or  area as the bank names\par
                        are independent  of  all  symbols,  labels,  and\par
                        areas.   The name may be from 1 to 79 characters\par
                        in length.  \par
\par
                options specify the parameters of the bank:  \par
                        BASE    base address of bank \par
                        SIZE    maximum size of bank \par
                        FSFX    file suffix for this bank \par
                        MAP     NOICE mapping \par
\par
\par
           The  .bank  directive allows an arbitrary grouping of program\par
        and/or data areas to be communicated to the  linker.   The  bank\par
        parameters are all optional and are described as follows:  \par
\par
             1.  BASE, the  starting  address of the bank (default is 0)\par
                 may be defined.  This address can be overridden by  us-\par
                 ing  the linker -b option for the first area within the\par
                 bank.  The bank address is always specified  in  'byte'\par
                 addressing.  A first area which is not 'byte' addressed\par
                 (e.g.  a processor addressed by a 'word' of 2  or  more\par
                 bytes)  has  the  area  address  scaled to begin at the\par
                 'byte' address.  \par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-33\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
             2.  SIZE, the  maximum  length  of  the  bank  specified in\par
                 bytes.  The size is always specified in terms of bytes. \par
\par
             3.  FSFX, the file suffix to be used by the linker for this\par
                 bank.  The suffix may not contain embedded white space. \par
\par
             4.  MAP,  NOICE   mapping   parameter   for  this  bank  of\par
                 code/data.  \par
\par
\par
           The options are specified within parenthesis and separated by\par
        commas as shown in the following example:  \par
\par
                .BANK  C1  (BASE=0x0100,SIZE=0x1000,FSFX=_C1)\par
                                        ;This bank starts at 0x0100,\par
                                        ;has a maximum size of 0x1000,\par
                                        ;and is to be placed into\par
                                        ;a file with a suffix of _C1\par
\par
           The parameters must be absolute (external symbols are not al-\par
        lowed.) \par
\par
\par
        1.4.24  \cf3 .org \cf1 Directive \par
\par
        Format:  \par
\par
                .org    exp \par
\par
        where:  exp     is  an absolute expression that becomes the cur-\par
                        rent location counter.  \par
\par
        The  .org directive is valid only in an absolute program section\par
        and will give a <q> error if used in a relocatable program area.\par
        The  .org  directive specifies that the current location counter\par
        is to become the specified absolute value.  \par
\par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-34\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
        1.4.25  \cf3 .globl \cf1 Directive \par
\par
        Format:  \par
\par
                .globl  sym1,sym2,...,symn \par
\par
        where:  sym1,           represent legal symbolic names.\par
                sym2,...        When multiple symbols are specified,\par
                symn            they are separated by commas.\par
\par
           A  .globl directive may also have a label field and/or a com-\par
        ment field.  \par
\par
           The  .globl directive is provided to export (and thus provide\par
        linkage to) symbols not  otherwise  defined  as  global  symbols\par
        within  a  module.   In  exporting  global symbols the directive\par
        .globl J is similar to:  \par
\par
              J == expression or J::  \par
\par
           Because  object  modules  are linked by global symbols, these\par
        symbols are vital to a program.  All internal symbols  appearing\par
        within  a  given program must be defined at the end of pass 1 or\par
        they will be considered undefined.  The assembly directive  (-g)\par
        can  be  invoked to make all undefined symbols global at the end\par
        of pass 1.  \par
\par
           The  .globl directive and == construct can be overridden by a\par
        following .local directive.  \par
\par
\par
                                      NOTE\par
\par
             The  ASxxxx  assemblers  use the last occurring symbol\par
             specification in the source file(s) as the type  shown\par
             in the symbol table and output to the .rel file.  \par
\par
\par
\par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-35\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
        1.4.26  \cf3 .local \cf1 Directive \par
\par
        Format:  \par
\par
                .local  sym1,sym2,...,symn \par
\par
        where:  sym1,           represent legal symbolic names.\par
                sym2,...        When multiple symbols are specified,\par
                symn            they are separated by commas.\par
\par
           A  .local directive may also have a label field and/or a com-\par
        ment field.  \par
\par
           The  .local  directive is provided to define symbols that are\par
        local to the current assembly process.  Local  symbols  are  not\par
        effected  by  the assembler option -a (make all symbols global).\par
        In defining local symbols the directive .local J is similar to: \par
\par
              J =: expression \par
\par
           The  .local directive and the =:  construct are useful in de-\par
        fining symbols and constants within a header or definition  file\par
        that contains many symbols specific to the current assembly pro-\par
        cess that should not be exported into the .rel output  file.   A\par
        typical  usage  is  in  the definition of SFRs (Special Function\par
        Registers) for a microprocessor.  \par
\par
           The .local directive and =:  construct can be overridden by a\par
        following .globl directive.  \par
\par
\par
                                      NOTE\par
\par
             The  ASxxxx  assemblers  use the last occurring symbol\par
             specification in the source file(s) as the type  shown\par
             in the symbol table and output to the .rel file.  \par
\par
\par
\par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-36\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
        1.4.27  \cf3 .equ\cf1 , \cf3 .gblequ\cf1 , and \cf3 .lclequ \cf1 Directives \par
\par
        Format:  \par
\par
                sym1    .equ    expr    ; equivalent to sym1  = expr\par
                sym2    .gblequ expr    ; equivalent to sym2 == expr\par
                sym3    .lclequ expr    ; equivalent to sym3 =: expr\par
        \par
                or\par
        \par
                .equ    sym1,   expr    ; equivalent to sym1  = expr\par
                .gblequ sym2,   expr    ; equivalent to sym2 == expr\par
                .lclequ sym3,   expr    ; equivalent to sym3 =: expr\par
\par
           These  alternate  forms  of equivalence are provided for user\par
        convenience.  \par
\par
\par
        1.4.28  \cf3 .if\cf1 , \cf3 .else\cf1 , and \cf3 .endif \cf1 Directives \par
\par
        Format:  \par
\par
                .if     expr\par
                .                       ;\}\par
                .                       ;\} range of true condition\par
                .                       ;\}\par
                .else\par
                .                       ;\}\par
                .                       ;\} range of false condition\par
                .                       ;\}\par
                .endif\par
\par
           The  conditional  assembly directives allow you to include or\par
        exclude blocks of source code during the assembly process, based\par
        on the evaluation of the test condition.  \par
\par
           The  range of true condition will be processed if the expres-\par
        sion 'expr' is not zero (i.e.  true) and the range of false con-\par
        dition  will  be processed if the expression 'expr' is zero (i.e\par
        false).  The range of true condition is optional as is the .else\par
        directive  and  the range of false condition.  The following are\par
        all valid .if/.else/.endif constructions:  \par
\par
                .if     A-4             ;evaluate A-4\par
                .byte   1,2             ;insert bytes if A-4 is\par
                .endif                  ;not zero\par
        \par
                .if     K+3             ;evaluate K+3\par
                .else\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-37\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
                .byte   3,4             ;insert bytes if K+3\par
                .endif                  ;is zero\par
        \par
                .if     J&3             ;evaluate J masked by 3\par
                .byte   12              ;insert this byte if J&3\par
                .else                   ;is not zero\par
                .byte   13              ;insert this byte if J&3\par
                .endif                  ;is zero\par
\par
\par
        All .if/.else/.endif directives are limited to a maximum nesting\par
        of 10 levels.  \par
\par
           The  use of a .else directive outside a .if/.endif block will\par
        generate an <i> error.  Assemblies having unequal .if and .endif\par
        counts will cause an <i> error.  \par
\par
\par
        1.4.29  \cf3 .iff\cf1 , \cf3 .ift\cf1 , and \cf3 .iftf \cf1 Directives \par
\par
        Format:  \par
\par
                .if     expr    ;'if' range Condition is\par
                                ;TRUE when expr is not zero\par
                 .ift                                   ;\}\par
                 .      ;\} range of true condition      ;\}\par
                 .iff                                   ;\} if\par
                 .      ;\} range of false condition     ;\} block\par
                 .iftf                                  ;\}\par
                 .      ;\} unconditional range          ;\}\par
                .else           ;'else' range Condition is\par
                                ;TRUE when expr is zero\par
                 .ift                                   ;\}\par
                 .      ;\} range of true condition      ;\}\par
                 .iff                                   ;\} else\par
                 .      ;\} range of false condition     ;\} block\par
                 .iftf                                  ;\}\par
                 .      ;\} unconditional range          ;\}\par
                .endif\par
\par
           The  subconditional  assembly directives may be placed within\par
        conditional assembly blocks to indicate:  \par
\par
                1. The assembly of an alternate body of code when\par
                   the condition of the block tests false.\par
        \par
                2. The assembly of non-contiguous body of code\par
                   within the conditional assembly block,\par
                   depending upon the result of the conditional\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-38\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
                   test in entering the block.\par
        \par
                3. The unconditional assembly of a body of code\par
                   within a conditional assembly block.\par
\par
\par
        The use of the .iff, .ift, and .iftf directives makes the use of\par
        the .else directive redundant.  \par
\par
           Note  that  the  implementation of the .else directive causes\par
        the .if tested condition to be complemented.  The TRUE and FALSE\par
        conditions are determined by the .if/.else conditional state.  \par
\par
           All  .if/.else/.endif  directives  are  limited  to a maximum\par
        nesting of 10 levels.  \par
\par
           The  use  of the .iff, .ift, or .iftf directives outside of a\par
        conditional block results in a <i> error code.  \par
\par
           The  use of a .else directive outside a .if/.endif block will\par
        generate an <i> error.  Assemblies having unequal .if and .endif\par
        counts will cause an <i> error.  \par
\par
\par
        1.4.30  \cf3 .ifxx \cf1 Directives \par
\par
\par
           Additional  conditional  directives are available to test the\par
        value of an evaluated expression:  \par
\par
                .ifne   expr            ; true if expr != 0\par
                .ifeq   expr            ; true if expr == 0\par
                .ifgt   expr            ; true if expr >  0\par
                .iflt   expr            ; true if expr <  0\par
                .ifge   expr            ; true if expr >= 0\par
                .ifle   expr            ; true if expr <= 0\par
\par
           Format:  \par
\par
                .ifxx   expr\par
                .                       ;\}\par
                .                       ;\} range of true condition\par
                .                       ;\}\par
                .else\par
                .                       ;\}\par
                .                       ;\} range of false condition\par
                .                       ;\}\par
                .endif\par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-39\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
           The  conditional  assembly directives allow you to include or\par
        exclude blocks of source code during the assembly process, based\par
        on the evaluation of the test condition.  \par
\par
           The  range of true condition will be processed if the expres-\par
        sion 'expr' is not zero (i.e.  true) and the range of false con-\par
        dition  will  be processed if the expression 'expr' is zero (i.e\par
        false).  The range of true condition is optional as is the .else\par
        directive  and  the range of false condition.  The following are\par
        all valid .ifxx/.else/.endif constructions:  \par
\par
                .ifne   A-4             ;evaluate A-4\par
                .byte   1,2             ;insert bytes if A-4 is\par
                .endif                  ;not zero\par
        \par
                .ifeq   K+3             ;evaluate K+3\par
                .byte   3,4             ;insert bytes if K+3\par
                .endif                  ;is zero\par
        \par
                .ifne   J&3             ;evaluate J masked by 3\par
                .byte   12              ;insert this byte if J&3\par
                .else                   ;is not zero\par
                .byte   13              ;insert this byte if J&3\par
                .endif                  ;is zero\par
\par
\par
        All .if/.else/.endif directives are limited to a maximum nesting\par
        of 10 levels.  \par
\par
           The  use of a .else directive outside a .if/.endif block will\par
        generate an <i> error.  Assemblies having unequal .if and .endif\par
        counts will cause an <i> error.  \par
\par
\par
        1.4.31  \cf3 .ifdef \cf1 Directive \par
\par
        Format:  \par
\par
                .ifdef  sym\par
                .                       ;\}\par
                .                       ;\} range of true condition\par
                .                       ;\}\par
                .else\par
                .                       ;\}\par
                .                       ;\} range of false condition\par
                .                       ;\}\par
                .endif\par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-40\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
           The  conditional  assembly directives allow you to include or\par
        exclude blocks of source code during the assembly process, based\par
        on the evaluation of the test condition.  \par
\par
           The  range  of true condition will be processed if the symbol\par
        'sym' has been defined with a .define directive or  'sym'  is  a\par
        variable  with  an  assigned  value else the false range will be\par
        processed.  The range of true condition is optional  as  is  the\par
        .else directive and the range of false condition.  The following\par
        are all valid .ifdef/.else/.endif constructions:  \par
\par
                .ifdef  sym$1           ;lookup symbol sym$1\par
                .byte   1,2             ;insert bytes if sym$1\par
                .endif                  ;is defined or\par
                                        ;assigned a value\par
        \par
                .ifdef  sym$2           ;lookup symbol sym$2\par
                .else\par
                .byte   3,4             ;insert bytes if sym$1\par
                .endif                  ;is not defined and\par
                                        ;not assigned a value\par
        \par
                .ifdef  sym$3           ;lookup symbol sym$3\par
                .byte   12              ;insert this byte if sym$3\par
                .else                   ;is defined/valued\par
                .byte   13              ;insert this byte if sym$3\par
                .endif                  ;is not defined/valued\par
\par
\par
        Note  that the default assembler configuration of case sensitive\par
        means the testing for a defined symbol is also case sensitive.  \par
\par
           All  .if/.else/.endif  directives  are  limited  to a maximum\par
        nesting of 10 levels.  \par
\par
           The  use of a .else directive outside a .if/.endif block will\par
        generate an <i> error.  Assemblies having unequal .if and .endif\par
        counts will cause an <i> error.  \par
\par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-41\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
        1.4.32  \cf3 .ifndef \cf1 Directive \par
\par
        Format:  \par
\par
                .ifndef sym\par
                .                       ;\}\par
                .                       ;\} range of true condition\par
                .                       ;\}\par
                .else\par
                .                       ;\}\par
                .                       ;\} range of false condition\par
                .                       ;\}\par
                .endif\par
\par
           The  conditional  assembly directives allow you to include or\par
        exclude blocks of source code during the assembly process, based\par
        on the evaluation of the condition test.  \par
\par
           The  range  of true condition will be processed if the symbol\par
        'sym' is not defined by a .define directive and a variable 'sym'\par
        has  not been assigned a value else the range of false condition\par
        will be processed.  The range of true condition is  optional  as\par
        is  the  .else  directive and the range of false condition.  The\par
        following are all valid .ifndef/.else/.endif constructions:  \par
\par
                .ifndef sym$1           ;lookup symbol sym$1\par
                .byte   1,2             ;insert bytes if sym$1 is\par
                .endif                  ;not defined and\par
                                        ;not assigned a value\par
        \par
                .ifndef sym$2           ;lookup symbol sym$2\par
                .else\par
                .byte   3,4             ;insert bytes if sym$1\par
                .endif                  ;is defined or\par
                                        ;is assigned a value\par
        \par
                .ifndef sym$3           ;lookup symbol sym$3\par
                .byte   12              ;insert this byte if sym$3\par
                .else                   ;is not defined/valued\par
                .byte   13              ;insert this byte if sym$3\par
                .endif                  ;is defined/valued\par
\par
\par
        All .if/.else/.endif directives are limited to a maximum nesting\par
        of 10 levels.  \par
\par
           The  use of a .else directive outside a .if/.endif block will\par
        generate an <i> error.  Assemblies having unequal .if and .endif\par
        counts will cause an <i> error.  \par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-42\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
        1.4.33  \cf3 .ifb \cf1 Directive \par
\par
        Format:  \par
\par
                .ifb    sym\par
                .                       ;\}\par
                .                       ;\} range of true condition\par
                .                       ;\}\par
                .else\par
                .                       ;\}\par
                .                       ;\} range of false condition\par
                .                       ;\}\par
                .endif\par
\par
           The  conditional  assembly directives allow you to include or\par
        exclude blocks of source code during the assembly process, based\par
        on the evaluation of the test condition.  \par
\par
           The  conditional  .ifb  is most useful when used in macro de-\par
        finitions to determine if the argument is blank.  The  range  of\par
        true  condition  will be processed if the symbol 'sym' is blank.\par
        The range of true condition is optional as is the  .else  direc-\par
        tive  and  the  range of false condition.  The following are all\par
        valid .ifb/.else/.endif constructions:  \par
\par
                .ifb    sym$1           ;argument is not blank\par
                .byte   1,2             ;insert bytes if argument\par
                .endif                  ;is blank\par
        \par
                .ifb    sym$2           ;argument is not blank\par
                .else\par
                .byte   3,4             ;insert bytes if argument\par
                .endif                  ;is not blank\par
        \par
                .ifb                    ;argument is blank\par
                .byte   12              ;insert this byte if\par
                .else                   ;argument is blank\par
                .byte   13              ;insert this byte if\par
                .endif                  ;argument not blank\par
\par
\par
        All .if/.else/.endif directives are limited to a maximum nesting\par
        of 10 levels.  \par
\par
           The  use of a .else directive outside a .if/.endif block will\par
        generate an <i> error.  Assemblies having unequal .if and .endif\par
        counts will cause an <i> error.  \par
\par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-43\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
        1.4.34  \cf3 .ifnb \cf1 Directive \par
\par
        Format:  \par
\par
                .ifnb   sym\par
                .                       ;\}\par
                .                       ;\} range of true condition\par
                .                       ;\}\par
                .else\par
                .                       ;\}\par
                .                       ;\} range of false condition\par
                .                       ;\}\par
                .endif\par
\par
           The  conditional  assembly directives allow you to include or\par
        exclude blocks of source code during the assembly process, based\par
        on the evaluation of the test condition.  \par
\par
           The  conditional  .ifnb is most useful when used in macro de-\par
        finitions to determine if the argument is not blank.  The  range\par
        of  true  condition will be processed if the symbol 'sym' is not\par
        blank.  The range of true condition is optional as is the  .else\par
        directive  and  the range of false condition.  The following are\par
        all valid .ifnb/.else/.endif constructions:  \par
\par
                .ifnb   sym$1           ;argument is not blank\par
                .byte   1,2             ;insert bytes if argument\par
                .endif                  ;is not blank\par
        \par
                .ifnb   sym$2           ;argument is not blank\par
                .else\par
                .byte   3,4             ;insert bytes if argument\par
                .endif                  ;is blank\par
        \par
                .ifnb                   ;argument is blank\par
                .byte   12              ;insert this byte if\par
                .else                   ;argument is not blank\par
                .byte   13              ;insert this byte if\par
                .endif                  ;argument is blank\par
\par
\par
        All .if/.else/.endif directives are limited to a maximum nesting\par
        of 10 levels.  \par
\par
           The  use of a .else directive outside a .if/.endif block will\par
        generate an <i> error.  Assemblies having unequal .if and .endif\par
        counts will cause an <i> error.  \par
\par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-44\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
        1.4.35  \cf3 .ifidn \cf1 Directive \par
\par
        Format:  \par
\par
                .ifidn  sym$1,sym$2\par
                .                       ;\}\par
                .                       ;\} range of true condition\par
                .                       ;\}\par
                .else\par
                .                       ;\}\par
                .                       ;\} range of false condition\par
                .                       ;\}\par
                .endif\par
\par
           The  conditional  assembly directives allow you to include or\par
        exclude blocks of source code during the assembly process, based\par
        on the evaluation of the test condition.  \par
\par
           The  conditional .ifidn is most useful when used in macro de-\par
        finitions to determine if  the  arguments  are  identical.   The\par
        range  of true condition will be processed if the symbol 'sym$1'\par
        is idendical to 'sym$2' (i.e.  the character strings  for  sym$1\par
        and  sym$2  are  the  same  consistent with the case sensitivity\par
        flag).  When this if statement occurs inside a  macro  where  an\par
        argument  substitution  may  be blank then an argument should be\par
        delimited with the form /symbol/ for each symbol.  The range  of\par
        true  condition  is  optional  as is the .else directive and the\par
        range  of  false  condition.   The  following  are   all   valid\par
        .ifidn/.else/.endif constructions:  \par
\par
                .ifidn  sym$1,sym$1     ;arguments are the same\par
                .byte   1,2             ;insert bytes if arguments\par
                .endif                  ;are the sane\par
        \par
                .ifidn  sym$1,sym$2     ;arguments are not the same\par
                .else\par
                .byte   3,4             ;insert bytes if arguments\par
                .endif                  ;are not the same\par
        \par
                .ifidn  sym$3,sym$3     ;arguments are the same\par
                .byte   12              ;insert this byte if\par
                .else                   ;arguments are the same\par
                .byte   13              ;insert this byte if\par
                .endif                  ;arguments are not the same\par
\par
\par
        All .if/.else/.endif directives are limited to a maximum nesting\par
        of 10 levels.  \par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-45\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
           The  use of a .else directive outside a .if/.endif block will\par
        generate an <i> error.  Assemblies having unequal .if and .endif\par
        counts will cause an <i> error.  \par
\par
\par
        1.4.36  \cf3 .ifdif \cf1 Directive \par
\par
        Format:  \par
\par
                .ifdif  sym$1,sym$2\par
                .                       ;\}\par
                .                       ;\} range of true condition\par
                .                       ;\}\par
                .else\par
                .                       ;\}\par
                .                       ;\} range of false condition\par
                .                       ;\}\par
                .endif\par
\par
           The  conditional  assembly directives allow you to include or\par
        exclude blocks of source code during the assembly process, based\par
        on the evaluation of the test condition.  \par
\par
           The  conditional .ifdif is most useful when used in macro de-\par
        finitions to determine if  the  arguments  are  different.   The\par
        range  of true condition will be processed if the symbol 'sym$1'\par
        is different from 'sym$2' (i.e.  the character strings for sym$1\par
        and  sym$2  are the not the same consistent with the case sensi-\par
        tivity flag).  When this if  statement  occurs  inside  a  macro\par
        where  an  argument  substitution  may be blank then an argument\par
        should be delimited with the form /symbol/ for each symbol.  The\par
        range  of  true  condition is optional as is the .else directive\par
        and the range of false condition.  The following are  all  valid\par
        .ifdif/.else/.endif constructions:  \par
\par
                .ifdif  sym$1,sym$2     ;arguments are different\par
                .byte   1,2             ;insert bytes if arguments\par
                .endif                  ;are different\par
        \par
                .ifdif  sym$1,sym$1     ;arguments are identical\par
                .else\par
                .byte   3,4             ;insert bytes if arguments\par
                .endif                  ;are different\par
        \par
                .ifdif  sym$1,sym$3     ;arguments are different\par
                .byte   12              ;insert this byte if\par
                .else                   ;arguments are different\par
                .byte   13              ;insert this byte if\par
                .endif                  ;arguments are identical\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-46\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
\par
\par
        All .if/.else/.endif directives are limited to a maximum nesting\par
        of 10 levels.  \par
\par
           The  use of a .else directive outside a .if/.endif block will\par
        generate an <i> error.  Assemblies having unequal .if and .endif\par
        counts will cause an <i> error.  \par
\par
\par
        1.4.37  \cf3 Alternate .if Directive Forms\cf1  \par
\par
\par
           Format:  \par
\par
                .if     cnd(,)  arg1(, arg2)\par
\par
           where  the  cnd (followed by an optional comma) may be any of\par
        the following:  \par
\par
                -------------------------------------------------------\par
                 condition              Assemble\par
                (complement)    Args    Block if:\par
                -------------------------------------------------------\par
                eq   ( ne )     expr    equal to zero\par
                                        (not equal to zero)\par
        \par
                gt   ( le )     expr    greater than zero\par
                                        (less than or equal to zero)\par
        \par
                lt   ( ge )     expr    less than zero\par
                                        (greater than or equal to zero)\par
        \par
                def  ( ndef )   symbol  .define'd or user set\par
                                        (not .define'd or user set)\par
        \par
                b    ( nb )     macro   argument present\par
                                symbol  (argument not present)\par
        \par
                idn  ( dif )    macro   arguments identical\par
                                symbol  (arguments not identical)\par
        \par
                f    ( t )      -----   only within a .if/.else/.endif\par
                                        conditional block\par
        \par
                tf              -----   only within a .if/.else/.endif\par
                                        conditional block\par
\par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-47\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
        All .if/.else/.endif directives are limited to a maximum nesting\par
        of 10 levels.  \par
\par
           The  use of a .else directive outside a .if/.endif block will\par
        generate an <i> error.  Assemblies having unequal .if and .endif\par
        counts will cause an <i> error.  \par
\par
\par
        1.4.38  \cf3 Immediate Conditional Assembly Directives\cf1  \par
\par
\par
           The  immediate conditional assembly directives allow a single\par
        line of code to be assembled without  using  a  .if/.else/.endif\par
        construct.   All  of  the previously described conditionals have\par
        immediate equivalents.  \par
\par
           Format:  \par
\par
                .iif            arg(,)          line_to_assemble\par
                .iifeq          arg(,)          line_to_assemble\par
                .iifne          arg(,)          line_to_assemble\par
                .iifgt          arg(,)          line_to_assemble\par
                .iifle          arg(,)          line_to_assemble\par
                .iifge          arg(,)          line_to_assemble\par
                .iiflt          arg(,)          line_to_assemble\par
                .iifdef         arg(,)          line_to_assemble\par
                .iifndef        arg(,)          line_to_assemble\par
        \par
                .iifb        (,)arg(,)          line_to_assemble\par
                .iifnb       (,)arg(,)          line_to_assemble\par
                .iifidn      (,)arg1,arg2(,)    line_to_assemble\par
                .iifdif      (,)arg1,arg2(,)    line_to_assemble\par
        \par
                .iiff                           line_to_assemble\par
                .iift                           line_to_assemble\par
                .iiftf                          line_to_assemble\par
\par
\par
        Alternate Format:  \par
\par
                .iif            arg(,)          line_to_assemble\par
                .iif    eq      arg(,)          line_to_assemble\par
                .iif    ne      arg(,)          line_to_assemble\par
                .iif    gt      arg(,)          line_to_assemble\par
                .iif    le      arg(,)          line_to_assemble\par
                .iif    ge      arg(,)          line_to_assemble\par
                .iif    lt      arg(,)          line_to_assemble\par
                .iif    def     arg(,)          line_to_assemble\par
                .iif    ndef    arg(,)          line_to_assemble\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-48\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
        \par
                .iif    b    (,)arg(,)          line_to_assemble\par
                .iif    nb   (,)arg(,)          line_to_assemble\par
                .iif    idn  (,)arg1,arg2(,)    line_to_assemble\par
                .iif    dif  (,)arg1,arg2(,)    line_to_assemble\par
        \par
                .iiff                           line_to_assemble\par
                .iift                           line_to_assemble\par
                .iiftf                          line_to_assemble\par
\par
\par
        The (,) indicates an optional comma.  \par
\par
           The  .iif  types b, n, idn, and dif require the commas if the\par
        argument(s) may be blank.  These commas may be  removed  if  the\par
        arguments are delimited with the form ^/symbol/ for each symbol. \par
\par
           The   immediate   conditional  directives  donot  change  the\par
        .if/.else/.endif nesting level.  \par
\par
\par
        1.4.39  \cf3 .include \cf1 Directive \par
\par
        Format:  \par
\par
                .include         /string/               or \par
\par
                .include        ^/string/ \par
\par
\par
        where:  string  represents  a string that is the file specifica-\par
                        tion of an ASxxxx source file.  \par
\par
                /  /    represent   the  delimiting  characters.   These\par
                        delimiters   may   be   any   paired    printing\par
                        characters,  as  long  as the characters are not\par
                        contained within  the  string  itself.   If  the\par
                        delimiting characters do not match, the .include\par
                        directive will give the <q> error.  \par
\par
           The .include directive is used to insert a source file within\par
        the source file currently being assembled.  When this  directive\par
        is encountered, an implicit .page directive is issued.  When the\par
        end of the specified source file is reached, an  implicit  .page\par
        directive is issued and input continues from the previous source\par
        file.  The maximum nesting level of source files specified by  a\par
        .include directive is five.  \par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-49\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
           The  total  number  of separately specified .include files is\par
        unlimited as each .include file is opened and then closed during\par
        each pass made by the assembler.  \par
\par
           The  default  directory  path,  if none is specified, for any\par
        .include file is the directory path of the  current  file.   For\par
        example:   if  the  current  source file, D:\\proj\\file1.asm, in-\par
        cludes  a  file  specified   as   "include1"   then   the   file\par
        D:\\proj\\include1.asm is opened.  \par
\page\par
\par
        THE ASSEMBLER                                                                                          PAGE 1-50\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
        1.4.39.1  Including Files In Windows/DOS  - \par
            Graphical Illustration of Include File Locations\par
            for the following command line entry:\par
        \par
                __> bin\\ascheck -l -o -s  obj\\prjct.rel   src\\prjct\\prjct.asm\par
        \par
                                  /-----------------------------------------------------------------------\\\par
                                  |                                           (rooted)                    |\par
                      _____       |           _____                                                       |\par
                     |     |      |          |     |                                                      |\par
                  ---| inc |  <---/       ---| bin |                                                      |\par
                  |  |_____|              |  |_____|                                                      |\par
                  |     |                 |     |                                                         |\par
                  |     \\___ inc4.asm     |     \\___ ascheck.exe                                          |\par
                  |                       |                                                               |\par
                  |                       |                                                               |\par
          _____   |   _____       _____   |   _____       _____                                           |\par
         |     |  |  |     |     |     |  |  |     |     |     |      (in prjct.asm directory)            |\par
         | C:\\ |-----| ..\\ |-----| __> |--+--| src |-----|prjct|  <-------------------------------\\       |\par
         |_____|     |_____|  |  |_____|  |  |_____|  |  |_____|                                  |       |\par
                              |           |           |     |                .include "inc1.asm" -/       |\par
                              |     ^     |           |     \\___ prjct.asm   .include "C:\\inc\\inc4.asm" --/\par
                              |     |     |           |     \\___ inc1.asm    .include "..\\inc\\inc3.asm" -------\\\par
             Current          |     |     |           |   _____              .include "src\\inc\\inc2.asm" -\\    |\par
             Working  ------> | >---/     |           |  |     |                                          |    |\par
            Directory         |           |           ---| inc |  <---------------------------------------/    |\par
                              |           |              |_____|   (relative to current working directory)     |\par
                              |           |                 |                                                  |\par
                              |           |                 \\___ inc2.asm                                      |\par
                              |           |   _____                                                            |\par
                              |           |  |     |                                                           |\par
                              |           ---| obj |                                                           |\par
                              |              |_____|                                                           |\par
                              |                 |                                                              |\par
                              |                 \\___ .REL, .SYM, .LST, .HLR                                    |\par
                              |                                                                                |\par
                              |   _____                                                                        |\par
                              |  |     |                          (relative to current working directory)      |\par
                              ---| inc |  <--------------------------------------------------------------------/\par
                                 |_____|\par
                                    |\par
                                    \\___ inc3.asm\par
        \par
\page\par
\par
        THE ASSEMBLER                                                                                          PAGE 1-51\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
        1.4.39.2  Including Files in Linux  - \par
            Graphical Illustration of Include File Locations\par
            for the following command line entry:\par
        \par
                __$ bin/ascheck -l -o -s  obj/prjct.rel   src/prjct/prjct.asm\par
        \par
                                  /-----------------------------------------------------------------------\\\par
                                  |                                           (rooted)                    |\par
                      _____       |           _____                                                       |\par
                     |     |      |          |     |                                                      |\par
                  ---| inc |  <---/       ---| bin |                                                      |\par
                  |  |_____|              |  |_____|                                                      |\par
                  |     |                 |     |                                                         |\par
                  |     \\___ inc4.asm     |     \\___ ascheck                                              |\par
                  |                       |                                                               |\par
                  |                       |                                                               |\par
          _____   |   _____       _____   |   _____       _____                                           |\par
         |     |  |  |     |     |     |  |  |     |     |     |      (in prjct.asm directory)            |\par
         |  /  |-----| ../ |-----| __$ |--+--| src |-----|prjct|  <-------------------------------\\       |\par
         |_____|     |_____|  |  |_____|  |  |_____|  |  |_____|                                  |       |\par
                              |           |           |     |                .include "inc1.asm" -/       |\par
                              |     ^     |           |     \\___ prjct.asm   .include "/inc/inc4.asm" ----/\par
                              |     |     |           |     \\___ inc1.asm    .include "../inc/inc3.asm" -------\\\par
             Current          |     |     |           |   _____              .include "src/inc/inc2.asm" -\\    |\par
             Working  ------> | >---/     |           |  |     |                                          |    |\par
            Directory         |           |           ---| inc |  <---------------------------------------/    |\par
                              |           |              |_____|   (relative to current working directory)     |\par
                              |           |                 |                                                  |\par
                              |           |                 \\___ inc2.asm                                      |\par
                              |           |   _____                                                            |\par
                              |           |  |     |                                                           |\par
                              |           ---| obj |                                                           |\par
                              |              |_____|                                                           |\par
                              |                 |                                                              |\par
                              |                 \\___ .REL, .SYM, .LST, .HLR                                    |\par
                              |                                                                                |\par
                              |   _____                                                                        |\par
                              |  |     |                          (relative to current working directory)      |\par
                              ---| inc |  <--------------------------------------------------------------------/\par
                                 |_____|\par
                                    |\par
                                    \\___ inc3.asm\par
        \par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-52\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
        1.4.40  \cf3 .define \cf1 and \cf3 .undefine \cf1 Directives \par
\par
        Format:  \par
\par
                .define        keyword  /string/        or \par
\par
                .define        keyword ^/string/ \par
\par
                .undefine      keyword \par
\par
\par
        where:  keyword is  the  substitutable  string  which must start\par
                        with a letter and may contain any combination of\par
                        digits and letters.  \par
\par
        where:  string  represents  a string that is substituted for the\par
                        keyword.  The string may contain any sequence of\par
                        characters including white space.  \par
\par
                /  /    represent   the  delimiting  characters.   These\par
                        delimiters   may   be   any   paired    printing\par
                        characters,  as  long  as the characters are not\par
                        contained within  the  string  itself.   If  the\par
                        delimiting  characters do not match, the .define\par
                        directive will give the <q> error.  \par
\par
           The  .define  directive specifies a user defined string which\par
        is substituted for the keyword.  The substitution string may it-\par
        self  contain other keywords that are substitutable.  The assem-\par
        bler resumes the parse of the line at the point the keyword  was\par
        found.  Care must be excersized to avoid any circular references\par
        within .define directives, otherwise the assembler may  enter  a\par
        'recursion runaway' resulting in an <s> error.  \par
\par
           The  .undefine  directive removes the keyword as a substitut-\par
        able string.  No error is returned if the keyword  was  not  de-\par
        fined.  \par
\par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-53\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
        1.4.41  \cf3 .setdp \cf1 Directive \par
\par
        Format:  \par
\par
                .setdp [base [,area]] \par
\par
        The set direct page directive has a common format in all the as-\par
        semblers supporting a paged mode.  The .setdp directive is  used\par
        to  inform  the  assembler of the current direct page region and\par
        the offset address within the selected area.  The normal invoca-\par
        tion methods are:  \par
\par
                .area   DIRECT  (PAG)\par
                .setdp\par
        \par
                or\par
        \par
                .setdp  0,DIRECT\par
\par
        for  all  the  68xx microprocessors (the 6804 has only the paged\par
        ram area).  The commands specify that the direct page is in area\par
        DIRECT and its offset address is 0 (the only valid value for all\par
        but the 6809 microprocessor).  Be sure to place the DIRECT  area\par
        at address 0 during linking.  When the base address and area are\par
        not specified, then zero and the current area are the  defaults.\par
        If  a  .setdp directive is not issued the assembler defaults the\par
        direct page to the area "_CODE" at offset 0.  \par
\par
           The  assembler  verifies  that  any  local variable used in a\par
        direct variable reference is located in this area.  Local  vari-\par
        able  and  constant value direct access addresses are checked to\par
        be within the address range from 0 to 255.  \par
\par
           External direct references are assumed by the assembler to be\par
        in the correct area and have valid  offsets.   The  linker  will\par
        check all direct page relocations to verify that they are within\par
        the correct area.  \par
\par
           The  6809  microprocessor  allows the selection of the direct\par
        page to be on any 256 byte boundary by loading  the  appropriate\par
        value  into the dp register.  Typically one would like to select\par
        the page boundary at link time, one method follows:  \par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-54\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
                .area   DIRECT  (PAG)   ; define the direct page\par
                .setdp\par
                .\par
                .\par
                .\par
                .area   PROGRAM\par
                .\par
                ldd     #DIRECT         ; load the direct page register\par
                tfr     a,dp            ; for access to the direct page\par
\par
        At  link  time specify the base and global equates to locate the\par
        direct page:  \par
\par
                -b DIRECT = 0x1000\par
                -g DIRECT = 0x1000\par
\par
        Both  the  area address and offset value must be specified (area\par
        and variable names are independent).   The  linker  will  verify\par
        that  the  relocated  direct page accesses are within the direct\par
        page.  \par
\par
        The  preceeding  sequence  could  be repeated for multiple paged\par
        areas, however an alternate method is to define a non-paged area\par
        and use the .setdp directive to specify the offset value:  \par
\par
                .area   DIRECT          ; define non-paged area\par
                .\par
                .\par
                .\par
                .area   PROGRAM\par
                .\par
                .setdp  0,DIRECT        ; direct page area\par
                ldd     #DIRECT         ; load the direct page register\par
                tfr     a,dp            ; for access to the direct page\par
                .\par
                .\par
                .setdp  0x100,DIRECT    ; direct page area\par
                ldd     #DIRECT+0x100   ; load the direct page register\par
                tfr     a,dp            ; for access to the direct page\par
\par
        The  linker  will  verify that subsequent direct page references\par
        are in the specified area and offset address range.  It  is  the\par
        programmers responsibility to load the dp register with the cor-\par
        rect page segment  corresponding  to  the  .setdp  base  address\par
        specified.  \par
\par
           For  those  cases  where a single piece of code must access a\par
        defined data structure within a direct page and there  are  many\par
        pages,  define  a  dumby  direct page linked at address 0.  This\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-55\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
        dumby page is used only to define  the  variable  labels.   Then\par
        load  the dp register with the real base address but donot use a\par
        .setdp directive.  This method is equivalent to indexed address-\par
        ing,  where the dp register is the index register and the direct\par
        addressing is the offset.  \par
\par
\par
        1.4.42  \cf3 .16bit\cf1 , \cf3 .24bit\cf1 , and \cf3 .32bit \cf1 Directives \par
\par
        Format:  \par
\par
                .16bit          ;specify 16-bit addressing\par
                .24bit          ;specify 24-bit addressing\par
                .32bit          ;specify 32-bit addressing\par
\par
\par
           The  .16bit, .24bit, and .32bit directives are special direc-\par
        tives for assembler configuration when default  values  are  not\par
        used.  \par
\par
\par
        1.4.43  \cf3 .msb \cf1 Directive \par
\par
        Format:  \par
\par
                .msb    n \par
\par
\par
           The  .msb  directive is only available in selected assemblers\par
        which support 24 or 32-bit addressing.  \par
\par
           The  assembler operator '>' selects the upper byte (MSB) when\par
        included in an assembler  instruction.   The  default  assembler\par
        mode  is  to  select bits <15:8> as the MSB.  The .msb directive\par
        allows the programmer to specify a particular byte as the  'MSB'\par
        when the address space is larger than 16-bits.  \par
\par
           The assembler directive   .msb n  configures the assembler to\par
        select a particular byte as MSB.  Given a 32-bit address of MNmn\par
        (M(3)  is  <31:24>, N(2) is <23:16>, m(1) is <15:8>, and n(0) is\par
        <7:0>) the following examples show how to  select  a  particular\par
        address byte:  \par
\par
                .msb 1          ;select byte 1 of address\par
                                ;<M(3):N(2):m(1):n(0)>\par
                LD A,>MNmn      ;byte m <15:8> ==>> A\par
                ...\par
        \par
                .msb 2          ;select byte 2 of address\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-56\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
                                ;<M(3):N(2):m(1):n(0)>\par
                LD A,>MNmn      ;byte N <23:16> ==>> A\par
                ...\par
        \par
                .msb 3          ;select byte 3 of address\par
                                ;<M(3):N(2):m(1):n(0)>\par
                LD A,>MNmn      ;byte M <31:24> ==>> A\par
                ...\par
\par
\par
        1.4.44  \cf3 .lohi \cf1 and \cf3 .hilo \cf1 Directives \par
\par
        Format:  \par
\par
                .lohi           ;specify LSB first output\par
                .hilo           ;specify MSB first output\par
\par
\par
           The .lohi and .hilo directives are special directives for as-\par
        sembler output configuration.  These  directives  are  currently\par
        only enabled in assembler 'ascheck'.  \par
\par
           An  <m> error will be generated if the .lohi and .hilo direc-\par
        tives are both used within the same assembly source file.  \par
\par
\par
        1.4.45  \cf3 .end \cf1 Directive \par
\par
        Format:  \par
\par
                .end \par
\par
                .end    exp \par
\par
        where:  exp     represents  any expression, including constants,\par
                        symbols, or labels.  \par
\par
\par
           The  .end  directive is used to specify a code entry point to\par
        be included in the linker output file.  Review  the  I86  and  S\par
        record formats described in the linker section for details.  \par
\par
           The .end directive without an expression is ignored.  \par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-57\par
        GENERAL ASSEMBLER DIRECTIVES\par
\par
\par
        1.5  \cf2 INVOKING ASXXXX\cf1  \par
\par
\par
           Starting  an  ASxxxx assembler without any arguments provides\par
        the following option list and then exits:  \par
\par
        Usage: [-Options] [-Option with arg] file\par
        Usage: [-Options] [-Option with arg] outfile file1 [file2 ...]\par
          -h   or NO ARGUMENTS  Show this help list\par
        Output:\par
          -l   Create list   file/outfile[.lst]\par
          -o   Create object file/outfile[.rel]\par
          -s   Create symbol file/outfile[.sym]\par
        Listing:\par
          -d   Decimal listing\par
          -q   Octal   listing\par
          -x   Hex     listing (default)\par
          -b   Display .define substitutions in listing\par
          -bb  and display without .define substitutions\par
          -c   Disable instruction cycle count in listing\par
          -f   Flag relocatable references by  `   in listing file\par
          -ff  Flag relocatable references by mode in listing file\par
          -p   Disable automatic listing pagination\par
          -u   Disable .list/.nlist processing\par
          -w   Wide listing format for symbol table\par
        Assembly:\par
          -i   Insert assembler line before input file(s)\par
          -v   Enable out of range signed / unsigned errors\par
        Symbols:\par
          -a   All user symbols made global\par
          -g   Undefined symbols made global\par
          -z   Disable case sensitivity for symbols\par
        "Debugging:\par
          -j   Enable NoICE Debug Symbols\par
          -y   Enable SDCC  Debug Symbols\par
\par
\par
\par
           The ASxxxx assemblers are command line oriented.  Most sytems\par
        require the option(s) and file(s) arguments to follow the ASxxxx\par
        assembler name:  \par
\par
          as6809 -[Options] file\par
        \par
          as6809 [-Options] outfile file1 [file2 ...]\par
\par
\par
        Some  systems  may  request the arguments after the assembler is\par
        started at a system specific prompt:  \par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-58\par
        INVOKING ASXXXX\par
\par
\par
\par
          as6809\par
          argv: -[Options] file\par
        \par
          as6809\par
          argv: [-Options] outfile file1 [file2 ...]\par
\par
\par
        The ASxxxx options in some more detail:  \par
\par
                -h      List the ASxxxx options\par
        \par
            Output:\par
                -l      create list   output (out)file.lst\par
        \par
                        If -s (symbol table output) is not\par
                        specified the symbol table is included\par
                        at the end of the listing file.\par
        \par
                -o      create object output (out)file.rel\par
                -s      create symbol output (out)file.sym\par
        \par
            Listing:\par
                -d      decimal listing\par
                -q      octal   listing\par
                -x      hex     listing (default)\par
        \par
                        The listing radix affects the\par
                        .lst, .rel, .hlr, and .sym files.\par
        \par
                -b      display .define substitutions in listing\par
        \par
                        If a .define substitution has been applied\par
                        to an assembler source line the source\par
                        line is printed with the substitution.\par
        \par
                -bb     and display without .define substitutions\par
        \par
                        If a .define substitution has been applied\par
                        to an assembler source line the source\par
                        line is first printed without substitution\par
                        followed by the line with the substitution.\par
        \par
                -c      Disable instruction cycle count in listing\par
        \par
                        This option overrides the listing option\par
                        'cyc' in the .list and .nlist directives.\par
                        Instruction cycle counts cannot be enabled\par
                        if the -c option is specified.\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-59\par
        INVOKING ASXXXX\par
\par
\par
        \par
                -f      by  `   in the listing file\par
                -ff     by mode in the listing file\par
        \par
                        Relocatable modes are flagged by byte\par
                        position (LSB, Byte 2, Byte 3, MSB)\par
                        *nMN    paged,\par
                        uvUV    unsigned,\par
                        rsRS    signed,\par
                        pqPQ    program counter relative.\par
        \par
                -p      disable listing pagination\par
        \par
                        This option inhibits the generation\par
                        of a form-feed character and its\par
                        associated page header in the\par
                        assembler listing.\par
        \par
                -u      disable .list/.nlist processing\par
        \par
                        This option disables all .list and\par
                        .nlist directives. The listing mode\par
                        is .list with the options err, loc,\par
                        bin, eqt, cyc, lin, src, pag, lst,\par
                        and md. The options cyc and pag are\par
                        overridden by the -c and -p command\par
                        line options.\par
        \par
                -w      wide listing format for symbol table\par
        \par
            Assembly:\par
                -i      Insert assembler line before input file(s)\par
        \par
                        This option inserts an assembly source\par
                        line before the first file to be assembled.\par
                        e.g.:  -i BUILD=2\par
                        If the insert contains white space then\par
                        delimit the insert.  Inserted lines are\par
                        by default not listed. To list an inserted\par
                        line preceed the insert with a .list insert.\par
                        e.g.:   -i .list -i BUILD=2\par
        \par
                -v      Enable out of range signed / unsigned errors\par
        \par
                        This option enables checking for out of\par
                        range signed / unsigned values in symbol\par
                        equates and arithmetic operations.  This\par
                        option has some ambiguities as internally\par
                        the assemblers use unsigned arithmetic\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-60\par
        INVOKING ASXXXX\par
\par
\par
                        for calculations. (e.g. for a 2-byte machine\par
                        -32768 and 32768 are both represented as 0x8000)\par
        \par
            Symbols:\par
                -a      all user symbols made global\par
        \par
                        All defined (not local or external)\par
                        variables and symbols are flagged\par
                        as global.\par
        \par
                -g      undefined symbols made global\par
        \par
                        Unresolved (external) variables\par
                        and symbols are flagged as global.\par
        \par
                -z      disable case sensitivity for symbols\par
        \par
            Debugging:\par
                -j      enable NOICE debug symbols\par
                -y      enable SDCC debug symbols\par
\par
           The file name for the .lst, .rel, .hlr, and .sym files is the\par
        first file name specified in the command line.  All output files\par
        are ascii text files which may be edited, copied, etc.  The out-\par
        put files are the concatenation of all the input files, if files\par
        are  to be assembled independently invoke the assembler for each\par
        file.  \par
\par
           The  .rel  file contains a radix directive so that the linker\par
        will use the proper conversion for this file.  Linked files  may\par
        have different radices.  \par
\par
           The  ASxxxx  assemblers  also  have  several 'hidden' options\par
        which are not shown in the usage message.  These are:  \par
\par
                -r      Include assembler line numbers\par
                        in the .hlr hint file\par
                -rr     Also include non listed line\par
                        numbers in the .hlr hint file\par
        \par
                -t      Show Include File and Macro Expansion\par
                        levels and memory allocations for\par
                        the assembler and macro processor\par
\par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-61\par
        ERRORS\par
\par
\par
        1.6  \cf2 ERRORS\cf1  \par
\par
\par
           The  ASxxxx assemblers provide limited diagnostic error codes\par
        during the assembly process, these errors will be noted  in  the\par
        listing file and printed on the stderr device.  \par
\par
           The assembler reports the errors on the stderr device as \par
\par
                ?ASxxxx-Error-<*> in line nnn of filename\par
\par
        where  * is the error code, nnn is the line number, and filename\par
        is the source/include file.  \par
\par
           The errors are:  \par
\par
              <.>   This  error  is caused by an absolute direct assign-\par
                    ment of the current location counter \par
                          . = expression (incorrect) \par
                    rather than the correct \par
                          . = . + expression \par
\par
              <a>   Indicates  a machine specific addressing or address-\par
                    ing mode error.  \par
\par
              <b>   Indicates a direct page boundary error.  \par
\par
              <c>   Indicates modulus of .bndry directives to large.  \par
\par
              <d>   Indicates a direct page addressing error.  \par
\par
              <e>   Caused by a .error or .assume directive.  \par
\par
              <i>   Caused  by  an  .include file error or an .if/.endif\par
                    mismatch.  \par
\par
              <m>   Multiple  definitions  of  the  same label, multiple\par
                    .module directives, multiple conflicting  attributes\par
                    in  an  .area or .bank directive or the use of .hilo\par
                    and lohi within the same assembly.  \par
\par
              <n>   An  .mexit,  .endm,  or .narg directive outside of a\par
                    macro, repeat block or indefinite repeat block.  \par
\par
              <o>   Directive  or  mnemonic error or the use of the .org\par
                    directive in a relocatable area.  \par
\par
              <p>   Phase error:  label location changing between passes\par
                    2 and 3.  Normally caused by having  more  than  one\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-62\par
        ERRORS\par
\par
\par
                    level of forward referencing.  \par
\par
              <q>   Questionable syntax:  missing or improper operators,\par
                    terminators, or delimiters.  \par
\par
              <r>   Relocation  error:   logic  operation attempted on a\par
                    relocatable term, addition of two relocatable terms,\par
                    subtraction  of two relocatable terms not within the\par
                    same programming area or external symbols.  \par
\par
              <s>   String Substitution / recursion error.  \par
\par
              <u>   Undefined symbol encountered during assembly.  \par
\par
              <z>   Divide by 0 or Modulus by 0 error:  result is 0.  \par
\par
\par
        1.7  \cf2 LISTING FILE\cf1  \par
\par
\par
           The  (-l) option produces an ascii output listing file.  Each\par
        page of output contains a five line header:  \par
\par
\par
             1.  The ASxxxx program name and page number \par
\par
             2.  Assembler Radix and Address Bits \par
\par
             3.  Title from a .title directive (if any) \par
\par
             4.  Subtitle from a .sbttl directive (if any) \par
\par
             5.  Blank line \par
\par
\par
\par
        Each succeeding line contains six fields:  \par
\par
\par
             1.  Error field (first two characters of line) \par
\par
             2.  Current location counter \par
\par
             3.  Generated code in byte format \par
\par
             4.  Opcode cycles count \par
\par
             5.  Source text line number \par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-63\par
        LISTING FILE\par
\par
\par
             6.  Source text \par
\par
\par
           The error field may contain upto 2 error flags indicating any\par
        errors encountered while assembling this line of source code.  \par
\par
           The  current  location  counter  field  displays  the 16-bit,\par
        24-bit, or 32-bit program position.  This field will be  in  the\par
        selected radix.  \par
\par
           The generated code follows the program location.  The listing\par
        radix determines the number of bytes that will be  displayed  in\par
        this field.  Hexidecimal listing allows six bytes of data within\par
        the field, decimal and octal allow four bytes within the  field.\par
        If more than one field of data is generated from the assembly of\par
        a single line of source code, then the data field is repeated on\par
        successive lines.  \par
\par
           The  opcode cycles count is printed within the delimiters [ ]\par
        on the line with the source text.  This reduces  the  number  of\par
        generated code bytes displayed on the line with the source list-\par
        ing by one.  (The -c option disables all opcode cycle listing.) \par
\par
           The source text line number is printed in decimal and is fol-\par
        lowed by the source text.  A Source line with a .page  directive\par
        is never listed.  (The -u option overrides this behavior.) \par
\par
           Two  additional options are available for printing the source\par
        line text.  If the -b option is specified then the listed source\par
        line  contains all the .define substitutions.  If the -bb option\par
        is specified then the original source line is printed before the\par
        source line with substitutions.  \par
\par
           Two  data  field  options  are  available to flag those bytes\par
        which will be relocated by the linker.   If  the  -f  option  is\par
        specified  then  each  byte to be relocated will be preceeded by\par
        the '`' character.  If the -ff option  is  specified  then  each\par
        byte  to  be relocated will be preceeded by one of the following\par
        characters:  \par
\par
             1.  *   paged relocation \par
\par
             2.  u   low  byte of unsigned word or unsigned byte \par
\par
             3.  v   high byte of unsigned word \par
\par
             4.  p   PCR low  byte of word relocation or PCR byte \par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-64\par
        LISTING FILE\par
\par
\par
             5.  q   PCR high byte of word relocation \par
\par
             6.  r   low  byte relocation or byte relocation \par
\par
             7.  s   high byte relocation \par
\par
\par
           Assemblers  which  use 24-bit or 32-bit addressing use an ex-\par
        tended flagging mode:  \par
\par
             1.  *   paged relocation \par
\par
             2.  u   1st  byte of unsigned value \par
\par
             3.  v   2nd  byte of unsigned value \par
\par
             4.  U   3rd  byte of unsigned value \par
\par
             5.  V   4th  byte of unsigned value \par
\par
             6.  p   PCR 1st  byte of relocation value or PCR byte \par
\par
             7.  q   PCR 2nd  byte of relocation value \par
\par
             8.  P   PCR 3rd  byte of relocation value \par
\par
             9.  Q   PCR 4th  byte of relocation value \par
\par
            10.  r   1st  byte of relocation value or byte relocation \par
\par
            11.  s   2nd  byte of relocation value \par
\par
            12.  R   3rd  byte of relocation value \par
\par
            13.  S   4th  byte of relocation value \par
\par
\par
\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-65\par
        SYMBOL TABLE FILE\par
\par
\par
        1.8  \cf2 SYMBOL TABLE FILE\cf1  \par
\par
\par
           The symbol table has two parts:  \par
\par
             1.  The alphabetically sorted list of symbols and/or labels\par
                 defined or referenced in the source program.  \par
\par
             2.  A  list of the program areas defined during assembly of\par
                 the source program.  \par
\par
\par
           The sorted list of symbols and/or labels contains the follow-\par
        ing information:  \par
\par
             1.  Program  area  number (none if absolute value or exter-\par
                 nal) \par
\par
             2.  The symbol or label \par
\par
             3.  Directly assigned symbol is denoted with an (=) sign \par
\par
             4.  The  value of a symbol, location of a label relative to\par
                 the program area base address (=0), or a ****  indicat-\par
                 ing the symbol or label is undefined.  \par
\par
             5.  The       characters:       G - global,      L - local,\par
                 R - relocatable, and X - external.  \par
\par
\par
           The list of program areas provides the correspondence between\par
        the program area numbers and the defined program areas, the size\par
        of the program areas, and the area flags (attributes).  \par
\par
\par
        1.9  \cf2 OBJECT FILE\cf1  \par
\par
\par
           The  object  file is an ascii file containing the information\par
        needed by the linker to bind multiple object modules into a com-\par
        plete  loadable  memory  image.   The object module contains the\par
        following designators:  \par
\par
                [XDQ][HL][234]\par
                        X       Hexidecimal radix\par
                        D       Decimal radix\par
                        Q       Octal radix\par
        \par
                        H       Most significant byte first\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-66\par
        OBJECT FILE\par
\par
\par
                        L       Least significant byte first\par
        \par
                        2       16-Bit Addressing\par
                        3       24-Bit Addressing\par
                        4       32-Bit Addressing\par
        \par
                H       Header \par
                M       Module\par
                G       Merge Mode\par
                B       Bank\par
                A       Area\par
                S       Symbol\par
                T       Object code\par
                R       Relocation information\par
                P       Paging information\par
\par
           Refer to the linker for a detailed description of each of the\par
        designators and the format of the information contained  in  the\par
        object file.  \par
\par
\par
        1.10  \cf2 HINT FILE\cf1  \par
\par
\par
           The  hint file is an ascii file containing information needed\par
        by the linker to convert the listing file into a relocated list-\par
        ing  file.   Each  line  in the .hlr file coresponds to a single\par
        line in the listing file.  The text line usually contains 3 or 4\par
        parameters  in  the radix selected for the assembler as shown in\par
        the following table:  \par
\par
        Line Position:  123456789012\par
                        ------------\par
        Octal:           111 222 333\par
        Decimal:         111 222 333\par
        Hex:             11 22 33\par
        \par
        \par
        Parameter 1 specifies the parameters listed in the line.\par
        A bit is set for each listing option enabled during the\par
        assembly of the line.\par
        \par
                BIT 0   - LIST_ERR      Error Code(s)\par
                BIT 1   - LIST_LOC      Location\par
                BIT 2   - LIST_BIN      Generated Binary Value(s)\par
                BIT 3   - LIST_EQT      Assembler Equate Value\par
                BIT 4   - LIST_CYC      Opcode Cycles\par
                BIT 5   - LIST_LIN      Line Numbers\par
                BIT 6   - LIST_SRC      Assembler Source Code\par
\page\par
\par
        THE ASSEMBLER                                          PAGE 1-67\par
        HINT FILE\par
\par
\par
                BIT 7   - HLR_NLST      Listing Inhibited\par
        \par
        Parameter 2 is the internal assembler listing mode\par
        value specified for this line during the assembly process:\par
        \par
                0 - NLIST       No listing\par
                1 - SLIST       Source only\par
                2 - ALIST       Address only\par
                3 - BLIST       Address only with allocation\par
                4 - CLIST       Code\par
                5 - ELIST       Equate only\par
                6 - ILIST       IF conditional evaluation\par
        \par
        Parameter 3 is the number of output bytes listed\par
        for this line.\par
\par
           The  4th  parameter  is only output if an equate references a\par
        value in a different area.  The area name is output in the  fol-\par
        lowing format following the 3 parameters described above:  \par
\par
        Line Position:  123456789012\par
                        ------------\par
        Area Name:       equatearea\par
\par
           When  the  line number is output to the .hlr file (-r option)\par
        the line number is prepended to the 3 or 4 parameters  described\par
        above.   The  line  number is always in decimal in the following\par
        format:  \par
\par
        Line Position:  1234567\par
                        -------\par
        Decimal:          LLLLL\par
\par
           Thus the four formats (for each radix) that may be present in\par
        a .hlr file are:  \par
\par
        Line Position:  123456789012345678901234567890\par
                        ------------------------------\par
                         11 22 33\par
                         11 22 33 equatearea\par
                          LLLLL 11 22 33\par
                          LLLLL 11 22 33 equatearea\par
\par
           The  linker understands these formats without any user inter-\par
        action.  \par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                    \cf2 CHAPTER 2\cf1\par
\par
                               \cf2 THE MACRO PROCESSOR\cf1\par
\par
\par
\par
\par
\par
        2.1  \cf2 DEFINING MACROS\cf1  \par
\par
\par
           By  using macros a programmer can use a single line to insert\par
        a sequence of lines into a source program.  \par
\par
           A  macro  definition is headed by a .macro directive followed\par
        by the source lines.  The source lines  may  optionally  contain\par
        dummy arguments.  If such arguments are used, each one is listed\par
        in the .macro directive.  \par
\par
           A  macro call is the statement used by the programmer to call\par
        the macro source program.  It consists of the  macro  name  fol-\par
        lowed  by  the  real arguments needed to replace the dummy argu-\par
        ments used in the macro.  \par
\par
           Macro  expansion  is  the insertion of the macro source lines\par
        into the main  program.   Included  in  this  insertion  is  the\par
        replacement of the dummy arguments by the real arguments.  \par
\par
           Macro  directives provide a means to manipulate the macro ex-\par
        pansions.  Only one directive is allowed per source line.   Each\par
        directive  may  have  a  blank  operand  field  or  one  or more\par
        operands.  Legal  operands  differ  with  each  directive.   The\par
        macros  and  their  associated  directives  are detailed in this\par
        chapter.  \par
\par
           Macro  directives  can replace any machine dependent mnemonic\par
        associated with a specific assembler.  However, the basic assem-\par
        bler directives cannot be replaced with a macro.  \par
\page\par
\par
        THE MACRO PROCESSOR                                     PAGE 2-2\par
        DEFINING MACROS\par
\par
\par
        2.1.1  \cf3 .macro \cf1 Directive \par
\par
\par
        Format:\par
        \par
        [label:]        .macro  name, dummy argument list\par
        \par
        where:  label   represents an optional statement label.\par
        \par
                name    represents the user-assigned symbolic\par
                        name of the macro.  This name  may be\par
                        any legal symbol and may be used as a\par
                        label elsewhere in the program.  The\par
                        macro name is not case sensitive,\par
                        name, NAME, or nAmE all refer to the\par
                        same macro.\par
        \par
                ,       represents a legal macro separator\par
                        (comma, space, and/or tab).\par
        \par
                dummy   represents a number of legal symbols\par
               argument that may appear anywhere in the body of\par
                list    the macro definition,  even as a label.\par
                        These dummy symbols can be used elsewhere\par
                        in the program with no conflict of\par
                        definition.  Multiple dummy arguments\par
                        specified in this directive may be\par
                        separated by any legal separator.  The\par
                        detection of a duplicate or an illegal\par
                        symbol in a dummy argument list\par
                        terminates the scan and causes a <q>\par
                        error to be generated.\par
\par
\par
        A  comment may follow the dummy argument list in a .macro direc-\par
        tive, as shown below:  \par
\par
                .macro  abs     a,b     ;Defines macro abs\par
\par
\par
        The  first  statement  of  a  macro  definition must be a .macro\par
        directive.  Defining a macro with the same name as  an  existing\par
        macro will generate an <m> error.  The .mdelete directive should\par
        be used to delete the previous macro definition before  redefin-\par
        ing a macro.  \par
\page\par
\par
        THE MACRO PROCESSOR                                     PAGE 2-3\par
        DEFINING MACROS\par
\par
\par
        2.1.2  \cf3 .endm \cf1 Directive \par
\par
\par
        Format:\par
        \par
                .endm\par
\par
\par
        The .endm directive should not have a label.  Because the direc-\par
        tives .irp, .irpc, and .rept may repeat more than once the label\par
        will  be  defined multiple times resulting in <m> and/or <p> er-\par
        rors.  \par
\par
           The  .endm  directive  may be followed by a comment field, as\par
        shown below:  \par
\par
                .endm           ;end of macro\par
\par
           A  comment  may  follow  the  dummy argument list in a .macro\par
        directive, as shown below:  \par
\par
                .macro  typemsg message ;Type a message.\par
                jsr     typemsg\par
                .word   message\par
                .endm                   ;End of typemsg\par
\par
\par
        The  final  statement  of every macro definition must be a .endm\par
        directive.  The .endm directive is also used to terminate  inde-\par
        finite  repeat  blocks and repeat blocks.  A .endm directive en-\par
        countered outside a macro definition  is  flagged  with  an  <n>\par
        error.  \par
\par
\par
        2.1.3  \cf3 .mexit \cf1 Directive \par
\par
\par
        Format:\par
        \par
                .mexit\par
\par
\par
        The  .mexit directive may be used to terminate a macro expansion\par
        before the end of the macro is encountered.  This  directive  is\par
        also  legal  within  repeat blocks.  It is most useful in nested\par
        macros.  The .mexit directive terminates the  current  macro  as\par
        though a .endm directive had been encountered.  Using the .mexit\par
        directive bypasses the complexities of nested conditional direc-\par
        tives  and  alternate  assembly paths, as shown in the following\par
\page\par
\par
        THE MACRO PROCESSOR                                     PAGE 2-4\par
        DEFINING MACROS\par
\par
\par
        example:  \par
\par
                .macro  altr    N,A,B\par
                  .\par
                  .\par
                  .\par
                .if eq,N        ;Start conditional Block\par
                  .\par
                  .\par
                  .\par
                .mexit          ;Terminate macro expansion\par
                .endif          ;End of conditional block\par
                  .\par
                  .\par
                  .\par
                .endm           ;Normal end of macro\par
\par
\par
        In  an  assembly  where  the  symbol  N is replaced by zero, the\par
        .mexit directive would assemble the conditional block  and  ter-\par
        minate  the  macro  expansion.   When macros ar nested, a .mexit\par
        directive causes an exit to the next higher level of  macro  ex-\par
        pansion.  A .mexit directive encountered outside a macro defini-\par
        tion is flagged with an <n> error.  \par
\par
\par
        2.2  \cf2 CALLING MACROS\cf1  \par
\par
\par
        Format:\par
        \par
                [label:]  name  real arguments\par
        \par
        where:  label   represents an optional statement label.\par
        \par
                name    represents the name of the macro, as\par
                        specified in the macro definition.\par
        \par
                real    represent symbolic arguments which\par
             arguments  replace the dummy arguments listed\par
                        in the .macro definition.  When\par
                        multiple arguments occur, they are\par
                        separated by any legal separator.\par
                        Arguments to the macro call are\par
                        treated as character strings, their\par
                        usage is determined by the macro\par
                        definition.\par
\par
        A  macro  definition  must be established by means of the .macro\par
\page\par
\par
        THE MACRO PROCESSOR                                     PAGE 2-5\par
        CALLING MACROS\par
\par
\par
        directive before the macro can be called and expanded within the\par
        source program.  \par
\par
           When a macro name is the same as a user label, the appearance\par
        of the symbol in the operator field designates the symbol  as  a\par
        macro  call;   the appearance of the symbol in the operand field\par
        designates it as a label, as shown below:  \par
\par
        LESS:   mov     @r0,r1          ;LESS is a label\par
                 .\par
                 .\par
                 .\par
                bra     LESS            ;LESS is considered a label\par
                 .\par
                 .\par
                 .\par
                LESS    sym1,sym2       ;LESS is a macro call\par
\par
\par
        2.3  \cf2 ARGUMENTS IN MACRO DEFINITIONS AND MACRO CALLS\cf1  \par
\par
\par
           Multiple arguments within a macro must be separated by one of\par
        the legal separating characters (comma, space, and/or tab).  \par
\par
           Macro  definition  arguments (dummy) and macro call arguments\par
        (real) maintain a strict positional relationship.  That is,  the\par
        first  real  argument in a macro call corresponds with the first\par
        dummy argument in the macro definition.  \par
\par
           For  example,  the  following  macro definition and its asso-\par
        ciated macro call contain multiple arguments:  \par
\par
                .macro  new     a,b,c\par
                  .\par
                  .\par
                  .\par
        \par
                new     phi,sig,^/C1,C2/\par
\par
\par
        Arguments which themselves contain separating characters must be\par
        enclosed  within  the  delimiter  construct  ^/   /  where   the\par
        character  '/'  may be any character not in the argument string.\par
        For example, the macro call:  \par
\par
                new     ^/exg    x,y/,#44,ij\par
\par
        causes the entire expression \par
\page\par
\par
        THE MACRO PROCESSOR                                     PAGE 2-6\par
        ARGUMENTS IN MACRO DEFINITIONS AND MACRO CALLS\par
\par
\par
\par
                exg    x,y\par
\par
        to  replace all occurrances of the symbol a in the macro defini-\par
        tion.  Real arguments with a macro call  are  considered  to  be\par
        character  strings  and  are  treated  as a single entity during\par
        macro expansion.  \par
\par
           The  up-arrow  (^)  construction also allows another up-arrow\par
        costruction to be passed as part of  the  argument.   This  con-\par
        struction,  for example, could have been used in the above macro\par
        call, as follows:  \par
\par
                new     ^!^/exg    x,y/!,#44,ij\par
\par
        causing the entire string ^/exg    x,y/ to be passed as an argu-\par
        ment.  \par
\par
\par
        2.3.1  Macro Nesting \par
\par
\par
           Macro  nesting  occurs  where  the expansion of one macro in-\par
        cludes a call to another macro.  The depth of nesting  is  arbi-\par
        trarily limited to 20.  \par
\par
           To  pass  an argument containing legal argument delimiters to\par
        nested macros, enclose the  argument  in  the  macro  definition\par
        within  an up-arrow construction, as shown in the coding example\par
        below.  This extra set of delimiters for each level  of  nesting\par
        is required in the macro definition, not the in the macro call. \par
\par
                .macro  level1  dum1,dum2\par
                level2  ^/dum1/\par
                level2  ^/dum2/\par
                .endm\par
        \par
                .macro  level2  dum3\par
                dum3\par
                add     #10,z\par
                push    z\par
                .endm\par
\par
        A call to the level1 macro, as shown below, for example:  \par
\par
                level1  ^/leaz    0,x/,^/tfr     x,z/\par
\par
        causes the following macro expansion to occur:  \par
\par
\page\par
\par
        THE MACRO PROCESSOR                                     PAGE 2-7\par
        ARGUMENTS IN MACRO DEFINITIONS AND MACRO CALLS\par
\par
\par
                leaz    0,x\par
                add     #10,z\par
                push    z\par
                tfr     x,z\par
                add     #10,z\par
                push    z\par
\par
        When  macro  definitions are nested, the inner definition cannot\par
        be called until the outer macro has been  called  and  expanded.\par
        For example, in the following code:  \par
\par
                .macro  lv1     a,b\par
                  .\par
                  .\par
                  .\par
                .macro  lv2     c\par
                  .\par
                  .\par
                  .\par
                .endm\par
                .endm\par
\par
        the  lv2 macro cannot be called and expanded until the lv1 macro\par
        has been expanded.  Likewise, any macro defined within  the  lv2\par
        macro  definition  cannot  be  called and expanded until lv2 has\par
        also been expanded.  \par
\par
\par
        2.3.2  Special Characters in Macro Arguments \par
\par
\par
           If  an  argument  does not contain spaces, tabs, or commas it\par
        may include special  characters  without  enclosing  them  in  a\par
        delimited construction.  For example:  \par
\par
                .macro  push    arg\par
                mov     arg,-(sp)\par
                .endm\par
        \par
        \par
                push    x+3(%2)\par
\par
        causes the following code to be generated:  \par
\par
                mov     x+3(%2),-(sp)\par
\par
\par
\page\par
\par
        THE MACRO PROCESSOR                                     PAGE 2-8\par
        ARGUMENTS IN MACRO DEFINITIONS AND MACRO CALLS\par
\par
\par
        2.3.3  Passing Numerical Arguments as Symbols \par
\par
\par
           If the unary operator backslash (\\) precedes an argument, the\par
        macro treats the argument as a numeric value in the current pro-\par
        gram  radix.   The  ascii characters representing this value are\par
        inserted in the macro expansion, and their function  is  defined\par
        in  the context of the resulting code, as shown in the following\par
        example:  \par
\par
                .macro  inc     a,b\par
                con     a,\\b\par
                b = b + 1\par
                .endm\par
        \par
                .macro  con     a,b\par
        a'b:    .word   4\par
                .endm\par
        \par
                ...\par
        \par
                c = 0           ;Initialize\par
        \par
                inc     x,c\par
\par
        The above macro call (inc) would thus expand to:  \par
\par
                x0:     .word   4\par
\par
        In  this  expanded  code,  the  label x0:  results from the con-\par
        catenation  of  two  real  arguments.   The  single  quote   (')\par
        character  in  the  label a'b:  concatenates the real argument x\par
        and 0 as they are passed during  the  expansion  of  the  macro.\par
        This type of argument construction is descibed in more detail in\par
        a following section.  \par
\par
           A  subsequent  call to the same macro would generate the fol-\par
        lowing code:  \par
\par
                x1:     .word   4\par
\par
        and  so  on,  for  later  calls.   The two macro definitions are\par
        necessary because the symbol associated with the dummy  argument\par
        b (that is, symbol c) cannot be updated in the con macro defini-\par
        tion, because the character 0 has replaced  c  in  the  argument\par
        string  (inc  x,c).   In  the  con  macro definition, the number\par
        passed is treated as a string argument.  (Where the value of the\par
        real  argument  is 0, only a single 0 character is passed to the\par
        macro expansion.  \par
\page\par
\par
        THE MACRO PROCESSOR                                     PAGE 2-9\par
        ARGUMENTS IN MACRO DEFINITIONS AND MACRO CALLS\par
\par
\par
        2.3.4  Number of Arguments in Macro Calls \par
\par
\par
           A  macro  can  be defined with or without arguments.  If more\par
        arguments appear in the macro call than in the macro definition,\par
        a  <q>  error  is  generated.   If fewer arguments appear in the\par
        macro call than in the macro definition, missing  arguments  are\par
        assumed to be null values.  The conditional directives .if b and\par
        .if nb can be used within the macro to detect missing arguments.\par
        The number of arguments can be determined using the .narg direc-\par
        tive.  \par
\par
\par
        2.3.5  Creating Local Symbols Automatically \par
\par
\par
           A  label is often required in an expanded macro.  In the con-\par
        ventional macro facilituies thus far described, a label must  be\par
        explicitly  specified  as an argument with each macro call.  The\par
        user must be careful in issuing subsequent  calls  to  the  same\par
        macro  in  order  avoid duplicating labels.  This concern can be\par
        eliminated through a feature of the ASxxxx macro  facility  that\par
        creates a unique symbol where a label is required in an expanded\par
        macro.  \par
\par
           ASxxxx  allows temporary symbols of the form n$, where n is a\par
        decimal integer.  Automatically created symbols are  created  in\par
        numerical order beginning at 10000$.  \par
\par
           The  automatic generation of local symbols is invoked on each\par
        call of a macro whose definition contains a dummy argument  pre-\par
        ceded  by the question mark (?) character, as shown in the macro\par
        definition below:  \par
\par
                .macro  beta    a,?b    ;dummy argument b with ?\par
                tst     a\par
                beq     b\par
                add     #5,a\par
        b:\par
                .endm\par
\par
\par
           A  local symbol is created automatically only when a real ar-\par
        gument of the macro call is either null or missing, as shown  in\par
        Example 1 below.  If the real argument is specified in the macro\par
        call, however, generation of the local symbol is  inhibited  and\par
        normal argument replacement occurs, as shown in Example 2 below.\par
        (Examples 1 and 2 are both expansions of the beta macro  defined\par
        above.) \par
\page\par
\par
        THE MACRO PROCESSOR                                    PAGE 2-10\par
        ARGUMENTS IN MACRO DEFINITIONS AND MACRO CALLS\par
\par
\par
\par
        Example 1:  Create a Local Symbol for the Missing Argument\par
        \par
                beta    flag    ;Second argument is missing.\par
                tst     flag\par
                beq     10000$  ;Local symbol is created.\par
                add     #5,flag\par
        10000$:\par
        \par
        Example 2:  Do Not Create a Local Symbol\par
        \par
                beta    r3,xyz\par
                tst     r3\par
                beq     xyz\par
                add     #5,r3\par
        xyz:\par
\par
\par
           Automatically created local symbols resulting from the expan-\par
        sion of a macro, as described above, do not  establish  a  local\par
        symbol block in their own right.  \par
\par
           When  a  macro  has several arguments earmarked for automatic\par
        local symbol generation, substituting a specific label  for  one\par
        such  argument  risks  assembly errors because the arguments are\par
        constructed at the point of macro invocation.  Therefor, the ap-\par
        pearance of a label in the macro expansion will create a new lo-\par
        cal symbol block.  The new local symbol block could leave  local\par
        symbol references in the previous block and their symbol defini-\par
        tions in the new one, causing error codes in the assembly  list-\par
        ing.   Furthermore  a  later  macro expansion that creates local\par
        symbols in the new block may duplicate one  of  the  symbols  in\par
        question,  causing  an additional error code <p> in the assembly\par
        listing.  \par
\par
\par
        2.3.6  Concatenation of Macro Arguments \par
\par
\par
           The  apostrophe  or  single quote character (') operates as a\par
        legal delimiting character in macro definitions.  A single quote\par
        that precedes and/or follows a dummy argument in a macro defini-\par
        tion is removed, and the substitution of the real  argument  oc-\par
        curs at that point.  For example, in the following statements:  \par
\par
\page\par
\par
        THE MACRO PROCESSOR                                    PAGE 2-11\par
        ARGUMENTS IN MACRO DEFINITIONS AND MACRO CALLS\par
\par
\par
                .macro  def     A,B,C\par
        A'B:    asciz   "C"\par
                .byte   ''A,''B\par
                .endm\par
\par
        when the macro def is called through the statement:  \par
\par
                def     x,y,^/V05.00/\par
\par
        it is expanded, as follows:  \par
\par
        xy:     asciz   "V05.00"\par
                .byte   'x,'y\par
\par
        In  expanding  the  first  line, the scan for the first argument\par
        terminates upon finding  the  first  apostrophe  (')  character.\par
        Since  A is a dummy argument, the apostrphe (') is removed.  The\par
        scan then resumes with B;  B is also noted as another dummy  ar-\par
        gument.   The  two  real  arguments x and y are then concated to\par
        form the label xy:.  The third dummy argument is  noted  in  the\par
        operand field of the .asciz directive, causing the real argument\par
        V05.00 to be substituted in this field.  \par
\par
           When  evaluating  the arguments of the .byte directive during\par
        expansion of the second line, the scan  begins  with  the  first\par
        apostrophe (') character.  Since it is neither preceded nor fol-\par
        lowed by a dummy argument, this apostrophe remains in the  macro\par
        expansion.   The  scan  then  encounters  the second apostrophe,\par
        which is followed by a dummy argument and is therefor discarded.\par
        The scan of argument A is terminated upon encountering the comma\par
        (,).  The third apostrophe is neither preceded nor followed by a\par
        dummy  argument  and  again remains in the macro expansion.  The\par
        fourth (and last) apostrophe is followed by another dummy  argu-\par
        ment and is likewise discarded.  (Four apostrophe (') characters\par
        were necessary in the macro definition  to  generate  two  apos-\par
        trophe (') characters in the macro expansion.) \par
\par
\par
\page\par
\par
        THE MACRO PROCESSOR                                    PAGE 2-12\par
        MACRO ATTRIBUTE DIRECTIVES\par
\par
\par
        2.4  \cf2 MACRO ATTRIBUTE DIRECTIVES\cf1  \par
\par
\par
           The  ASxxxx  assemblers  have  four directives that allow the\par
        user to determine certain attributes of macro arguments:  .narg,\par
        .nchr,  .ntyp,  and  .nval.  The use of these directives permits\par
        selective modifications of a macro expansion, depending  on  the\par
        nature  of  the  arguments  being  passed.  These directives are\par
        described below.  \par
\par
\par
        2.4.1  \cf3 .narg \cf1 Directive \par
\par
\par
        Format:\par
        \par
        [label:]        .narg   symbol\par
        \par
        where:  label   represents an optional statement label.\par
        \par
                symbol  represents any legal symbol. This symbol\par
                        is equated to the number of arguments in\par
                        the macro call currently being expanded.\par
                        If a symbol is not specified, the .narg\par
                        directive is flagged with a <q> error.\par
\par
        The .narg directive is used to determine the number of arguments\par
        in the macro call currently being expanded.   Hence,  the  .narg\par
        directive  can appear only within a macro definition;  if it ap-\par
        pears elsewhere, an <n> error is generated.  \par
\par
           The  argument  count  includes null arguments as shown in the\par
        following:  \par
\par
                .macro  pack    A,B,C\par
                .narg   cnt\par
                  .\par
                  .\par
                  .\par
                .endm\par
        \par
                pack    arg1,,arg3\par
                pack    arg1\par
\par
        When  the  first macro pack is invoked .narg will assign a value\par
        of three (3) to the number of arguments cnt, which includes  the\par
        empty  argument.  The second invocation of macro pack has only a\par
        single argument specified and .narg will assign a value  of  one\par
        (1) to cnt.  \par
\page\par
\par
        THE MACRO PROCESSOR                                    PAGE 2-13\par
        MACRO ATTRIBUTE DIRECTIVES\par
\par
\par
        2.4.2  \cf3 .nchr \cf1 Directive \par
\par
\par
        Format:\par
        \par
        [label:]        .nchr   symbol,string\par
        \par
        where:  label   represents an optional statement label.\par
        \par
                symbol  represents any legal symbol. This symbol\par
                        is equated to the number of characters in\par
                        the string of the macro call currently\par
                        being expanded.  If a symbol is not\par
                        specified, the .nchr  directive is\par
                        flagged with a <q> error.\par
        \par
                ,       represents any legal separator (comma,\par
                        space, and/or tab).\par
        \par
                string  represents a string of printable 7-bit\par
                        ascii characters.  If the character\par
                        string contains a legal separator\par
                        (comma, space and/or tab) the whole\par
                        string must be delimited using the\par
                        up-arrow (^) construct ^/    /.\par
                        If the delimiting characters do not\par
                        match or if the ending delimiter\par
                        cannot be detected because of a\par
                        syntactical error in the character\par
                        string, the .nchr directive reports\par
                        a <q> error.\par
\par
        The .nchr directive, which can appear anywhere in an ASxxxx pro-\par
        gram, is used to determine the number of characters in a  speci-\par
        fied  character string.  This directive is useful in calculating\par
        the length of macro arguments.  \par
\page\par
\par
        THE MACRO PROCESSOR                                    PAGE 2-14\par
        MACRO ATTRIBUTE DIRECTIVES\par
\par
\par
        2.4.3  \cf3 .ntyp \cf1 Directive \par
\par
\par
        Format:\par
        \par
        [label:]        .ntyp   symbol,arg\par
        \par
        where:  label   represents an optional statement label.\par
        \par
                symbol  represents any legal symbol. The symbol\par
                        is made absolute and equated to 0 if\par
                        arg is an absolute value or a non\par
                        relocatable symbol.  The symbol is made\par
                        absolute and equated to 1 if arg is a\par
                        relocatable symbol.  If a symbol is not\par
                        specified then the .ntyp directive is\par
                        flagged with a <q> error.\par
        \par
                ,       represents any legal separator (comma,\par
                        space, and/or tab).\par
        \par
                arg     represents any legal expression or\par
                        symbol. If arg is not specified\par
                        then the .ntyp directive is flagged\par
                        with a <q> error.\par
\par
        The .ntyp directive, which can appear anywhere in an ASxxxx pro-\par
        gram, is used to determine the symbol or expression type as  ab-\par
        solute (0) or relocatable (1).  \par
\page\par
\par
        THE MACRO PROCESSOR                                    PAGE 2-15\par
        MACRO ATTRIBUTE DIRECTIVES\par
\par
\par
        2.4.4  \cf3 .nval \cf1 Directive \par
\par
\par
        Format:\par
        \par
        [label:]        .nval   symbol,arg\par
        \par
        where:  label   represents an optional statement label.\par
        \par
                symbol  represents any legal symbol. The symbol\par
                        is equated to the value of arg and made\par
                        absolute.  If a symbol is not specified\par
                        then the .nval directive is flagged\par
                        with a <q> error.\par
        \par
                ,       represents any legal separator (comma,\par
                        space, and/or tab).\par
        \par
                arg     represents any legal expression or\par
                        symbol. If arg is not specified\par
                        then the .nval directive is flagged\par
                        with a <q> error.\par
\par
        The .nval directive, which can appear anywhere in an ASxxxx pro-\par
        gram, is used to determine the value of arg and make the  result\par
        an absolute value.  \par
\par
\par
        2.5  \cf2 INDEFINITE REPEAT BLOCK DIRECTIVES\cf1  \par
\par
\par
           An  indefinite  repeat block is similar to a macro definition\par
        with only one dummy argument.  At each expansion  of  the  inde-\par
        finite  repeat  range, this dummy argument is replaced with suc-\par
        cessive elements of a real  argument  list.   Since  the  repeat\par
        directive  and its associated range are coded in-line within the\par
        source program, this type of macro definition and expansion does\par
        not require calling the macro by name, as required in the expan-\par
        sion of the conventional macros previously described.  \par
\par
           An  indefinite  repeat  block  can  appear  within or outside\par
        another macro definition, indefinite  repeat  block,  or  repeat\par
        block.   The  rules specifying indefinite repeat block arguments\par
        are the same as for specifying macro arguments.  \par
\page\par
\par
        THE MACRO PROCESSOR                                    PAGE 2-16\par
        INDEFINITE REPEAT BLOCK DIRECTIVES\par
\par
\par
        2.5.1  \cf3 .irp \cf1 Directive \par
\par
\par
        Format:\par
        \par
            [label:]    .irp    sym,argument_list\par
                        .\par
                        .\par
                    (range of indefinite repeat block)\par
                        .\par
                        .\par
                        .endm                   \par
        \par
        where:  label   represents an optional statement label.\par
        \par
                sym     represents a dummy argument that is\par
                        replaced with successive real arguments\par
                        from the argument list.  If the dummy\par
                        argument is not specified, the .irp\par
                        directive is flagged with a <q> error.\par
        \par
                ,       represents any legal separator (comma,\par
                        space, and/or tab).\par
        \par
          argument_list represents a list of real arguments\par
                        that are to be used in the expansion\par
                        of the indefinite repeat range. A real\par
                        argument may consist of one or more\par
                        7-bit ascii characters; multiple\par
                        arguments must be separated by any\par
                        legal separator (comma, space, and/or\par
                        tab).  If an argument must contain\par
                        a legal separator then the up-arrow\par
                        (_^) construct is require for that\par
                        argument.  If no real arguments are\par
                        specified, no action is taken.\par
        \par
                range   represents the block of code to be\par
                        repeated once for each occurrence of\par
                        a real argument in the list.  The\par
                        range may contain other macro\par
                        definitions, repeat ranges and/or\par
                        the .mexit directive.\par
        \par
                .endm   indicates the end of the indefinite\par
                        repeat block range.\par
\par
        The .irp directive is used to replace a dummy argument with suc-\par
        cessive real arguments specified  in  an  argument  list.   This\par
\page\par
\par
        THE MACRO PROCESSOR                                    PAGE 2-17\par
        INDEFINITE REPEAT BLOCK DIRECTIVES\par
\par
\par
        replacement  process  occurrs  during  the expansion of an inde-\par
        finite repeat block range.  \par
\par
\par
        2.5.2  \cf3 .irpc \cf1 Directive \par
\par
\par
        Format:\par
        \par
            [label:]    .irpc   sym,string\par
                        .\par
                        .\par
                    (range of indefinite repeat block)\par
                        .\par
                        .\par
                        .endm                   \par
        \par
        where:  label   represents an optional statement label.\par
        \par
                sym     represents a dummy argument that is\par
                        replaced with successive real characters\par
                        from the argument string.  If the dummy\par
                        argument is not specified, the .irpc\par
                        directive is flagged with a <q> error.\par
        \par
                ,       represents any legal separator (comma,\par
                        space, and/or tab).\par
        \par
                string  represents a list of 7-bit ascii\par
                        characters.  If the string contains\par
                        legal separator characters (comma,\par
                        space, and/or tab) then the up-arrow\par
                        (_^) construct must delimit the string.\par
                        \par
                range   represents the block of code to be\par
                        repeated once for each occurrence of\par
                        a real argument in the list.  The\par
                        range may contain other macro\par
                        definitions, repeat ranges and/or\par
                        the .mexit directive.\par
        \par
                .endm   indicates the end of the indefinite\par
                        repeat block range.\par
\par
        The .irpc directive is available to permit single character sub-\par
        stition.  On each iteration of the indefinite repeat range,  the\par
        dummy  argument  is  replaced  with successive characters in the\par
        specified string.  \par
\page\par
\par
        THE MACRO PROCESSOR                                    PAGE 2-18\par
        INDEFINITE REPEAT BLOCK DIRECTIVES\par
\par
\par
        2.6  \cf2 REPEAT BLOCK DIRECTIVE\cf1  \par
\par
\par
           A repeat block is similar to a macro definition with only one\par
        argument.  The argument specifies the number of times the repeat\par
        block  is  inserted  into the assembly stream.  Since the repeat\par
        directive and its associated range are coded in-line within  the\par
        source program, this type of macro definition and expansion does\par
        not require calling the macro by name, as required in the expan-\par
        sion of the conventional macros previously described.  \par
\par
           A repeat block can appear within or outside another macro de-\par
        finition, indefinite repeat block, or repeat block.  \par
\par
\par
        2.6.1  \cf3 .rept \cf1 Directive \par
\par
\par
        Format:\par
        \par
            [label:]    .rept   exp\par
                        .\par
                        .\par
                    (range of repeat block)\par
                        .\par
                        .\par
                        .endm                   \par
        \par
        where:  label   represents an optional statement label.\par
        \par
                exp     represents any legal expression.\par
                        This value controls the number of\par
                        times the block of code is to be assembled\par
                        within the program.  When the expression\par
                        value is less than or equal to zero (0),\par
                        the repeat block is not assembled.  If\par
                        this value is not an absolute value, the\par
                        .rept directive is flagged with an <r>\par
                        error.\par
                        \par
                range   represents the block of code to be\par
                        repeated. The range may contain other\par
                        macro definitions, repeat ranges and/or\par
                        the .mexit directive.\par
        \par
                .endm   indicates the end of the repeat block\par
                        range.\par
\par
        The  .rept  directive  is  used  to duplicate a block of code, a\par
\page\par
\par
        THE MACRO PROCESSOR                                    PAGE 2-19\par
        REPEAT BLOCK DIRECTIVE\par
\par
\par
        certain number of times, in line with other source code.  \par
\par
\par
        2.7  \cf2 MACRO DELETION DIRECTIVE\cf1  \par
\par
\par
           The  .mdelete  directive  deletes  the definitions of the the\par
        specified macro(s).  \par
\par
\par
        2.7.1  \cf3 .mdelete \cf1 Directive \par
\par
\par
        Format:\par
        \par
                .mdelete        name1,name2,...,namen\par
        \par
        where:  name1,  represent legal macro names. When multiple\par
                name2,  names are specified, they are separated\par
                ...,    by any legal separator (comma, space, and/or\par
                namen   tab).\par
\par
\par
\par
        2.8  \cf2 MACRO INVOCATION DETAILS\cf1  \par
\par
\par
           The invocation of a macro, indefinite repeat block, or repeat\par
        block has specific implications for .if-.else-.endif  constructs\par
        and for .list-.nlist directives.  \par
\par
           At  the  point  a  macro,  indefinite repeat block, or repeat\par
        block is called the following occurs:  \par
\par
                1)      The initial .if-.else-.endif\par
                        state is saved.\par
        \par
                2)      The initial .list-.nlist\par
                        state is saved.\par
        \par
                3)      The macro, indefinite repeat block,\par
                        or repeat block is inserted into the\par
                        assembler source code stream.  All\par
                        argument substitution is performed\par
                        at this point.\par
\par
        When  the  macro  completes and after each pass through an inde-\par
        finite repeat block or repeat  block  the  .if-.else-.endif  and\par
        .list-.nlist state is reset to the initial state.  \par
\page\par
\par
        THE MACRO PROCESSOR                                    PAGE 2-20\par
        MACRO INVOCATION DETAILS\par
\par
\par
           The  reset of the .if-.else-.endif state means that the invo-\par
        cation of a macro, indefinite repeat block, or repeat block can-\par
        not  change the .if-.else-.endif state of the calling code.  For\par
        example the following code does not change the  .if-.else-.endif\par
        condition at macro completion:  \par
\par
        \par
                .macro  fnc     A\par
                  .if nb,^!A!\par
                    ...\par
                    .list (meb)\par
                    .mexit\par
                  .else\par
                    ...\par
                    .nlist\par
                    .mexit\par
                  .endif\par
                .endm\par
        \par
        code:   fnc\par
\par
\par
           Within the macro the .if condition becomes false but the con-\par
        dition is not propagated outside the macro.  \par
\par
           Similarly,  when  the  .list-.nlist state is changed within a\par
        macro the change is not propogated outside the macro.  \par
\par
           The  normal  .if-.else-.endif  processing verifies that every\par
        .if has a corresponding .endif.  When a macro, indefinite repeat\par
        block,  or repeat block terminates by using the .mexit directive\par
        the .if-.endif checking is bypassed  because  all  source  lines\par
        between the .mexit and .endm directives are skipped.  \par
\par
\par
        2.9  \cf2 CONTROLLING MACRO LISTINGS\cf1  \par
\par
\par
           The  basic  .list  directive enables listing of all fields in\par
        the assembler listing and clears the 'meb' and 'me' options.  \par
\par
           When  a  macro is entered the listing is by default inhibited\par
        unless the 'meb' (list only binary and location) or 'me' (enable\par
        listing) options have been specified.  The meb option clears all\par
        listing options and sets the 'bin' and 'loc' options.  The  'me'\par
        option simply enables any previously set listing options.  If no\par
        listing options have been set then a list 'me' option  will  not\par
        cause any listing.  \par
\par
\page\par
\par
        THE MACRO PROCESSOR                                    PAGE 2-21\par
        CONTROLLING MACRO LISTINGS\par
\par
\par
           Within  a  macro the .list/.nlist directives can set or clear\par
        any of the listing options but listing will only occur when  the\par
        'me' option is set.  \par
\par
\par
        2.10  \cf2 BUILDING A MACRO LIBRARY\cf1  \par
\par
\par
           Using  the macro facilities of the ASxxxx assemblers a simple\par
        macro library can be built.  The macro library is built by  com-\par
        bining individual macros, sets of macros, or include file direc-\par
        tives into a single file.  Each macro entity is enclosed  within\par
        a .if/.endif block that selects the desired macro definitions.  \par
\par
           The  selection of specific macros to be imported in a program\par
        is performed by three macros, .mlib, .mcall,  and  .mload,  con-\par
        tained in the file mlib.def.  \par
\par
\par
        2.10.1  .mlib Macro Directive \par
\par
\par
        Format:\par
        \par
                .mlib   file\par
        \par
        where:  file    represents the macro library file name.\par
                        If the file name does not include a path\par
                        then the path of the current assembly\par
                        file is used.  If the file name (and/or\par
                        path) contains white space then the\par
                        path/name must be delimited with the\par
                        up-arrow (^) construct ^/    /.\par
\par
        The .mlib directive defines two macros, .mcall and .mload, which\par
        when invoked will read a file, importing specific macro  defini-\par
        tions.   Any  previous  .mcall  and/or .mload directives will be\par
        deleted before the new .mcall and .mload directives are defined. \par
\par
           The  .mload  directive  is an internal directive which simply\par
        includes the macro library file with the listing disabled.  \par
\par
           The  following  is the mlib.def file which defines the macros\par
        .mlib, .mcall, and .mload.  \par
\par
\page\par
\par
        THE MACRO PROCESSOR                                    PAGE 2-22\par
        BUILDING A MACRO LIBRARY\par
\par
\par
        ;************************************************\par
        ;*                                              *\par
        ;*    A simple Macro Library Implementation     *\par
        ;*                                              *\par
        ;*              December 2008                   *\par
        ;*                                              *\par
        ;************************************************\par
        \par
        .macro .mlib    FileName\par
          .if b,^!FileName!\par
            .error 1    ; File Name Required\par
            .mexit\par
          .endif\par
          .mdelete      .mcall\par
          .macro        .mcall  a,b,c,d,e,f,g,h\par
            .irp sym    ^!a!,^!b!,^!c!,^!d!,^!e!,^!f!,^!g!,^!h!\par
              .iif nb,^!sym!    .define    .$$.'sym\par
            .endm\par
            .mload\par
            .irp sym    ^!a!,^!b!,^!c!,^!d!,^!e!,^!f!,^!g!,^!h!\par
              .if nb,^!sym!\par
                .iif ndef,sym'.$$.    .error  1  ; macro not found\par
                .undefine       .$$.'sym\par
                .undefine       sym'.$$.\par
              .endif\par
            .endm\par
          .endm ;.mcall\par
          .mdelete      .mload\par
          .macro        .mload\par
            .nlist\par
            .include ^!FileName!\par
            .list\par
          .endm ;.mload\par
        .endm   ;.mlib\par
\par
\par
        2.10.2  .mcall Macro Directive \par
\par
\par
        Format:\par
        \par
                .mcall  macro1,macro2,...,macro8\par
        \par
        where:\par
        \par
                macro1, represents from 1 to 8 macro library\par
                macro2, references to a macro definition or\par
                ...,    set of macro definitions included in\par
                macro8  the file specified with the .mlib macro.\par
\page\par
\par
        THE MACRO PROCESSOR                                    PAGE 2-23\par
        BUILDING A MACRO LIBRARY\par
\par
\par
\par
        As  can  be  seen  from the macro definition of .mlib and .mcall\par
        shown above, when .mcall is invoked temporary  symbols  are  de-\par
        fined  for  each macro or macro set that is to be imported.  The\par
        macro .mload is then invoked to  load  the  macro  library  file\par
        specified in the call to .mlib.  \par
\par
           For example, when the following macros are invoked:  \par
\par
                .mlib   crossasm.sml    ; Cross Assembler Macros\par
                .mcall  M6809           ; M6809 Macro Group\par
\par
        The  .mlib  macro  defines the .mload macro to access the system\par
        macro file crossasm.sml.  Invoking the .mcall  macro  creates  a\par
        temporary symbol, '.$$.M6809', and then invokes the macro .mload\par
        to import the system macro file crossasm.sml.   The  file  cros-\par
        sasm.sml  contains  conditional  statements  that define the re-\par
        quired macros and creates  a  temporary  symbol  'M6809.$$.'  to\par
        indicate  the  macro group was found.  If the macro is not found\par
        an error message is generated.  \par
\par
           The  following  is a small portion of the crossasm.sml system\par
        macro file which shows the M6809 macro group:  \par
\par
                .title  Cross Assembler Macro Library\par
        \par
                ; This MACRO Library is Case Insensitive.\par
                ;\par
        \par
                ...\par
        \par
        ; Macro Based 6809 Cross Assembler\par
        \par
        .$.SML.$. =: 0\par
        .if     idn     a,A\par
          .iif  def,.$$.m6809   .$.SML.$. = -1\par
        .else\par
          .iif  def,.$$.m6809   .$.SML.$. = -1\par
          .iif  def,.$$.M6809   .$.SML.$. =  1\par
        .endif\par
        .iif    lt,.$.SML.$.    .define         m6809.$$.\par
        .iif    gt,.$.SML.$.    .define         M6809.$$.\par
        .iif    ne,.$.SML.$.    .include        "m6809.mac"\par
        \par
                ...\par
        \par
\par
\par
\page\par
\par
        THE MACRO PROCESSOR                                    PAGE 2-24\par
        EXAMPLE MACRO CROSS ASSEMBLERS\par
\par
\par
        2.11  \cf2 EXAMPLE MACRO CROSS ASSEMBLERS\cf1  \par
\par
\par
           The  'ascheck'  subdirectory 'macroasm' contains 7 assemblers\par
        written using only the general macro processing facility of  the\par
        ASxxxx assemblers:  \par
\par
                i8085.mac       -  8085 Microprocessor\par
                m6800.mac       -  6800 Microprocessor\par
                m6801.mac       -  6801 Microprocessor\par
                m6804.mac       -  6804 Microprocessor\par
                m6805.mac       -  6805 Microprocessor\par
                m6809.mac       -  6809 Microprocessor\par
                s2650.mac       -  2650 Microprocessor\par
\par
\par
           These  absolute  macro  cross  assemblers are included to il-\par
        lustrate the  functionality  of  the  general  macro  processing\par
        facility  of  the ASxxxx assemblers.  In general they are useful\par
        examples of actual macro implementations.  \par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                    \cf2 CHAPTER 3\cf1\par
\par
                                   \cf2 THE LINKER\cf1\par
\par
\par
\par
\par
\par
        3.1  \cf2 ASLINK RELOCATING LINKER\cf1  \par
\par
\par
           ASLINK  is  the  companion  linker for the ASxxxx assemblers.\par
        The linker supports versions 3.xx, 4.xx, and 5.xx of the  ASxxxx\par
        assemblers.  Object files from version 3, 4, and 5 may be freely\par
        mixed while linking.  Note that version 3 object  files  contain\par
        only a subset of the options available in versions 4 and 5.  \par
\par
           The  program ASLINK is a general relocating linker performing\par
        the following functions:  \par
\par
             1.  Bind multiple object modules into a single memory image \par
\par
             2.  Resolve inter-module symbol references \par
\par
             3.  Combine  code  belonging to the same area from multiple\par
                 object files into a single contiguous memory region \par
\par
             4.  Search and import object module libraries for undefined\par
                 global variables \par
\par
             5.  Perform   byte   and   word  program  counter  relative\par
                 (pc or pcr) addressing calculations \par
\par
             6.  Define absolute symbol values at link time \par
\par
             7.  Define absolute area base address values at link time \par
\par
             8.  Produce Intel Hex, Motorola S, or Tandy CoCo Disk Basic\par
                 output files \par
\par
\page\par
\par
        THE LINKER                                              PAGE 3-2\par
        ASLINK RELOCATING LINKER\par
\par
\par
             9.  Produce a map of the linked memory image \par
\par
            10.  Produce  an updated listing file with the relocated ad-\par
                 dresses and data \par
\par
\par
\par
        3.2  \cf2 INVOKING ASLINK\cf1  \par
\par
\par
           Starting  ASlink without any arguments provides the following\par
        option list and then exits:  \par
\par
        Usage: [-Options] [-Option with arg] file\par
        Usage: [-Options] [-Option with arg] outfile file [file ...]\par
          -h   or NO ARGUMENTS  Show this help list\par
          -p   Echo commands to stdout (default)\par
          -n   No echo of commands to stdout\par
        Alternates to Command Line Input:\par
          -c                   ASlink >> prompt input\par
          -f   file[.lnk]      Command File input\par
        Librarys:\par
          -k   Library path specification, one per -k\par
          -l   Library file specification, one per -l\par
        Relocation:\par
          -b   area base address=expression\par
          -g   global symbol=expression\par
        Map format:\par
          -m   Map output generated as (out)file[.map]\par
          -m1    Linker generated symbols included in (out)file[.map]\par
          -w   Wide listing format for map file\par
          -x   Hexidecimal (default)\par
          -d   Decimal\par
          -q   Octal\par
        Output:\par
          -i   Intel Hex as (out)file[.i--]\par
          -i1    Legacy: start address record type set to 1\par
          -s   Motorola S Record as (out)file[.s--]\par
          -t   Tandy CoCo Disk BASIC binary as (out)file[.bi-]\par
          -j   NoICE Debug output as (out)file[.noi]\par
          -y   SDCDB Debug output as (out)file[.cdb]\par
          -o   Linked file/library object output enable (default)\par
          -v   Linked file/library object output disable\par
        List:\par
          -u   Update listing file(s) with link data as file(s)[.rst]\par
        Case Sensitivity:\par
          -z   Disable Case Sensitivity for Symbols\par
        End:\par
          -e   or null line terminates input\par
\page\par
\par
        THE LINKER                                              PAGE 3-3\par
        INVOKING ASLINK\par
\par
\par
\par
\par
\par
\par
                                      NOTE\par
\par
             When  ASlink  is  invoked  with  a single filename the\par
             created output file will have the same filename as the\par
             .rel file.  \par
\par
             When  ASlink  is  invoked  with multiple filenames the\par
             first filename is the output filename and the  remain-\par
             ing  filenames  are  linked  together  into the output\par
             filename.  \par
\par
\par
\par
\par
        Most  sytems  require  the  options to be entered on the command\par
        line:  \par
\par
        aslink [-Options] [-Options with args] file\par
        \par
        aslink [-Options] [-Options with args] outfile file1 [file2 ...]\par
\par
\par
        Some  systems  may  request  the  arguments  after the linker is\par
        started at a system specific prompt:  \par
\par
        aslink\par
        argv: -[options] -[options with args] file\par
        \par
        aslink\par
        argv: [-Options] [-Options with args] outfile file1 [file2 ...]\par
\par
\par
        The linker commands are explained in some more detail:  \par
\par
             1.  -h        or NO ARGUMENTS Show this help list \par
                 Simply prints the help list on stdout.  \par
\par
             2.  -c        ASlink >> prompt mode.  \par
                 The  ASlink >>  prompt  mode reads linker commands from\par
                 stdin.  \par
\par
             3.  -f file   Command file mode.  \par
                 The  command file mode imports linker commands from the\par
                 specified file (extension must be  .lnk),  imported  -c\par
                 and  -f  commands  are ignored.  If the directory path,\par
\page\par
\par
        THE LINKER                                              PAGE 3-4\par
        INVOKING ASLINK\par
\par
\par
                 for a file to be linked, is not specified in  the  com-\par
                 mand  file  then  the  path  defaults  to the .lnk file\par
                 directory path.  \par
\par
             4.  -p/-n     enable/disable echoing commands to stdout.  \par
\par
             5.  -i/-s/-t  Intel  Hex (file.i--), Motorola S (file.s--),\par
                 or Tandy Color Computer  Disk  Basic  (file.bi-)  image\par
                 output file.  \par
\par
             6.  -i1       Legacy:  start address record type set to 1 \par
                 Use the type 1 record to indicate the program start ad-\par
                 dress instead of record type 3.  Record type 1 was used\par
                 in some older tools.  \par
\par
             7.  -o/-v     Specifies      that     subsequent     linked\par
                 files/libraries will generate object  output  (default)\par
                 or  suppress  object  output.  (if option -i, -s, or -t\par
                 was specified) \par
\par
             8.  -z        Disable Case Sensitivity for Symbols \par
\par
             9.  -m        Generate  a  map  file (file.map).  This file\par
                 contains a list of the symbols (by area) with  absolute\par
                 addresses, sizes of linked areas, and other linking in-\par
                 formation.  \par
\par
            10.  -m1       Linker    generated   symbols   included   in\par
                 (out)file[.map] \par
                 The linker creates internal symbols for each area (area\par
                 segment) input during the linking process but  normally\par
                 suppresses  their  inclusion in the map file.  This op-\par
                 tion enables their inclusion in the map file.  \par
\par
            11.  -w        Specifies  that a wide listing format be used\par
                 for the map file.  \par
\par
            12.  -xdq      Specifies  the  number radix for the map file\par
                 (Hexidecimal, Decimal, or Octal).  \par
\par
            13.  -u        Generate  an  updated listing file (file.rst)\par
                 derived from the relocated addresses and data from  the\par
                 linker  and  the hint file (file.hlr) output by the as-\par
                 sembler.  \par
\par
            14.  file      File(s)  to  be  linked.  Files may be on the\par
                 same line as the above options or on a separate line(s)\par
                 one file per line or multiple files separated by spaces\par
                 or tabs.  \par
\page\par
\par
        THE LINKER                                              PAGE 3-5\par
        INVOKING ASLINK\par
\par
\par
            15.  -b  area=expression \par
                 (one definition per line in a linker command file.) \par
                 This  specifies  an area base address where the expres-\par
                 sion may contain constants and/or defined symbols  from\par
                 the linked files.  \par
\par
            16.  -g  symbol=expression \par
                 (one definition per line in a linker command file.) \par
                 This  specifies  the value for the symbol where the ex-\par
                 pression may contain constants and/or  defined  symbols\par
                 from the linked files.  \par
\par
            17.  -k  library directory path \par
                 (one definition per line in a linker command file.) \par
                 This  specifies one possible path to an object library.\par
                 More than one path is allowed.  \par
\par
            18.  -l  library file specification \par
                 (one definition per line in a linker command file.) \par
                 This  specifies a possible library file.  More than one\par
                 file is allowed.  \par
\par
            19.  -e  or null line, terminates input to the linker.  \par
\par
\par
\par
        3.3  \cf2 LIBRARY PATH(S) AND FILE(S)\cf1  \par
\par
\par
           The process of resolving undefined symbols after scanning the\par
        input object  files  includes  the  scanning  of  object  module\par
        libraries.   The  linker will search through all combinations of\par
        the library path specifications (input by the -k option) and the\par
        library  file  specifications (input by the -l option) that lead\par
        to an existing library file.  Each library file contains a  list\par
        (one  file  per  line)  of  modules  included in this particular\par
        library.  Each existing object module is scanned for a match  to\par
        the undefined symbol.  The first module containing the symbol is\par
        then linked with the previous modules to resolve the symbol  de-\par
        finition.   The  library  object  modules are rescanned until no\par
        more symbols can be resolved.   The  scanning  algorithm  allows\par
        resolution  of  back references.  No errors are reported for non\par
        existant library files or object modules.  \par
\par
           The  library  file  specification may be formed in one of two\par
        ways:  \par
\par
\page\par
\par
        THE LINKER                                              PAGE 3-6\par
        LIBRARY PATH(S) AND FILE(S)\par
\par
\par
             1.  If  the  library  file  contained an absolute path/file\par
                 specification  then  this  is   the   object   module's\par
                 path/file.  \par
                 (i.e.  C:\\...  or C:/...) \par
\par
             2.  If  the  library  file  contains  a  relative path/file\par
                 specification then the concatenation of  the  path  and\par
                 this  file  specification  becomes  the object module's\par
                 path/file.  \par
                 (i.e.  \\...  or /...) \par
\par
\par
           As  an example, assume there exists a library file termio.lib\par
        in the syslib directory specifying the following object modules: \par
\par
        \\6809\\io_disk        first object module \par
        d:\\special\\io_comm   second object module \par
\par
        and the following parameters were specified to the linker:  \par
\par
        -k c:\\iosystem\\    the first path \par
        -k c:\\syslib\\      the second path \par
\par
        -l termio          the first library file \par
        -l io              the second library file (no such file) \par
\par
        The  linker  will attempt to use the following object modules to\par
        resolve any undefined symbols:  \par
\par
        c:\\syslib\\6809\\io_disk.rel     (concatenated path/file) \par
        d:\\special\\io_comm.rel         (absolute path/file) \par
\par
        all  other path(s)/file(s) don't exist.  (No errors are reported\par
        for non existant path(s)/file(s).) \par
\par
\par
        3.4  \cf2 ASLINK PROCESSING\cf1  \par
\par
\par
           The  linker  processes  the  files  in  the  order  they  are\par
        presented.  The first pass through the input files  is  used  to\par
        define  all  program  areas, the section area sizes, and symbols\par
        defined or referenced.  Undefined symbols will initiate a search\par
        of any specified library file(s) and the importing of the module\par
        containing the symbol definition.  After the first pass  the  -b\par
        (area  base  address) definitions, if any, are processed and the\par
        areas linked.  \par
\par
\page\par
\par
        THE LINKER                                              PAGE 3-7\par
        ASLINK PROCESSING\par
\par
\par
           The  area  linking proceeds by first examining the area types\par
        ABS, CON, REL, OVR and PAG.  Absolute areas (ABS) from  separate\par
        object modules are always overlayed and have been assembled at a\par
        specific address, these are not normally relocated (if a -b com-\par
        mand  is  used  on an absolute area the area will be relocated).\par
        Relative areas (normally defined as REL|CON) have a base address\par
        of  0x0000  as read from the object files, the -b command speci-\par
        fies the beginning address of the area.  All subsequent relative\par
        areas  will  be  concatenated  with  preceeding  relative areas.\par
        Where specific ordering is desired, the first linker input  file\par
        should  have  the area definitions in the desired order.  At the\par
        completion of the area linking all area  addresses  and  lengths\par
        have  been determined.  The areas of type PAG are verified to be\par
        on a 256 byte boundary and that the length does not  exceed  256\par
        bytes.  Any errors are noted on stderr and in the map file.  \par
\par
        The  linker  also  automatically  generates two symbols for each\par
        linked program area:  \par
\par
            'a_<area>'      The starting address of the area.  \par
\par
            'l_<area>'      The length of the area.  \par
\par
        and two symbols for each area segment:  \par
\par
            'm_<area>_n'    The boundary modulus of the area segment.  \par
\par
            's_<area>_n'    The starting address of the area segment.  \par
\par
        The  appended  '_n'  signifies  the area segment number within a\par
        linked area.  \par
\par
           These  symbols  are in general only useful diagnostically and\par
        are not visible externally.  However if the -m1 linker option is\par
        used these symbols will be output to the map file.  \par
\par
           Next  the  global symbol definitions (-g option), if any, are\par
        processed.  The symbol definitions have been delayed until  this\par
        point because the absolute addresses of all internal symbols are\par
        known and can be used in the expression calculations.  \par
\par
           Before  continuing  with the linking process the symbol table\par
        is scanned to determine if any symbols have been referenced  but\par
        not defined.  Undefined symbols are listed on the stderr device.\par
        if a .module directive was included in the  assembled  file  the\par
        module  making  the reference to this undefined variable will be\par
        printed.  \par
\par
\page\par
\par
        THE LINKER                                              PAGE 3-8\par
        ASLINK PROCESSING\par
\par
\par
           Constants  defined  as global in more than one module will be\par
        flagged as multiple definitions if their values are not  identi-\par
        cal.  \par
\par
           After  the  preceeding  processes are complete the linker may\par
        output a map file (-m option).  This file provides the following\par
        information:  \par
\par
             1.  Global symbol values and label absolute addresses \par
\par
             2.  Defined areas and there lengths \par
\par
             3.  Remaining undefined symbols \par
\par
             4.  List of modules linked \par
\par
             5.  List of library modules linked \par
\par
             6.  List of -b and -g definitions \par
\par
\par
\par
\par
           The final step of the linking process is performed during the\par
        second pass of the input files.  As the xxx.rel files  are  read\par
        the code is relocated by substituting the physical addresses for\par
        the referenced symbols and areas and may  be  output  in  Intel,\par
        Motorola, or Tandy CoCo Disk Basic formats.  The number of files\par
        linked and symbols defined/referenced is limited by the  proces-\par
        sor  space  available to build the area/symbol lists.  If the -u\par
        option is specified then the listing files (file.lst) associated\par
        with  the  relocation  files  (file.rel) are scanned and used to\par
        create a new file (file.rst) which has all  addresses  and  data\par
        relocated to their final values.  \par
\par
           The  -o/-v  options  allow the simple creation of loadable or\par
        overlay modules.  Loadable and overlay modules normally need  to\par
        be  linked  with  a  main module(s) to resolve external symbols.\par
        The -o/-v options can be used to enable object  output  for  the\par
        loadable  or overlay module(s) and suppress the object code from\par
        the linked main module(s).  The -o/-v  options  can  be  applied\par
        repeatedly  to specify a single linked file, groups of files, or\par
        libraries for object code inclusion or suppression.  \par
\page\par
\par
        THE LINKER                                              Page 3-9\par
        ASXXXX VERSION 5.XX (4.XX) LINKING\par
\par
\par
        3.5  \cf2 ASXXXX VERSION 5.XX (4.XX) LINKING\cf1  \par
\par
\par
           The  linkers'  input  object file is an ascii file containing\par
        the information needed by the linker  to  bind  multiple  object\par
        modules into a complete loadable memory image.  \par
\par
        The object module contains the following designators:  \par
\par
                [XDQ][HL][234]\par
                        X       Hexidecimal radix\par
                        D       Decimal radix\par
                        Q       Octal radix\par
        \par
                        H       Most significant byte first\par
                        L       Least significant byte first\par
        \par
                        2       16-Bit Addressing\par
                        3       24-Bit Addressing\par
                        4       32-Bit Addressing\par
        \par
                H       Header \par
                M       Module\par
                G       Merge Mode\par
                B       Bank\par
                A       Area\par
                S       Symbol\par
                T       Object code\par
                R       Relocation information\par
                P       Paging information\par
\par
\par
        3.5.1  Object Module Format \par
\par
\par
           The   first   line   of   an   object   module  contains  the\par
        [XDQ][HL][234] format specifier  (i.e.   XH2  indicates  a  hex-\par
        idecimal  file  with  most significant byte first and 16-bit ad-\par
        dressing) for the following designators.  \par
\par
\par
\page\par
\par
        THE LINKER                                             PAGE 3-10\par
        ASXXXX VERSION 5.XX (4.XX) LINKING\par
\par
\par
        3.5.2  Header Line \par
\par
                H aa areas gg global symbols \par
\par
           The  header  line  specifies  the number of areas(aa) and the\par
        number of global symbols(gg) defined or referenced in  this  ob-\par
        ject module segment.  \par
\par
\par
        3.5.3  Module Line \par
\par
                M name \par
\par
           The  module  line  specifies  the module name from which this\par
        header segment was assembled.  The module line will  not  appear\par
        if the .module directive was not used in the source program.  \par
\par
\par
        3.5.4  Merge Mode Line \par
\par
                G nn ii 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F \par
\par
           The  mode  structure  contains  the specification (or partial\par
        specification) of one of the assemblers' merge  modes.   Sixteen\par
        bits  may  be  specified  on a single line.  Each assembler must\par
        specify at least one merge mode.  The merging specification  al-\par
        lows  arbitrarily defined active bits and bit positions.  The 32\par
        element arrays are indexed from 0 to 31.  Index 0 corresponds to\par
        bit  0,  ...,  and  31 corresponds to bit 31 of a normal integer\par
        value.  \par
\par
             1.   nn is merge mode number \par
\par
             2.   ii is the beginning bit position of the following data \par
\par
             3.   00 ...  merge mode bit elements \par
\par
\par
                    The value of the element specifies if the normal in-\par
                    teger bit is active (bit <7> is set, 0x80) and  what\par
                    destination  bit  (bits  <4:0>,  0  -  31) should be\par
                    loaded with this normal integer bit.  \par
\par
\par
\page\par
\par
        THE LINKER                                             PAGE 3-11\par
        ASXXXX VERSION 5.XX (4.XX) LINKING\par
\par
\par
        3.5.5  Bank Line \par
\par
                B name base nn size nn map nn flags nn fsfx string \par
\par
           The  B  line  defines a bank identifier as name.  A bank is a\par
        structure containing a collection of areas.  The bank is treated\par
        as  a  unique linking structure seperate from other banks.  Each\par
        bank can have a unique base  address  (starting  address).   The\par
        size  specification  may  be  used to signal the overflow of the\par
        banks' allocated space.  The Linker combines all areas  included\par
        within  a  bank  as  seperate from other areas.  The code from a\par
        bank may be output to a unique file by specifying the File  Suf-\par
        fix  parameter  (fsfx).   This allows the seperation of multiple\par
        data and code segments into  isolated  output  files.   The  map\par
        parameter  is  for  NOICE processing.  The flags indicate if the\par
        parameters have been set.  \par
\par
\par
        3.5.6  Area Line \par
\par
                A label size ss flags ff [bank bb] [bndry mm] \par
\par
           The  area  line  defines the area label, the size (ss) of the\par
        area in bytes, the area  flags  (ff),  the  optional  [bank  bb]\par
        specifies  the  bank  this area is a member of, and the optional\par
        [bndry mm] which specifies the boundary modulus  for  this  area\par
        segment.  The area flags specify the ABS, REL, CON, OVR, and PAG\par
        parameters:  \par
\par
                OVR/CON  (0x04/0x00 i.e.  bit position 2) \par
\par
                ABS/REL  (0x08/0x00 i.e.  bit position 3) \par
\par
                PAG      (0x10 i.e.  bit position 4) \par
\par
           The  bank label is optional and only specified if the area is\par
        to be included within a bank.  \par
\par
           When  this area (area segment) is linked and their is a boun-\par
        dary modulus specified then the code/data beginning address will\par
        be  increased to match the boundary modulus.  This will also in-\par
        crease the area (area segment) size by the same amount.  \par
\par
\par
\page\par
\par
        THE LINKER                                             PAGE 3-12\par
        ASXXXX VERSION 5.XX (4.XX) LINKING\par
\par
\par
        3.5.7  Symbol Line \par
\par
                S name Defnnnn \par
\par
                        or \par
\par
                S name Refnnnn \par
\par
           The symbol line defines (Def) or references (Ref) the identi-\par
        fier name with the value nnnn.  The defined value is relative to\par
        the  current area base address.  References to constants and ex-\par
        ternal global symbols will always appear before the  first  area\par
        definition.  References to external symbols will have a value of\par
        zero.  \par
\par
\par
        3.5.8  T Line \par
\par
                T xx xx nn nn nn nn nn ...  \par
\par
           The  T  line contains the assembled code output by the assem-\par
        bler with xx xx being the offset address from the  current  area\par
        base address and nn being the assembled instructions and data in\par
        byte format.  (xx xx and nn nn can be 2, 3, or 4 bytes as speci-\par
        fied by the .REL file header.) \par
\par
\par
        3.5.9  R Line \par
\par
                R 0 0 nn nn n1 n2 xx xx ...  \par
\par
           The R line provides the relocation information to the linker.\par
        The nn nn value is the current area index, i.e.  which area  the\par
        current  values  were  assembled.  Relocation information is en-\par
        coded in groups of 4 bytes:  \par
\par
             1.  n1 is the relocation mode and object format.  \par
                 1.  bits <1:0> specify the number of bytes to output \par
                 2.  bits <2:3> normal(0x00) /   MSB   (0x0C) \par
                                signed(0x04) / unsigned(0x08) \par
                 3.  bit 4  normal(0x00)/page   '0' (0x10) reference \par
                 4.  bit 5  normal(0x00)/page 'nnn' (0x20) reference \par
                            PAGX mode if both bits are set (0x30) \par
                 5.  bit 6  normal(0x00)/PC relative(0x40) relocation \par
                 6.  bit 7  relocatable area(0x00)/symbol(0x80) \par
\par
             2.  n2 is a byte index and a merge mode index \par
\page\par
\par
        THE LINKER                                             PAGE 3-13\par
        ASXXXX VERSION 5.XX (4.XX) LINKING\par
\par
\par
                 1.  bits <3:0>  are a byte index into the corresponding\par
                     (i.e.  preceeding) T line data (i.e.  a pointer  to\par
                     the data to be updated by the relocation).  \par
                 2.  bits <7:4> are an index into a selected merge mode.\par
                     Currently mode 0 simply specifies to  use  standard\par
                     byte processing modes and merging is ignored.  \par
\par
             3.  xx xx  is the area/symbol index for the area/symbol be-\par
                 ing referenced.  the corresponding area/symbol is found\par
                 in the header area/symbol lists.  \par
\par
\par
        The groups of 4 bytes are repeated for each item requiring relo-\par
        cation in the preceeding T line.  \par
\par
\par
        3.5.10  P Line \par
\par
                P 0 0 nn nn n1 n2 xx xx \par
\par
           The  P  line provides the paging information to the linker as\par
        specified by a .setdp directive.  The format of  the  relocation\par
        information is identical to that of the R line.  The correspond-\par
        ing T line has the following information:  \par
                T xx xx aa aa bb bb \par
\par
           Where  aa aa is the area reference number which specifies the\par
        selected page area and bb bb is the base address  of  the  page.\par
        bb bb will require relocation processing if the 'n1 n2 xx xx' is\par
        specified in the P line.  The linker will verify that  the  base\par
        address is on a 256 byte boundary and that the page length of an\par
        area defined with the PAG type is not larger than 256 bytes.  \par
\par
           The  linker  defaults any direct page references to the first\par
        area defined in the input REL file.  All ASxxxx assemblers  will\par
        specify the _CODE area first, making this the default page area. \par
\par
\par
\page\par
\par
        THE LINKER                                             PAGE 3-14\par
        ASXXXX VERSION 5.XX (4.XX) LINKING\par
\par
\par
        3.5.11  24-Bit and 32-Bit Addressing \par
\par
\par
           When  24-bit  or  32-bit  addressing is specified in the file\par
        format line [XDQ][HL][234] then the S and T Lines have  modified\par
        formats:  \par
                S name Defnnnnnn                        (24-bit)\par
                S name Refnnnnnn                        (24-bit)\par
                T xx xx xx nn nn nn nn nn ...           (24-bit)\par
        \par
                S name Defnnnnnnnn                      (32-bit)\par
                S name Refnnnnnnnn                      (32-bit)\par
                T xx xx xx xx nn nn nn nn nn ...        (32-bit)\par
\par
           The  multibyte  formats for byte data replace the 2-byte form\par
        for 16-bit data with 3-byte or 4-byte data for 24-bit or  32-bit\par
        data  respectively.  The 2nd byte format (also named MSB) always\par
        uses the second byte of the 2, 3, or 4-byte data.  \par
\par
\par
        3.5.12  ASlink V5.xx (V4.xx) Error Messages \par
\par
\par
           The linker provides detailed error messages allowing the pro-\par
        grammer to quickly find the errant code.   As  the  linker  com-\par
        pletes  pass 1  over  the  input  file(s)  it  reports  any page\par
        boundary or page length errors as follows:  \par
\par
        ?ASlink-Warning-Paged Area PAGE0 Boundary Error\par
        \par
        and/or\par
        \par
        ?ASlink-Warning-Paged Area PAGE0 Length Error\par
\par
        where PAGE0 is the paged area.  \par
\par
           Also  during  Pass   1  any bank size (length) errors will be\par
        reported as follows:  \par
\par
        ?ASlink-Warning-Size limit exceeded in bank BANK\par
        where BANK is the bank name.  \par
\par
           During  Pass  two the linker reads the T, R, and P lines per-\par
        forming the necessary relocations and  outputting  the  absolute\par
        code.  Various errors may be reported during this process \par
\page\par
\par
        THE LINKER                                             PAGE 3-15\par
        ASXXXX VERSION 5.XX (4.XX) LINKING\par
\par
\par
        The P line processing can produce only one possible error:  \par
\par
        ?ASlink-Warning-Page Definition Boundary Error\par
                 file        module      pgarea    pgoffset\par
          PgDef  t6809l      t6809l      PAGE0         0001\par
\par
        The error message specifies the file and module where the .setdp\par
        direct was issued and indicates  the  page  area  and  the  page\par
        offset value determined after relocation.  \par
\par
\par
        The R line processing produces various error messages:  \par
\par
        ?ASlink-Warning-Signed value error\par
        ?ASlink-Warning-Unsigned value error\par
        ?ASlink-Warning-Byte PCR relocation error\par
        ?ASlink-Warning-Word PCR relocation error\par
        ?ASlink-Warning-3-Byte PCR relocation error\par
        ?ASlink-Warning-4-Byte PCR relocation error\par
        ?ASlink-Warning-Page0 relocation error\par
        ?ASlink-Warning-PageN relocation error\par
        ?ASlink-Warning-PageX relocation error\par
        ?ASlink-Warning-Signed Merge Bit Range error\par
        ?ASlink-Warning-Unsigned/Overflow Merge Bit Range error\par
\par
        These  error  messages  also specify the file, module, area, and\par
        offset within the area of the code referencing (Refby)  and  de-\par
        fining (Defin) the symbol:  \par
\par
        ?ASlink-Warning-Signed value error for symbol  two56\par
                 file        module      area        offset\par
          Refby  t           Pagetest    PROGRAM     0006\par
          Defin  t           Pagetest    DIRECT      0100\par
\par
        If the symbol is defined in the same module as the reference the\par
        linker is unable to report the symbol name.  The assembler list-\par
        ing  file(s) should be examined at the offset from the specified\par
        area to locate the offending code.  \par
\par
           The errors are:  \par
\par
             1.  The  Signed value error indicates an indexing value ex-\par
                 ceeded the maximum negative or maximum  positive  value\par
                 for the current variable size.  \par
\par
             2.  The  Unsigned  value  error indicates an indexing value\par
                 was greater than maximum positive value for the current\par
                 variable size.  \par
\par
\page\par
\par
        THE LINKER                                             PAGE 3-16\par
        ASXXXX VERSION 5.XX (4.XX) LINKING\par
\par
\par
             3.  The  byte PCR error is caused by exceeding the pc rela-\par
                 tive byte branch range.  \par
\par
             4.  The  word PCR error is caused by exceeding the pc rela-\par
                 tive word branch range.  \par
\par
             5.  The  3-byte PCR error is caused by exceeding the pc re-\par
                 lative 3-byte branch range.  \par
\par
             6.  The  4-byte PCR error is caused by exceeding the pc re-\par
                 lative 4-byte branch range.  \par
\par
             7.  The  Page0  error is generated if the direct page vari-\par
                 able is not in the page0 range of 0 to 255.  \par
\par
             8.  The  PageN  error is generated if the direct page vari-\par
                 able is not within the Nth page range of 0 to 255.  \par
\par
             9.  The  PageX  error is generated if the direct page vari-\par
                 able is not within the extended page range.  \par
\par
            10.  The  Signed Merge Bit Range error indicates an indexing\par
                 value exceeded the maximum negative or maximum positive\par
                 value for the current signed merge variable size.  \par
\par
            11.  The  Unsigned/Overflow  Merge Bit Range error indicates\par
                 an indexing value was  greater  than  maximum  positive\par
                 value for the current unsigned merge variable size.  \par
\par
\page\par
\par
        THE LINKER                                             Page 3-17\par
        ASXXXX VERSION 3.XX LINKING\par
\par
\par
        3.6  \cf2 ASXXXX VERSION 3.XX LINKING\cf1  \par
\par
\par
           The  linkers'  input  object file is an ascii file containing\par
        the information needed by the linker  to  bind  multiple  object\par
        modules into a complete loadable memory image.  \par
\par
        The object module contains the following designators:  \par
\par
                [XDQ][HL][234]\par
                        X       Hexidecimal radix\par
                        D       Decimal radix\par
                        Q       Octal radix\par
        \par
                        H       Most significant byte first\par
                        L       Least significant byte first\par
        \par
                        2       16-Bit Addressing\par
                        3       24-Bit Addressing\par
                        4       32-Bit Addressing\par
        \par
                H       Header \par
                M       Module\par
                A       Area\par
                S       Symbol\par
                T       Object code\par
                R       Relocation information\par
                P       Paging information\par
\par
\par
        3.6.1  Object Module Format \par
\par
\par
           The   first   line   of   an   object   module  contains  the\par
        [XDQ][HL][234] format specifier  (i.e.   XH2  indicates  a  hex-\par
        idecimal  file  with  most significant byte first and 16-bit ad-\par
        dressing) for the following designators.  \par
\par
\par
\page\par
\par
        THE LINKER                                             PAGE 3-18\par
        ASXXXX VERSION 3.XX LINKING\par
\par
\par
        3.6.2  Header Line \par
\par
                H aa areas gg global symbols \par
\par
           The  header  line  specifies  the number of areas(aa) and the\par
        number of global symbols(gg) defined or referenced in  this  ob-\par
        ject module segment.  \par
\par
\par
        3.6.3  Module Line \par
\par
                M name \par
\par
           The  module  line  specifies  the module name from which this\par
        header segment was assembled.  The module line will  not  appear\par
        if the .module directive was not used in the source program.  \par
\par
\par
        3.6.4  Area Line \par
\par
                A label size ss flags ff \par
\par
           The  area  line  defines the area label, the size (ss) of the\par
        area in bytes, and the area flags (ff).  The area flags  specify\par
        the ABS, REL, CON, OVR, and PAG parameters:  \par
\par
                OVR/CON  (0x04/0x00 i.e.  bit position 2) \par
\par
                ABS/REL  (0x08/0x00 i.e.  bit position 3) \par
\par
                PAG      (0x10 i.e.  bit position 4) \par
\par
\par
        3.6.5  Symbol Line \par
\par
                S name Defnnnn \par
\par
                        or \par
\par
                S name Refnnnn \par
\par
           The symbol line defines (Def) or references (Ref) the identi-\par
        fier name with the value nnnn.  The defined value is relative to\par
        the  current area base address.  References to constants and ex-\par
        ternal global symbols will always appear before the  first  area\par
        definition.  References to external symbols will have a value of\par
        zero.  \par
\par
\par
\page\par
\par
        THE LINKER                                             PAGE 3-19\par
        ASXXXX VERSION 3.XX LINKING\par
\par
\par
        3.6.6  T Line \par
\par
                T xx xx nn nn nn nn nn ...  \par
\par
           The  T  line contains the assembled code output by the assem-\par
        bler with xx xx being the offset address from the  current  area\par
        base address and nn being the assembled instructions and data in\par
        byte format.  \par
\par
\par
        3.6.7  R Line \par
\par
                R 0 0 nn nn n1 n2 xx xx ...  \par
\par
           The R line provides the relocation information to the linker.\par
        The nn nn value is the current area index, i.e.  which area  the\par
        current  values  were  assembled.  Relocation information is en-\par
        coded in groups of 4 bytes:  \par
\par
             1.  n1  is  the  relocation mode and object format, for the\par
                 adhoc extension modes refer to asxxxx.h or aslink.h \par
                 1.  bit 0  word(0x00)/byte(0x01) \par
                 2.  bit 1  relocatable area(0x00)/symbol(0x02) \par
                 3.  bit 2  normal(0x00)/PC relative(0x04) relocation \par
                 4.  bit 3  1-byte(0x00)/2-byte(0x08) object format \par
                 5.  bit 4  signed(0x00)/unsigned(0x10) byte data \par
                 6.  bit 5  normal(0x00)/page   '0'(0x20) reference \par
                 7.  bit 6  normal(0x00)/page 'nnn'(0x40) reference \par
                 8.  bit 7  LSB byte(0x00)/MSB byte(0x80) \par
\par
             2.  n2  is  a byte index into the corresponding (i.e.  pre-\par
                 ceeding) T line data (i.e.  a pointer to the data to be\par
                 updated  by  the  relocation).   The T line data may be\par
                 1-byte or  2-byte  byte  data  format  or  2-byte  word\par
                 format.  \par
\par
             3.  xx xx  is the area/symbol index for the area/symbol be-\par
                 ing referenced.  the corresponding area/symbol is found\par
                 in the header area/symbol lists.  \par
\par
\par
        The groups of 4 bytes are repeated for each item requiring relo-\par
        cation in the preceeding T line.  \par
\par
\par
\page\par
\par
        THE LINKER                                             PAGE 3-20\par
        ASXXXX VERSION 3.XX LINKING\par
\par
\par
        3.6.8  P Line \par
\par
                P 0 0 nn nn n1 n2 xx xx \par
\par
           The  P  line provides the paging information to the linker as\par
        specified by a .setdp directive.  The format of  the  relocation\par
        information is identical to that of the R line.  The correspond-\par
        ing T line has the following information:  \par
                T xx xx aa aa bb bb \par
\par
           Where  aa aa is the area reference number which specifies the\par
        selected page area and bb bb is the base address  of  the  page.\par
        bb bb will require relocation processing if the 'n1 n2 xx xx' is\par
        specified in the P line.  The linker will verify that  the  base\par
        address is on a 256 byte boundary and that the page length of an\par
        area defined with the PAG type is not larger than 256 bytes.  \par
\par
           The  linker  defaults any direct page references to the first\par
        area defined in the input REL file.  All ASxxxx assemblers  will\par
        specify the _CODE area first, making this the default page area. \par
\par
\par
        3.6.9  24-Bit and 32-Bit Addressing \par
\par
\par
           When  24-bit  or  32-bit  addressing is specified in the file\par
        format line [XDQ][HL][234] then the S and T Lines have  modified\par
        formats:  \par
                S name Defnnnnnn                        (24-bit)\par
                S name Refnnnnnn                        (24-bit)\par
                T xx xx xx nn nn nn nn nn ...           (24-bit)\par
        \par
                S name Defnnnnnnnn                      (32-bit)\par
                S name Refnnnnnnnn                      (32-bit)\par
                T xx xx xx xx nn nn nn nn nn ...        (32-bit)\par
\par
           The  multibyte  formats for byte data replace the 2-byte form\par
        for 16-bit data with 3-byte or 4-byte data for 24-bit or  32-bit\par
        data  respectively.  The 2nd byte format (also named MSB) always\par
        uses the second byte of the 2, 3, or 4-byte data.  \par
\par
\par
\page\par
\par
        THE LINKER                                             PAGE 3-21\par
        ASXXXX VERSION 3.XX LINKING\par
\par
\par
        3.6.10  ASlink V3.xx Error Messages \par
\par
\par
           The linker provides detailed error messages allowing the pro-\par
        grammer to quickly find the errant code.   As  the  linker  com-\par
        pletes  pass 1  over  the  input  file(s)  it  reports  any page\par
        boundary or page length errors as follows:  \par
\par
        ?ASlink-Warning-Paged Area PAGE0 Boundary Error\par
        \par
        and/or\par
        \par
        ?ASlink-Warning-Paged Area PAGE0 Length Error\par
\par
        where PAGE0 is the paged area.  \par
\par
           During  Pass  two the linker reads the T, R, and P lines per-\par
        forming the necessary relocations and  outputting  the  absolute\par
        code.  Various errors may be reported during this process \par
        The P line processing can produce only one possible error:  \par
\par
        ?ASlink-Warning-Page Definition Boundary Error\par
                 file        module      pgarea      pgoffset\par
          PgDef  t6809l      t6809l      PAGE0       0001\par
\par
        The error message specifies the file and module where the .setdp\par
        direct was issued and indicates  the  page  area  and  the  page\par
        offset value determined after relocation.  \par
\par
\par
        The R line processing produces various errors:  \par
\par
        ?ASlink-Warning-Byte PCR relocation error for symbol  bra2\par
        ?ASlink-Warning-Unsigned Byte error for symbol  two56\par
        ?ASlink-Warning-Page0 relocation error for symbol  ltwo56\par
        ?ASlink-Warning-Page Mode relocation error for symbol  two56\par
        ?ASlink-Warning-Page Mode relocation error\par
        ?ASlink-Warning-2K Page relocation error\par
        ?ASlink-Warning-512K Page relocation error\par
\par
        These  error  messages  also specify the file, module, area, and\par
        offset within the area of the code referencing (Refby)  and  de-\par
        fining (Defin) the symbol:  \par
\par
        ?ASlink-Warning-Unsigned Byte error for symbol  two56\par
                 file        module      area        offset\par
          Refby  t6800l      t6800l      DIRECT      0015\par
          Defin  tconst      tconst      .  .ABS.    0100\par
\par
\page\par
\par
        THE LINKER                                             PAGE 3-22\par
        ASXXXX VERSION 3.XX LINKING\par
\par
\par
        If the symbol is defined in the same module as the reference the\par
        linker is unable to report the symbol name.  The assembler list-\par
        ing  file(s) should be examined at the offset from the specified\par
        area to locate the offending code.  \par
\par
           The errors are:  \par
\par
             1.  The  byte PCR error is caused by exceeding the pc rela-\par
                 tive byte branch range.  \par
\par
             2.  The Unsigned byte error indicates an indexing value was\par
                 negative or larger than 255.  \par
\par
             3.  The  Page0  error is generated if the direct page vari-\par
                 able is not in the page0 range of 0 to 255.  \par
\par
             4.  The page mode error is generated if the direct variable\par
                 is not within the current direct page (6809).  \par
\par
             5.  The  2K  Page  relocation  error  is  generated  if the\par
                 destination is not within the current  2K  page  (8051,\par
                 DS8xCxxx).  \par
\par
             6.  The  512K  Page  relocation  error  is generated if the\par
                 destination  is  not  within  the  current  512K   page\par
                 (DS80C390).  \par
\par
\page\par
\par
        THE LINKER                                             Page 3-23\par
        HINT FILE FORMAT FOR RELOCATED LISTINGS\par
\par
\par
        3.7  \cf2 HINT FILE FORMAT FOR RELOCATED LISTINGS\cf1  \par
\par
\par
           The hint file is an ascii file containing information to help\par
        the linker convert the listing file  into  a  relocated  listing\par
        file.  Each line in the .hlr file coresponds to a single line in\par
        the listing file.  The text line usually contains 3 or 4 parame-\par
        ters  in  the  radix  selected for the assembler as shown in the\par
        following table:  \par
\par
        Line Position:  123456789012\par
                        ------------\par
        Octal:           111 222 333\par
        Decimal:         111 222 333\par
        Hex:             11 22 33\par
        \par
        Parameter 1 specifies the parameters listed in the line.\par
        A bit is set for each listing option enabled during the\par
        assembly of the line.\par
        \par
                BIT 0   - LIST_ERR      Error Code(s)\par
                BIT 1   - LIST_LOC      Location\par
                BIT 2   - LIST_BIN      Generated Binary Value(s)\par
                BIT 3   - LIST_EQT      Assembler Equate Value\par
                BIT 4   - LIST_CYC      Opcode Cycles\par
                BIT 5   - LIST_LIN      Line Numbers\par
                BIT 6   - LIST_SRC      Assembler Source Code\par
                BIT 7   - HLR_NLST      Listing Inhibited\par
        \par
        Parameter 2 is the internal assembler listing mode\par
        value specified for this line during the assembly process:\par
        \par
                0 - NLIST       No listing\par
                1 - SLIST       Source only\par
                2 - ALIST       Address only\par
                3 - BLIST       Address only with allocation\par
                4 - CLIST       Code\par
                5 - ELIST       Equate only\par
                6 - ILIST       IF conditional evaluation\par
        \par
        Parameter 3 is the number of output bytes listed\par
        for this line.\par
\par
           The  4th  parameter  is only output if an equate references a\par
        value in a different area.  The area name is output in the  fol-\par
        lowing format following the 3 parameters described above:  \par
\par
        Line Position:  123456789012\par
                        ------------\par
\page\par
\par
        THE LINKER                                             PAGE 3-24\par
        HINT FILE FORMAT FOR RELOCATED LISTINGS\par
\par
\par
        Area Name:       equatearea\par
\par
           When the line number is present it is prepended to the 3 or 4\par
        parameters described  above.   The  line  number  is  always  in\par
        decimal in the following format:  \par
\par
        Line Position:  1234567\par
                        -------\par
        Decimal:          LLLLL\par
\par
           Thus the four formats (for each radix) that may be present in\par
        a .hlr file are:  \par
\par
        Line Position:  123456789012345678901234567890\par
                        ------------------------------\par
                         11 22 33\par
                         11 22 33 equatearea\par
                          LLLLL 11 22 33\par
                          LLLLL 11 22 33 equatearea\par
\par
           The  linker understands these formats without any user inter-\par
        action.  \par
\par
           If  a  hint  file  does not exist then the linker attempts to\par
        convert the list file to a relocated list file using some  basic\par
        assumptions  about the parameters listed in each line.  The con-\par
        version without a hint file  requires  at  least  these  listing\par
        parameters:   LOC,  BIN,  MEB, and ME.  The 'equate' values will\par
        not be updated.  \par
\page\par
\par
        THE LINKER                                             Page 3-25\par
        INTEL IHX OUTPUT FORMAT\par
\par
\par
        3.8  \cf2 INTEL IHX OUTPUT FORMAT (16-BIT)\cf1  \par
\par
        Record Mark Field    -  This  field  signifies  the  start  of a\par
                                record, and consists of an  ascii  colon\par
                                (:).  \par
\par
        Record Length Field  -  This   field   consists   of  two  ascii\par
                                characters which indicate the number  of\par
                                data   bytes   in   this   record.   The\par
                                characters are the result of  converting\par
                                the  number  of  bytes  in binary to two\par
                                ascii characters, high digit first.   An\par
                                End  of  File  record contains two ascii\par
                                zeros in this field.  \par
\par
        Load Address Field   -  This  field  consists  of the four ascii\par
                                characters which result from  converting\par
                                the  the  binary value of the address in\par
                                which to begin loading this record.  The\par
                                order is as follows:  \par
\par
                                    High digit of high byte of address. \par
                                    Low digit of high byte of address.  \par
                                    High digit of low byte of address.  \par
                                    Low digit of low byte of address.  \par
\par
                                In an End of File record this field con-\par
                                sists of either four ascii zeros or  the\par
                                program entry address.  \par
\par
        Record Type Field    -  This  field  identifies the record type,\par
                                which is either 0 for data, 1 for an End\par
                                of  File,  or  3  for  a  start  address\par
                                record.   It  consists  of   two   ascii\par
                                characters,  with  the high digit of the\par
                                record type first, followed by  the  low\par
                                digit  of  the record type.  The default\par
                                start address record type is 3,  however\par
                                the  -i1 option can override the default\par
                                and use the type 1 record.  \par
\par
        Data Field           -  This  field consists of the actual data,\par
                                converted to two ascii characters,  high\par
                                digit first.  There are no data bytes in\par
                                the End of File record.  \par
\par
        Checksum Field       -  The  checksum  field is the 8 bit binary\par
                                sum of the record length field, the load\par
                                address  field,  the  record type field,\par
\page\par
\par
        THE LINKER                                             PAGE 3-26\par
        INTEL IHX OUTPUT FORMAT (16-BIT)\par
\par
\par
                                and the data field.  This  sum  is  then\par
                                negated  (2's  complement) and converted\par
                                to  two  ascii  characters,  high  digit\par
                                first.  \par
\page\par
\par
        THE LINKER                                             Page 3-27\par
        INTEL I86 OUTPUT FORMAT\par
\par
\par
        3.9  \cf2 INTEL I86 OUTPUT FORMAT (24 OR 32-BIT)\cf1  \par
\par
        Record Mark Field    -  This  field  signifies  the  start  of a\par
                                record, and consists of an  ascii  colon\par
                                (:).  \par
\par
        Record Length Field  -  This   field   consists   of  two  ascii\par
                                characters which indicate the number  of\par
                                data   bytes   in   this   record.   The\par
                                characters are the result of  converting\par
                                the  number  of  bytes  in binary to two\par
                                ascii characters, high digit first.   An\par
                                End  of  File  record contains two ascii\par
                                zeros in this field.  \par
\par
        Load Address Field   -  This  field  consists  of the four ascii\par
                                characters which result from  converting\par
                                the  the  binary value of the address in\par
                                which to begin loading this record.  The\par
                                order is as follows:  \par
\par
                                    High digit of high byte of address. \par
                                    Low digit of high byte of address.  \par
                                    High digit of low byte of address.  \par
                                    Low digit of low byte of address.  \par
\par
                                In an End of File record this field con-\par
                                sists of either four ascii zeros or  the\par
                                program entry address.  \par
\par
        Record Type Field    -  This  field  identifies the record type,\par
                                which is either 0 for data, 1 for an End\par
                                of File, 3 for a start address, or 4 for\par
                                a segment record.  It  consists  of  two\par
                                ascii characters, with the high digit of\par
                                the record type first, followed  by  the\par
                                low  digit  of  the  record  type.   The\par
                                default start address record type is  3,\par
                                however  the -i1 option can override the\par
                                default and use the type 1 record.  \par
\par
        Data Field           -  This  field consists of the actual data,\par
                                converted to two ascii characters,  high\par
                                digit first.  There are no data bytes in\par
                                the End of File record.  \par
\par
        Checksum Field       -  The  checksum  field is the 8 bit binary\par
                                sum of the record length field, the load\par
                                address  field,  the  record type field,\par
\page\par
\par
        THE LINKER                                             PAGE 3-28\par
        INTEL I86 OUTPUT FORMAT (24 OR 32-BIT)\par
\par
\par
                                and the data field.  This  sum  is  then\par
                                negated  (2's  complement) and converted\par
                                to  two  ascii  characters,  high  digit\par
                                first.  \par
\page\par
\par
        THE LINKER                                             Page 3-29\par
        MOTOROLA S1-S9 OUTPUT FORMAT\par
\par
\par
        3.10  \cf2 MOTOROLA S1-S9 OUTPUT FORMAT (16-BIT)\cf1  \par
\par
        Record Type Field    -  This  field  signifies  the  start  of a\par
                                record and  identifies  the  the  record\par
                                type as follows:  \par
\par
                                    Ascii S1 - Data Record \par
                                    Ascii S9 - End of File Record \par
\par
        Record Length Field  -  This  field  specifies the record length\par
                                which includes the  address,  data,  and\par
                                checksum   fields.   The  8  bit  record\par
                                length value is converted to  two  ascii\par
                                characters, high digit first.  \par
\par
        Load Address Field   -  This  field  consists  of the four ascii\par
                                characters which result from  converting\par
                                the  the  binary value of the address in\par
                                which to begin loading this record.  The\par
                                order is as follows:  \par
\par
                                    High digit of high byte of address. \par
                                    Low digit of high byte of address.  \par
                                    High digit of low byte of address.  \par
                                    Low digit of low byte of address.  \par
\par
                                In an End of File record this field con-\par
                                sists of either four ascii zeros or  the\par
                                program entry address.  \par
\par
        Data Field           -  This  field consists of the actual data,\par
                                converted to two ascii characters,  high\par
                                digit first.  There are no data bytes in\par
                                the End of File record.  \par
\par
        Checksum Field       -  The  checksum  field is the 8 bit binary\par
                                sum of the record length field, the load\par
                                address field, and the data field.  This\par
                                sum is then  complemented  (1's  comple-\par
                                ment)   and   converted   to  two  ascii\par
                                characters, high digit first.  \par
\page\par
\par
        THE LINKER                                             Page 3-30\par
        MOTOROLA S2-S8 OUTPUT FORMAT\par
\par
\par
        3.11  \cf2 MOTOROLA S2-S8 OUTPUT FORMAT (24-BIT)\cf1  \par
\par
        Record Type Field    -  This  field  signifies  the  start  of a\par
                                record and  identifies  the  the  record\par
                                type as follows:  \par
\par
                                    Ascii S2 - Data Record \par
                                    Ascii S8 - End of File Record \par
\par
        Record Length Field  -  This  field  specifies the record length\par
                                which includes the  address,  data,  and\par
                                checksum   fields.   The  8  bit  record\par
                                length value is converted to  two  ascii\par
                                characters, high digit first.  \par
\par
        Load Address Field   -  This  field  consists  of  the six ascii\par
                                characters which result from  converting\par
                                the  the  binary value of the address in\par
                                which to begin loading this record.  The\par
                                order is as follows:  \par
\par
                                    High digit of 3rd byte of address.  \par
                                    Low digit of 3rd byte of address.  \par
                                    High digit of high byte of address. \par
                                    Low digit of high byte of address.  \par
                                    High digit of low byte of address.  \par
                                    Low digit of low byte of address.  \par
\par
                                In an End of File record this field con-\par
                                sists of either six ascii zeros  or  the\par
                                program entry address.  \par
\par
        Data Field           -  This  field consists of the actual data,\par
                                converted to two ascii characters,  high\par
                                digit first.  There are no data bytes in\par
                                the End of File record.  \par
\par
        Checksum Field       -  The  checksum  field is the 8 bit binary\par
                                sum of the record length field, the load\par
                                address field, and the data field.  This\par
                                sum is then  complemented  (1's  comple-\par
                                ment)   and   converted   to  two  ascii\par
                                characters, high digit first.  \par
\page\par
\par
        THE LINKER                                             Page 3-31\par
        MOTOROLA S3-S7 OUTPUT FORMAT\par
\par
\par
        3.12  \cf2 MOTOROLA S3-S7 OUTPUT FORMAT (32-BIT)\cf1  \par
\par
        Record Type Field    -  This  field  signifies  the  start  of a\par
                                record and  identifies  the  the  record\par
                                type as follows:  \par
\par
                                    Ascii S3 - Data Record \par
                                    Ascii S7 - End of File Record \par
\par
        Record Length Field  -  This  field  specifies the record length\par
                                which includes the  address,  data,  and\par
                                checksum   fields.   The  8  bit  record\par
                                length value is converted to  two  ascii\par
                                characters, high digit first.  \par
\par
        Load Address Field   -  This  field  consists of the eight ascii\par
                                characters which result from  converting\par
                                the  the  binary value of the address in\par
                                which to begin loading this record.  The\par
                                order is as follows:  \par
\par
                                    High digit of 4th byte of address.  \par
                                    Low digit of 4th byte of address.  \par
                                    High digit of 3rd byte of address.  \par
                                    Low digit of 3rd byte of address.  \par
                                    High digit of high byte of address. \par
                                    Low digit of high byte of address.  \par
                                    High digit of low byte of address.  \par
                                    Low digit of low byte of address.  \par
\par
                                In an End of File record this field con-\par
                                sists of either eight ascii zeros or the\par
                                program entry address.  \par
\par
        Data Field           -  This  field consists of the actual data,\par
                                converted to two ascii characters,  high\par
                                digit first.  There are no data bytes in\par
                                the End of File record.  \par
\par
        Checksum Field       -  The  checksum  field is the 8 bit binary\par
                                sum of the record length field, the load\par
                                address field, and the data field.  This\par
                                sum is then  complemented  (1's  comple-\par
                                ment)   and   converted   to  two  ascii\par
                                characters, high digit first.  \par
\page\par
\par
        THE LINKER                                             Page 3-32\par
        TANDY COLOR COMPUTER DISK BASIC BINARY FORMAT\par
\par
\par
        3.13  \cf2 TANDY COLOR COMPUTER DISK BASIC FORMAT\cf1  \par
\par
        Record Preamble      -  This  field  is either $00 (for start of\par
                                new record) or $FF (for last  record  in\par
                                file).  \par
\par
        Record Length Field  -  This  field specifies the number of data\par
                                bytes which follows the  address  field.\par
                                The  length  is  in  binary  MSB  to LSB\par
                                order.  \par
\par
                                    16-Bit Length - 2-bytes \par
                                    24-Bit Length - 3-bytes \par
                                    32-Bit Length - 4-bytes \par
\par
        Load Address Field   -  This field consists of the address where\par
                                the record will be loaded  into  memory.\par
                                The  address  is  in  binary  MSB to LSB\par
                                order.  \par
\par
                                    16-Bit Address - 2-bytes \par
                                    24-Bit Address - 3-bytes \par
                                    32-Bit Address - 4-bytes \par
\par
        Data Field           -  This field consists of the actual binary\par
                                data.  \par
\par
\par
           After  the  last  code  segment,  a final record like the one\par
        above is placed.  In this final segment, the Record Preamble  is\par
        $FF,  the Record Length Field is $0000 and the Load Adress Field\par
        is the execution address.  \par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                    \cf2 CHAPTER 4\cf1\par
\par
                           \cf2 BUILDING ASXXXX AND ASLINK\cf1\par
\par
\par
\par
\par
           The assemblers and linker have been successfully compiled for\par
        Linux, DOS, and various flavors of Windows using the Linux  GCC,\par
        the Cygwin environment, the DJGPP environment, and the graphical\par
        user   interfaces   and    command    line    environments    of\par
        MS Visual C++ V6.0,  MS Visual Studio 2005,  2010,  2013,  2015,\par
        Open Watcom V1.9, Symantec C/C++ V7.2, and Turbo C 3.0.  \par
\par
           Makefiles  for  Linux,  Cygwin,  DJGPP,  project  files and a\par
        makefile for Turbo C and psuedo makefiles and project files  for\par
        VC6,  VS2005,  VS2010,  VS2013, VS2015, Open Watcom and Symantec\par
        are available to build all the assemblers and the linker.  \par
\par
           Unpack  the  asxv5pxx.zip  file into an appropriate directory\par
        using the utility appropriate to your environment.  For  DOS  or\par
        Windows  the following command line will unpack the distribution\par
        zip file:  \par
\par
                pkunzip -d asxv5pxx.zip\par
\par
\par
        The  distribution  file  has  been  packed with DOS style end of\par
        lines (CR/LF), and UPPER CASE file names.  The Linux  make  file\par
        assumes  all  lower  case directories and file names.  For Linux\par
        the unpacking utility you choose should have an option to  force\par
        all  lower  case  directories / file names and convert the ascii\par
        files to local format.  On most systems  the  following  command\par
        should do the trick:  \par
\par
                unzip -L -a asxv5pxx.zip\par
\par
        Some systems may require a -LL option to force all lower case.  \par
\par
           The  distribution  will  be  unpacked into the base directory\par
        'asxv5pxx'  which  will  contain  source  directories  for  each\par
\page\par
\par
        BUILDING ASXXXX AND ASLINK                              Page 4-2\par
        \par
\par
\par
        supported  processor  (as6800, asz80, ...), the machine indepen-\par
        dent source (asxxsrc), the  linker  source  (linksrc),  and  the\par
        miscellaneous sources (asxxmisc).  Other directories include the\par
        documentation (asxdoc), test file directory (asxtst),  html  do-\par
        cumentation  (asxhtml),  NoICE  support  files  (noice), various\par
        debug monitors that can be assembled with the ASxxxx  assemblers\par
        (asmasm),  project files for an application that uses the AS6809\par
        assembler and ASlink linker (project), and the packaging  direc-\par
        tory (zipper).  \par
\par
\par
        4.1  \cf2 BUILDING ASXXXX AND ASLINK WITH LINUX\cf1  \par
\par
\par
           The  Linux  build  directory is /asxv5pxx/asxmak/linux/build.\par
        The makefile in this directory is compatible with the Linux  GNU\par
        make and GCC.  The command \par
\par
                make clean\par
\par
        will  remove  all  the  current  executable  files  in directory\par
        /asxv5pxx/asxmak/linux/exe and all the compiled  object  modules\par
        from the /asxv5pxx/asxmak/linux/build directory.  \par
\par
           The command \par
\par
                make all\par
\par
        will compile and link all the ASxxxx assemblers, the ASlink pro-\par
        gram, and the utility programs asxscn and asxcnv.  The make file\par
        can make a single program by invoking make with the specific as-\par
        sembler, linker, or utility you wish to build:  \par
\par
                make aslink\par
\par
\par
        4.2  \cf2 BUILDING ASXXXX AND ASLINK UNDER CYGWIN\cf1  \par
\par
\par
           The  Cygwin build directory is \\asxv5pxx\\asxmak\\cygwin\\build.\par
        The makefile in this directory is compatible with the Cygwin GNU\par
        make and GCC.  The command \par
\par
                make clean\par
\par
        will  remove  all  the  current  executable  files  in directory\par
        \\asxv5pxx\\asxmak\\cygwin\\exe and all the compiled object  modules\par
        from the \\asxv5pxx\\asxmak\\cygwin\\build directory.  The command \par
\par
\page\par
\par
        BUILDING ASXXXX AND ASLINK                              PAGE 4-3\par
        BUILDING ASXXXX AND ASLINK UNDER CYGWIN\par
\par
\par
                make all\par
\par
        will compile and link all the ASxxxx assemblers, the ASlink pro-\par
        gram, and the utility programs asxscn and asxcnv.  The make file\par
        can make a single program by invoking make with the specific as-\par
        sembler, linker, or utility you wish to build:  \par
\par
                make aslink\par
\par
\par
        4.3  \cf2 BUILDING ASXXXX AND ASLINK WITH DJGPP\cf1  \par
\par
\par
           The  DJGPP  build  directory is \\asxv5pxx\\asxmak\\djgpp\\build.\par
        The makefile in this directory is compatible with the DJGPP  GNU\par
        make and GCC.  The command \par
\par
                make clean\par
\par
        will  remove  all  the  current  executable  files  in directory\par
        \\asxv5pxx\\asxmak\\djgpp\\exe and all the compiled  object  modules\par
        from the \\asxv5pxx\\asxmak\\djgpp\\build directory.  The command \par
\par
                make all\par
\par
        will compile and link all the ASxxxx assemblers, the ASlink pro-\par
        gram, and the utility programs asxscn and asxcnv.  The make file\par
        can make a single program by invoking make with the specific as-\par
        sembler, linker, or utility you wish to build:  \par
\par
                make aslink\par
\par
\par
        4.4  \cf2 BUILDING ASXXXX AND ASLINK WITH BORLAND'S TURBO C++ 3.0\cf1  \par
\par
\par
           The  Borland  product  is  available in the Borland Turbo C++\par
        Suite which contains C++ Builder 1.0, Turbo C++ 4.5 for  Windows\par
        and  Turbo C++ 3.0 for DOS.  The DOS IDE will install and run on\par
        x86 (16 or 32 bit) versions of Windows (not x64 versions).  \par
\par
\par
\page\par
\par
        BUILDING ASXXXX AND ASLINK                              PAGE 4-4\par
        BUILDING ASXXXX AND ASLINK WITH BORLAND'S TURBO C++ 3.0\par
\par
\par
        4.4.1  Graphical User Interface \par
\par
\par
           Each   ASxxxx   Assembler  has  two  project  specific  files\par
        (*.dsk and *.prj)     located      in      the      subdirectory\par
        \\asxv5pxx\\asxmak\\turboc30\\build.    You   must  enter  the  .prj\par
        filename into the Turbo C++ IDE:  enter Options->Directories and\par
        change  the  include and output directories to match your confi-\par
        guration.  After these changes have been made you will  be  able\par
        to compile the selected project.  These changes must be manually\par
        entered for each project.  \par
\par
\par
        4.4.2  Command Line Interface \par
\par
\par
           Before  the  command line interface can be used you must per-\par
        form the steps outlined in the 'Graphical  User  Interface'  in-\par
        structions above for each project you wish to build.  \par
\par
           Open      a      command     prompt     window     in     the\par
        \\asxv5pxx\\asxmak\\turboc30\\build directory.  Assuming the Turbo C\par
        compiler  has been installed in the default location (C:\\TC) the\par
        file _setpath.bat will set the PATH variable.  If  this  is  not\par
        the case then the line \par
\par
        PATH=C:\\TC;C:\\TC\\BIN;C:\\TC\\INCLUDE\par
\par
        must  be changed to match your environment.  The compiled object\par
        code      modules      will      be      placed      in      the\par
        \\asxv5pxx\\asxmak\\turboc30\\build\\  directory  and  the executable\par
        files will be placed in the \\asxv5pxx\\asxmak\\turboc30\\exe direc-\par
        tory.  \par
\par
\par
\par
           The command \par
\par
                make all\par
\par
        will compile and link all the ASxxxx assemblers, the ASlink pro-\par
        gram, and the utility programs asxscn and asxcnv.  The make file\par
        can make a single program by invoking make with the specific as-\par
        sembler, linker, or utility you wish to build:  \par
\par
                make aslink\par
\par
\par
        The   Turbo C   make   utility   uses  the  information  in  the\par
\page\par
\par
        BUILDING ASXXXX AND ASLINK                              PAGE 4-5\par
        BUILDING ASXXXX AND ASLINK WITH BORLAND'S TURBO C++ 3.0\par
\par
\par
        corresponding .prj and .dsk files to compile and link  the  pro-\par
        grams.  \par
\par
           The file _makeall.bat found in the directory can also be used\par
        to invoke the Turbo C command line compiler.   The  _makeall.bat\par
        file calls the _setpath.bat file to set the path to the compiler\par
        directories in the environment variable PATH  and  then  invokes\par
        'make all'.  \par
\par
\par
        4.5  \cf2 BUILDING ASXXXX AND ASLINK WITH MS VISUAL C++ 6.0\cf1  \par
\par
\par
\par
        4.5.1  Graphical User Interface \par
\par
\par
           Each  ASxxxx Assembler has a VC6 project file (*.dsw) located\par
        in a subdirectory of \\asxv5pxx\\asxmak\\vc6\\build.   Simply  enter\par
        this project filename into the VC6 IDE and build/rebuild the as-\par
        sembler.  \par
\par
\par
        4.5.2  Command Line Interface \par
\par
\par
           Open      a      command     prompt     window     in     the\par
        \\asxv5pxx\\asxmak\\vc6\\build directory.  The file  make.bat  found\par
        in the directory can be used to invoke the VC6 command line com-\par
        piler.  The make.bat file assumes that the Visual  C++  compiler\par
        has  been installed in the default location.  If this is not the\par
        case then the line \par
\par
        SET MS$DEV="C:\\Program Files\\Microsoft Visual Studio\\\par
                       Common\\MSDev98\\Bin\\msdev.exe"\par
\par
        must  be changed to match your environment.  The compiled object\par
        code      modules      will      be      placed      in      the\par
        \\asxv5pxx\\asxmak\\vc6\\build\\as----\\release directory and the exe-\par
        cutable files will be  placed  in  the  \\asxv5pxx\\asxmak\\vc6\\exe\par
        directory.  \par
\par
\par
\par
           The command \par
\par
                make all\par
\par
        will  compile  and  link  all  the ASxxxx assemblers, the ASlink\par
\page\par
\par
        BUILDING ASXXXX AND ASLINK                              PAGE 4-6\par
        BUILDING ASXXXX AND ASLINK WITH MS VISUAL C++ 6.0\par
\par
\par
        program, and the utility programs asxscn and asxcnv.   The  make\par
        file  can  make  a  single  program  by  invoking  make with the\par
        specific assembler, linker, or utility you wish to build:  \par
\par
                make aslink\par
\par
\par
        The  VC6  command line compiler uses the information in the cor-\par
        responding .dsw/.dsp files to compile and link the programs.  \par
\par
           The  command  'make clean' is not required or valid as a make\par
        of anything does a complete rebuild of the program.  \par
\par
\par
        4.6  \cf2 BUILDING ASXXXX AND ASLINK WITH MS VISUAL STUDIO 2005\cf1  \par
\par
\par
\par
        4.6.1  Graphical User Interface \par
\par
\par
           Each  ASxxxx  Assembler  has a VS2005 project file (*.vcproj)\par
        located in a subdirectory of \\asxv5pxx\\asxmak\\vs05\\build.   Sim-\par
        ply  enter  this  project  filename  into  the  VS2005  IDE  and\par
        build/rebuild the assembler.  \par
\par
\par
        4.6.2  Command Line Interface \par
\par
\par
           Open      a      command     prompt     window     in     the\par
        \\asxv5pxx\\asxmak\\vs05\\build directory.  The file make.bat  found\par
        in  the  directory can be used to invoke the VS2005 command line\par
        compiler.  The make.bat file assumes that the  Visual  C++  com-\par
        piler  has  been  installed in the default location.  If this is\par
        not the case then the line \par
\par
        SET VC$BUILD="C:\\Program Files\\Microsoft Visual Studio 8\\\par
                         Common\\MSDev98\\Bin\\msdev.exe"\par
\par
        must  be changed to match your environment.  The compiled object\par
        code      modules      will      be      placed      in      the\par
        \\asxv5pxx\\asxmak\\vs05\\build\\as----\\release directory and the ex-\par
        ecutable files will be placed in  the  \\asxv5pxx\\asxmak\\vs05\\exe\par
        directory.  \par
\par
\par
\par
\page\par
\par
        BUILDING ASXXXX AND ASLINK                              PAGE 4-7\par
        BUILDING ASXXXX AND ASLINK WITH MS VISUAL STUDIO 2005\par
\par
\par
           The command \par
\par
                make all\par
\par
        will compile and link all the ASxxxx assemblers, the ASlink pro-\par
        gram, and the utility programs asxscn and asxcnv.  The make file\par
        can make a single program by invoking make with the specific as-\par
        sembler, linker, or utility you wish to build:  \par
\par
                make aslink\par
\par
\par
        The  VS2005  command  line  compiler uses the information in the\par
        corresponding .vcproj file to compile and link the programs.  \par
\par
           The  command  'make clean' is not required or valid as a make\par
        of anything does a complete rebuild of the program.  \par
\par
\par
        4.7  \cf2 BUILDING ASXXXX AND ASLINK WITH MS VISUAL STUDIO 2010\cf1  \par
\par
\par
\par
        4.7.1  Graphical User Interface \par
\par
\par
           Each  ASxxxx  Assembler has a VS2010 project file (*.vcxproj)\par
        located in a subdirectory of \\asxv5pxx\\asxmak\\vs10\\build.   Sim-\par
        ply  enter  this  project  filename  into  the  VS2010  IDE  and\par
        build/rebuild the assembler.  \par
\par
\par
        4.7.2  Command Line Interface \par
\par
\par
           Open      a      command     prompt     window     in     the\par
        \\asxv5pxx\\asxmak\\vs10\\build directory.  The file make.bat  found\par
        in  the  directory can be used to invoke the VS2010 command line\par
        compiler.  The make.bat file assumes that the  Visual  C++  com-\par
        piler  has  been  installed in the default location.  If this is\par
        not the case then the line \par
\par
        call "c:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\\par
                         VC\\bin\\vcvars32.bat"\par
\par
        must  be changed to match your environment.  The compiled object\par
        code      modules      will      be      placed      in      the\par
        \\asxv5pxx\\asxmak\\vs10\\build\\as----\\release directory and the ex-\par
        ecutable files will be placed in  the  \\asxv5pxx\\asxmak\\vs10\\exe\par
\page\par
\par
        BUILDING ASXXXX AND ASLINK                              PAGE 4-8\par
        BUILDING ASXXXX AND ASLINK WITH MS VISUAL STUDIO 2010\par
\par
\par
        directory.  \par
\par
\par
\par
           The command \par
\par
                make all\par
\par
        will compile and link all the ASxxxx assemblers, the ASlink pro-\par
        gram, and the utility programs asxscn and asxcnv.  The make file\par
        can make a single program by invoking make with the specific as-\par
        sembler, linker, or utility you wish to build:  \par
\par
                make aslink\par
\par
\par
        The  VS2010  command  line  compiler uses the information in the\par
        corresponding .vcxproj file to compile and link the programs.  \par
\par
           The  command  'make clean' is not required or valid as a make\par
        of anything does a complete rebuild of the program.  \par
\par
\par
        4.8  \cf2 BUILDING ASXXXX AND ASLINK WITH MS VISUAL STUDIO 2013\cf1  \par
\par
\par
\par
        4.8.1  Graphical User Interface \par
\par
\par
           Each  ASxxxx  Assembler has a VS2013 project file (*.vcxproj)\par
        located in a subdirectory of \\asxv5pxx\\asxmak\\vs13\\build.   Sim-\par
        ply  enter  this  project  filename  into  the  VS2013  IDE  and\par
        build/rebuild the assembler.  \par
\par
\par
        4.8.2  Command Line Interface \par
\par
\par
           Open      a      command     prompt     window     in     the\par
        \\asxv5pxx\\asxmak\\vs13\\build directory.  The file make.bat  found\par
        in  the  directory can be used to invoke the VS2013 command line\par
        compiler.  The make.bat file assumes that the  Visual  C++  com-\par
        piler  has  been  installed in the default location.  If this is\par
        not the case then the line \par
\par
        call "c:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\\par
                         VC\\bin\\vcvars32.bat"\par
\par
\page\par
\par
        BUILDING ASXXXX AND ASLINK                              PAGE 4-9\par
        BUILDING ASXXXX AND ASLINK WITH MS VISUAL STUDIO 2013\par
\par
\par
        must  be changed to match your environment.  The compiled object\par
        code      modules      will      be      placed      in      the\par
        \\asxv5pxx\\asxmak\\vs13\\build\\as----\\release directory and the ex-\par
        ecutable files will be placed in  the  \\asxv5pxx\\asxmak\\vs13\\exe\par
        directory.  \par
\par
\par
\par
           The command \par
\par
                make all\par
\par
        will compile and link all the ASxxxx assemblers, the ASlink pro-\par
        gram, and the utility programs asxscn and asxcnv.  The make file\par
        can make a single program by invoking make with the specific as-\par
        sembler, linker, or utility you wish to build:  \par
\par
                make aslink\par
\par
\par
        The  VS2013  command  line  compiler uses the information in the\par
        corresponding .vcxproj file to compile and link the programs.  \par
\par
           The  command  'make clean' is not required or valid as a make\par
        of anything does a complete rebuild of the program.  \par
\par
\par
        4.9  \cf2 BUILDING ASXXXX AND ASLINK WITH MS VISUAL STUDIO 2015\cf1  \par
\par
\par
\par
        4.9.1  Graphical User Interface \par
\par
\par
           Each  ASxxxx  Assembler has a VS2015 project file (*.vcxproj)\par
        located in a subdirectory of \\asxv5pxx\\asxmak\\vs15\\build.   Sim-\par
        ply  enter  this  project  filename  into  the  VS2015  IDE  and\par
        build/rebuild the assembler.  \par
\par
\par
\page\par
\par
        BUILDING ASXXXX AND ASLINK                             PAGE 4-10\par
        BUILDING ASXXXX AND ASLINK WITH MS VISUAL STUDIO 2015\par
\par
\par
        4.9.2  Command Line Interface \par
\par
\par
           Open      a      command     prompt     window     in     the\par
        \\asxv5pxx\\asxmak\\vs15\\build directory.  The file make.bat  found\par
        in  the  directory can be used to invoke the VS2015 command line\par
        compiler.  The make.bat file assumes that the  Visual  C++  com-\par
        piler  has  been  installed in the default location.  If this is\par
        not the case then the line \par
\par
        call "c:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\\par
                         VC\\bin\\vcvars32.bat"\par
\par
        must  be changed to match your environment.  The compiled object\par
        code      modules      will      be      placed      in      the\par
        \\asxv5pxx\\asxmak\\vs15\\build\\as----\\release directory and the ex-\par
        ecutable files will be placed in  the  \\asxv5pxx\\asxmak\\vs15\\exe\par
        directory.  \par
\par
\par
\par
           The command \par
\par
                make all\par
\par
        will compile and link all the ASxxxx assemblers, the ASlink pro-\par
        gram, and the utility programs asxscn and asxcnv.  The make file\par
        can make a single program by invoking make with the specific as-\par
        sembler, linker, or utility you wish to build:  \par
\par
                make aslink\par
\par
\par
        The  VS2015  command  line  compiler uses the information in the\par
        corresponding .vcxproj file to compile and link the programs.  \par
\par
           The  command  'make clean' is not required or valid as a make\par
        of anything does a complete rebuild of the program.  \par
\par
\par
\page\par
\par
        BUILDING ASXXXX AND ASLINK                             PAGE 4-11\par
        BUILDING ASXXXX AND ASLINK WITH OPEN WATCOM V1.9\par
\par
\par
        4.10  \cf2 BUILDING ASXXXX AND ASLINK WITH OPEN WATCOM V1.9\cf1  \par
\par
\par
\par
        4.10.1  Graphical User Interface \par
\par
\par
           Each ASxxxx Assembler has a set of project files (.prj, .tgt,\par
        .mk,   .mk1,   and   .lk1)   located   in    the    subdirectory\par
        \\asxv5pxx\\asxmak\\watcom\\build.   You  will have to edit the pro-\par
        ject files to match your local file locations.  \par
\par
\par
        4.10.2  Command Line Interface \par
\par
\par
           Open      a      command     prompt     window     in     the\par
        \\asxv5pxx\\asxmak\\watcom\\build directory.   Assuming  the  Watcom\par
        compiler  has been installed in the default location (C:\\WATCOM)\par
        the file _setpath.bat will set the PATH variable.   If  this  is\par
        not the case then the line \par
\par
        PATH=C:\\WATCOM\\BINNT;C:\\WATCOM\\BINW\par
\par
        must  be changed to match your environment.  The compiled object\par
        code      modules      will      be      placed      in      the\par
        \\asxv5pxx\\asxmak\\watcom\\build\\   directory  and  the  executable\par
        files will be placed in the  \\asxv5pxx\\asxmak\\watcom\\exe  direc-\par
        tory.  \par
\par
\par
\par
           The command \par
\par
                make all\par
\par
        will compile and link all the ASxxxx assemblers, the ASlink pro-\par
        gram, and the utility programs asxscn and asxcnv.  The make file\par
        can make a single program by invoking make with the specific as-\par
        sembler, linker, or utility you wish to build:  \par
\par
                make aslink\par
\par
\par
        The  Watcom command line compiler wmake.exe uses the information\par
        in the corresponding project files to compile and link the  pro-\par
        grams.  \par
\par
\page\par
\par
        BUILDING ASXXXX AND ASLINK                             PAGE 4-12\par
        BUILDING ASXXXX AND ASLINK WITH OPEN WATCOM V1.9\par
\par
\par
           The file _makeall.bat found in the directory can also be used\par
        to invoke the Watcom command line  compiler.   The  _makeall.bat\par
        file calls the _setpath.bat file to set the path to the compiler\par
        directories in the environment variable PATH  and  then  invokes\par
        'make all'.  \par
\par
           The  command  'make clean' is not required or valid as a make\par
        of anything does a complete rebuild of the program.  \par
\par
\par
        4.11  \cf2 BUILDING ASXXXX AND ASLINK WITH SYMANTEC C/C++ V7.2\cf1  \par
\par
\par
           The  Symantec  product is no longer available but is included\par
        for historical reasons (the final version, 7.5,  was  introduced\par
        in  1996).   The  product had an excellent graphical user inter-\par
        face, built in editor, project manager, and supported  DOS,  Ex-\par
        tended  DOS  (the  executable  contained a built in DOS extender\par
        which was rendered unusable in Windows 2000, after service  pack\par
        2, or in Windows XP), Win95, and Windows NT.  \par
\par
\par
        4.11.1  Graphical User Interface \par
\par
\par
           Each  ASxxxx Assembler has a series of project specific files\par
        (*.bro, *.def, *.dpd, *.lnk, *.mak, *.opn, and *.prj) located in\par
        in  the  subdirectory \\asxv5pxx\\asxmak\\symantec\\build.  You must\par
        enter the .prj filename into the Symantec IDE  and  then  select\par
        Project->Settings->Directories  and  change the include, target,\par
        and compiler output directories  to  match  your  configuration.\par
        After  these  changes have been made you will be able to compile\par
        the selected project.  These changes must  be  manually  entered\par
        for each project.  \par
\par
\par
        4.11.2  Command Line Interface \par
\par
\par
           Before  the  command line interface can be used you must per-\par
        form the steps outlined in the 'Graphical  User  Interface'  in-\par
        structions above for each project you wish to build.  \par
\par
           Open      a      command     prompt     window     in     the\par
        \\asxv5pxx\\asxmak\\symantec\\build directory.   The  file  make.bat\par
        found  in  the directory can be used to invoke the Symantec com-\par
        mand line compiler.  The make.bat file assumes that the path  to\par
        the  compiler  directories  has  been  set  in  the  environment\par
        variable  PATH.   Assuming  the  Symantec  compiler   has   been\par
\page\par
\par
        BUILDING ASXXXX AND ASLINK                             PAGE 4-13\par
        BUILDING ASXXXX AND ASLINK WITH SYMANTEC C/C++ V7.2\par
\par
\par
        installed  in the default location (C:\\SC) the file _setpath.bat\par
        will set the PATH variable.  If this is not the  case  then  the\par
        line \par
\par
        PATH=C:\\SC;C:\\SC\\BIN;C:\\SC\\INCLUDE;C:\\SC\\LIB\par
\par
        must  be changed to match your environment.  The compiled object\par
        code      modules      will      be      placed      in      the\par
        \\asxv5pxx\\asxmak\\symantec\\build  directory  and  the  executable\par
        files will be placed in the \\asxv5pxx\\asxmak\\symantec\\exe direc-\par
        tory.  \par
\par
\par
\par
           The command \par
\par
                make all\par
\par
        will compile and link all the ASxxxx assemblers, the ASlink pro-\par
        gram, and the utility programs asxscn and asxcnv.  The make file\par
        can make a single program by invoking make with the specific as-\par
        sembler, linker, or utility you wish to build:  \par
\par
                make aslink\par
\par
\par
        The  Symantec  make utility , smake.exe, uses the information in\par
        the corresponding .mak files to compile and link the programs.  \par
\par
           The file _makeall.bat found in the directory can also be used\par
        to invoke the Symantec command line compiler.  The  _makeall.bat\par
        file calls the _setpath.bat file to set the path to the compiler\par
        directories in the environment variable PATH  and  then  invokes\par
        'make all'.  \par
\par
\par
        4.12  \cf2 THE _CLEAN.BAT AND _PREP.BAT FILES\cf1  \par
\par
\par
           Each  of  the  build  directories have two maintenance files:\par
        _prep.bat and _clean.bat.  The command file  _prep.bat  prepares\par
        the particular compiler directories for distribution by removing\par
        all exteraneous files but keeping  the  final  compiled  execut-\par
        ables.   The  _clean.bat command file performs the same function\par
        as _prep.bat and removes the compiled executables.  \par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX A\cf1\par
\par
                           \cf2 ASXSCN LISTING FILE SCANNER\cf1\par
\par
\par
\par
\par
           The  program  ASXSCN  is  a debugging utility program used to\par
        verify ASxxxx assembler code generation.  The program may be in-\par
        voked with any of the following options:  \par
\par
                Usage: [-dqx234i] file\par
                  d    decimal listing\par
                  q    octal   listing\par
                  x    hex     listing (default)\par
                  2    16-Bit  address (default)\par
                  3    24-Bit  address\par
                  4    32-Bit  address\par
                  i    ignore relocation flags\par
\par
\par
           Select  one of the -d, -q, or -x options to match the listing\par
        file format and select only one of the -2, -3, or -4 options  to\par
        match  the  addressing range of the listing file.  The -i option\par
        inhibits the verification  of  the  assembler  relocation  flags\par
        generated by the ASxxxx assemblers -f or -ff options.  \par
\par
           Each  source assembly line selected for verification must in-\par
        clude the expected output code in the comment field of the line.\par
        The  following  has  been  extracted  from the ASF2MC8 test file\par
        tf2mc8.asm:  \par
\par
                reti            ; 30\par
                call  ext       ; 31s12r34\par
                subc  a         ; 32\par
                subcw a         ; 33\par
                subc  a,#v22    ; 34r22\par
                subc  a,*dir    ; 35*33\par
                subc  a,@ix+off ; 36r44\par
                subc  a,@ep     ; 37\par
\par
\page\par
\par
        ASXSCN LISTING FILE SCANNER                             Page A-2\par
        \par
\par
\par
        The  r,  s,  and * are specific address relocation flags created\par
        when the -ff option is specified with any ASxxxx assembler.  \par
\par
           Invoking the assembler:  \par
\par
                asf2mc8 -gloaxff tf2mc8\par
\par
        produces a listing file:  \par
\par
        033B 30          677    reti            ; 30\par
        033C 31s12r34    678    call  ext       ; 31s12r34\par
        033F 32          679    subc  a         ; 32\par
        0340 33          680    subcw a         ; 33\par
        0341 34r22       681    subc  a,#v22    ; 34r22\par
        0343 35*33       682    subc  a,*dir    ; 35*33\par
        0345 36r44       683    subc  a,@ix+off ; 36r44\par
        0347 37          684    subc  a,@ep     ; 37\par
\par
           The  expected code can be compared with the generated code by\par
        invoking the scanning program:  \par
\par
                asxscn tf2mc8.lst\par
                0 code difference(s) found in file tf2mc8.lst\par
\par
        The assembled code can also be linked:  \par
\par
                aslink -u ...options... t2fc8\par
\par
        to create an updated listing file:  \par
\par
        033B 30          677    reti            ; 30\par
        033C 31 12 34    678    call  ext       ; 31s12r34\par
        033F 32          679    subc  a         ; 32\par
        0340 33          680    subcw a         ; 33\par
        0341 34 22       681    subc  a,#v22    ; 34r22\par
        0343 35 33       682    subc  a,*dir    ; 35*33\par
        0345 36 44       683    subc  a,@ix+off ; 36r44\par
\par
        which resolves all relocations and removes the relocation flags.\par
        This file can also be verified:  \par
\par
                asxscn -i tf2mc8.rst\par
                0 code difference(s) found in file tf2mc8.rst\par
\par
\par
           The  verification  of  both  the .lst and .rst files from the\par
        same assembler test file requires careful definition of external\par
        variables  so  that  the  assembler  listing file and the linker\par
        listing file have the same code values.  \par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX B\cf1\par
\par
                            \cf2 ASXCNV LISTING CONVERTER\cf1\par
\par
\par
\par
\par
           The  program  ASXCNV  is  a debugging utility program used to\par
        create an assembler file with verification  data.   The  program\par
        may be invoked with any of the following options:  \par
\par
                Usage: [-dqx234] file\par
                  d    decimal listing\par
                  q    octal   listing\par
                  x    hex     listing (default)\par
                  2    16-Bit  address (default)\par
                  3    24-Bit  address\par
                  4    32-Bit  address\par
\par
\par
           Select  one of the -d, -q, or -x options to match the listing\par
        file format and select only one of the -2, -3, or -4 options  to\par
        match the addressing range of the listing file.  \par
\par
           Each source assembly line which creates output data will have\par
        the data appended to the source line as a comment.  The appended\par
        comment will contain the relocation codes if they are present in\par
        the listing file.  Any existing comment  on  the  line  will  be\par
        overwritten.  \par
\par
           Given an existing listing file, a.lst, containing:  \par
\par
        033B 30          677    reti\par
        033C 31s12r34    678    call  ext\par
        033F 32          679    subc  a\par
        0340 33          680    subcw a\par
        0341 34r22       681    subc  a,#v22\par
        0343 35*33       682    subc  a,*dir\par
        0345 36r44       683    subc  a,@ix+off\par
        0347 37          684    subc  a,@ep\par
\par
\page\par
\par
        ASXCNV LISTING CONVERTER                                Page B-2\par
        \par
\par
\par
        A  converted  listing  file  can  be created using the following\par
        command:  \par
\par
                asxcnv -d2 a.lst\par
\par
        The  created output file, a.out, is a new assembly file now con-\par
        tain the verification data in the comments:  \par
\par
                reti            ; 30\par
                call  ext       ; 31s12r34\par
                subc  a         ; 32\par
                subcw a         ; 33\par
                subc  a,#v22    ; 34r22\par
                subc  a,*dir    ; 35*33\par
                subc  a,@ix+off ; 36r44\par
                subc  a,@ep     ; 37\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX C\cf1\par
\par
                            \cf2 S19OS9 CONVERSION UTILITY\cf1\par
\par
\par
\par
\par
\par
        C.1  \cf2 BACKGROUND\cf1  \par
\par
\par
           OS9  is  an  Operating System for the TRS-80/Tandy Color Com-\par
        puters based on the 6809/6309 processors.  The open source  ver-\par
        sion  of  the  OS9 operating system is NitrOS-9 and is available\par
        at:  \par
\par
            The NitrOS-9 Project\par
            http://www.nitros9.org\par
        \par
        \par
        The s19os9 utility package contains the following:\par
        \par
           1)  OS9  definition files and an  OS9 assembler module\par
               which creates the OS9 header, code and data areas,\par
               and the module CRC block:\par
        \par
                    os9_mod.def       OS9 Module Definitions\par
                    os9_sys.def       OS9 Sytem  Definitions\par
                    os9_mod.asm       OS9 Module Begin / End Code\par
        \par
           2)  a program, s19os9, to post-process  assembled  OS9\par
               modules from S19 format into  binary  OS9  modules\par
               with the appropriate  header  checksum  and module\par
               CRC values calculated.\par
\par
\par
           The  file os9_mod.def contains module definitions used in the\par
        header of OS9 binary files and was  derived  from  the  NitrOS-9\par
        file os9_mod.def.  \par
\par
\page\par
\par
        S19OS9 CONVERSION UTILITY                               PAGE C-2\par
        BACKGROUND\par
\par
\par
           The  file  os9_sys.def contains system definitions pertaining\par
        to system service request codes, system reserved calls, I/O ser-\par
        vice  request  calls,  file  access modes, signal codes, get/put\par
        status codes, module offsets, and error codes.   This  file  was\par
        derived from the NitrOS-9 file os9defs.a.  \par
\par
\par
        C.2  \cf2 CREATING AN OS9 MODULE\cf1  \par
\par
\par
           This  section describes how to create an OS9 module using the\par
        files os9_mod.def, os9_sys.def, and os9_mod.asm.  \par
\par
           When  creating  an OS9 module certain parameters are required\par
        by the os9_mod.asm file to create the appropriate headers.   The\par
        list of supported parameters is listed here:  \par
\par
           Basic Header:\par
        \par
               .define OS9_ModNam,     "Module_Name"\par
               .define OS9_Typ,        "Type_Value"\par
               .define OS9_Lng,        "Language_Value"\par
               .define OS9_Att,        "Attributes_Value"\par
               .define OS9_Rev,        "Revision_Value"\par
        \par
           General Parameters:\par
               .define OS9_ModExe,     "Module Entry Point Offset"\par
               .define OS9_ModMem,     "Module Permanent Storage"\par
        \par
           Device Driver Parameters:\par
        \par
               .define OS9_Mod,        "Module Mode"\par
        \par
           Descriptor Parameters:\par
        \par
               .define OS9_FMN,        "Device Driver Name Label"\par
               .define OS9_DDR,        "Device Driver Name Label"\par
               .define OS9_AbsAdr02,   "Device Absolute Address <23:16>"\par
               .define OS9_AbsAdr01,   "Device Absolute Address <15:08>"\par
               .define OS9_AbsAdr00,   "Device Absolute Address <07:00>"\par
               .define OS9_Opt,        "Descriptor Option"\par
               .define OS9_DType,      "Descriptor Data Type"\par
\par
\par
           The  OS9 Module file os9_mod.asm supports the creation of the\par
        following simple module types:  \par
\par
          SYSTM         -       System Module\par
          PRGRM         -       Program Module\par
\page\par
\par
        S19OS9 CONVERSION UTILITY                               PAGE C-3\par
        CREATING AN OS9 MODULE\par
\par
\par
          SBTRN         -       Subroutine Module\par
          DRIVR         -       Device Driver Module\par
          FLMGR         -       File Manager Module\par
          DEVIC         -       Device Descriptor Module\par
\par
\par
           The  following code shows the steps required when creating an\par
        OS9 program using the os9_mod.asm file.  os9_mod.asm  loads  the\par
        os9_mod.def  and  os9_sys.def files, defines the software inter-\par
        rupt macro os9, and creates  the  os9  program  header  and  crc\par
        blocks.  \par
\par
\par
        C.2.1  Step 1:  Define Header Values \par
\par
                ;****\par
                ; Step 1:\par
                ; Use the .define assembler directive\par
                ; to insert the parameters into the\par
                ; os9_mod.asm's header structure.\par
                ;\par
                ;       Note:   See the file os9_mod.asm for\par
                ;               parameter names and definitions.\par
                ;\par
                .title          List Program\par
        \par
                .sbttl          Header Definitions\par
                \par
                .define OS9_ModNam,     "LSTNAM"\par
                .define OS9_Typ,        "PRGRM"\par
                .define OS9_Lng,        "OBJCT"\par
                .define OS9_Att,        "REENT"\par
                .define OS9_Rev,        "1"\par
                .define OS9_ModExe,     "LSTENT"\par
                .define OS9_ModMem,     "LSTMEM"\par
\par
\par
        C.2.2  Step 2:  Create The Module Header \par
\par
                ; Step 2:\par
                ; Set the symbol OS9_Module equal to 1\par
                ; and .include the file os9_mod.asm.\par
        \par
                OS9_Module = 1          ; OS9 Module Begin (==1)\par
        ;       .include        "os9_mod.asm"\par
                .nlist\par
                .include        "os9_mod.asm"\par
                .list\par
\page\par
\par
        S19OS9 CONVERSION UTILITY                               PAGE C-4\par
        CREATING AN OS9 MODULE\par
\par
\par
\par
\par
\par
           With  OS9_Module = 1  the following code is inserted into the\par
        code stream:  \par
\par
                .define os9,    "swi2   .byte"  ; os9 macro\par
        \par
                ; Include OS9 Definition Files\par
                ; os9_sys.def Listing Disabled\par
                .nlist\par
                .include        "os9_sys.def"\par
                .list\par
                ; os9_mod.def Listing Disabled\par
                .nlist\par
                .include        "os9_mod.def"\par
                .list\par
        \par
                ; Define The OS9 Module Bank and Areas.\par
                ;\par
                ; Place the module program code in area OS9_Module\par
                ; and the module data in area OS9_Data.\par
                ;\par
        \par
                .bank   OS9_Module      (BASE=0,FSFX=_OS9)\par
                .area   OS9_Module      (REL,CON,BANK=OS9_Module)\par
        \par
                .bank   OS9_Data        (BASE=0,FSFX=_DAT)\par
                .area   OS9_Data        (REL,CON,BANK=OS9_Data)\par
        \par
        \par
                .area   OS9_Module\par
        \par
                OS9_ModBgn = .\par
        \par
                .byte   OS9_ID0, OS9_ID1\par
                                ; OS9 Module Sync Bytes\par
                .word   OS9_ModEnd - OS9_ModBgn\par
                                ; Length (Includes 3 CRC Bytes)\par
                .word   OS9_ModNam - OS9_ModBgn\par
                                ; Offset to Module Name String\par
                .byte   OS9_Typ | OS9_Lng\par
                                ; Type / Language\par
                .byte   OS9_Att | OS9_Rev\par
                                ; Attributes / Revision\par
                .byte   0xFF\par
                                ; Header Parity\par
                .word   OS9_ModExe - OS9_ModBgn\par
                                ; Execution Entry Offset\par
\page\par
\par
        S19OS9 CONVERSION UTILITY                               PAGE C-5\par
        CREATING AN OS9 MODULE\par
\par
\par
                .word   OS9_ModMem\par
                                ; Storage Requirement\par
                ;       OS9_ModData\par
                                ; Module Data\par
\par
\par
        C.2.3  Step 3:  Allocate Storage \par
\par
\par
           The  next  step  is to add the program data storage space for\par
        the program.  Note that the space is only allocated here and  no\par
        initialization is done.  \par
\par
                ;*****-----*****-----*****-----*****-----*****-----*****\par
                ;  LIST UTILITY COMMAND\par
                ;  Syntax: list <pathname> \par
                ;  COPIES INPUT FROM SPECIFIED FILE TO STANDARD OUTPUT\par
        \par
                ; Step 3:\par
                ; Allocate the storage in .area OS9_Data\par
        \par
                .area   OS9_Data\par
        \par
                ; STATIC STORAGE OFFSETS \par
                \par
                BUFSIZ  .equ    200     ; size of input buffer\par
                \par
                Base = .\par
        IPATH = . - Base\par
                .rmb    1               ; input path number\par
        PRMPTR = . - Base\par
                .rmb    2               ; parameter pointer\par
        BUFFER = . - Base\par
                .rmb    BUFSIZ          ; allocate line buffer\par
                .rmb    200             ; allocate stack\par
                .rmb    200             ; room for parameter list\par
        LSTMEM = . - Base\par
\par
\par
\page\par
\par
        S19OS9 CONVERSION UTILITY                               PAGE C-6\par
        CREATING AN OS9 MODULE\par
\par
\par
        C.2.4  Step 4:  Insert The Program Code \par
\par
\par
           Once  the data storage space has been allocated then the pro-\par
        gram code is added to .area OS9_Module:  \par
\par
                ; Step 4:\par
                ; Insert the Module Code into .area OS9_Module\par
        \par
                .area   OS9_Module\par
        \par
        LSTNAM: .strs   "List"          ; String with last byte\par
                                        ; or'd with 0x80\par
        LSTENT: stx     *PRMPTR         ; save parameter ptr\par
                lda     #READ.          ; select read access mode\par
                os9     I$OPEN          ; open input file\par
                bcs     LIST50          ; exit if error\par
                sta     *IPATH          ; save input path number\par
                stx     *PRMPTR         ; save updated param ptr\par
        LIST20: lda     *IPATH          ; load input path number\par
                leax    *BUFFER,U       ; load buffer pointer\par
                ldy     #BUFSIZ         ; maximum bytes to read\par
                os9     I$READLN        ; read line of input\par
                bcs     LIST30          ; exit if error\par
                lda     #1              ; load std. out. path #\par
                os9     I$WRITLN        ; output line\par
                bcc     LIST20          ; Repeat if no error\par
                bra     LIST50          ; exit if error\par
        \par
        LIST30: cmpb    #E$EOF          ; at end of file?\par
                bne     LIST50          ; branch if not\par
                lda     *IPATH          ; load input path number\par
                os9     I$CLOSE         ; close input path\par
                bcs     LIST50          ; ..exit if error\par
                ldx     *PRMPTR         ; restore parameter ptr\par
                lda     ,X\par
                cmpa    #0x0D           ; End of parameter line?\par
                bne     LSTENT          ; ..no, list next file\par
                clrb\par
        LIST50: os9     F$EXIT          ; ... terminate\par
\par
\par
\page\par
\par
        S19OS9 CONVERSION UTILITY                               PAGE C-7\par
        CREATING AN OS9 MODULE\par
\par
\par
        C.2.5  Step 5:  End Assembly By Inserting CRC \par
\par
                ; Step 5:\par
                ; Set the symbol OS9_Module equal to 0\par
                ; and .include the file os9_mod.asm.\par
        \par
                OS9_Module = 0          ; OS9 Module End (==0)\par
        ;       .include        "os9_mod.asm"\par
                .nlist\par
                .include        "os9_mod.asm"\par
                .list\par
        \par
                .end\par
\par
\par
\par
           With  OS9_Module = 0  the following code is the last code in-\par
        serted into the code stream:  \par
\par
                .area   OS9_Module\par
        \par
                ; The 3-Byte Module CRC\par
                .byte   OS9_CRC0, OS9_CRC1, OS9_CRC2\par
        \par
                OS9_ModEnd = .          ; End of OS9 Module\par
\par
\par
        C.3  \cf2 THE CONVERSION UTILITY:  S19OS9\cf1  \par
\par
\par
           Once you have assembled your module into an .S19 file use the\par
        program s19os9 to create the binary OS9 module file.  \par
\par
        The  program s19os9 is invoked from the command line:\par
        \par
                s19os9 mod.s19 -o mod.bin\par
\par
           where  mod.s19  is  the input S19 file and mod.bin is the OS9\par
        binary output file.  \par
\par
           The conversion utility s19os9 reads the .S19 file into an in-\par
        ternal buffer (48K bytes maximum).  As each line  is  read  from\par
        the  .S19  file  the  record length, address, data, and checksum\par
        values are processed checking for invalid characters and a valid\par
        checksum.  \par
\par
           After  the .S19 file has been loaded into the internal buffer\par
        the OS9 module is checked for correct length, and the OS9 Module\par
        ID,  OS9 Initial Header Checksum, and OS9 Initial Module CRC are\par
\page\par
\par
        S19OS9 CONVERSION UTILITY                               PAGE C-8\par
        THE CONVERSION UTILITY:  S19OS9\par
\par
\par
        verified.  After these parameters have been checked then the ac-\par
        tual  header  checksum  and module CRC values are calculated and\par
        replace the Initial Module Checksum and CRC values.  The  final-\par
        ized module is then written to the file mod.bin.  \par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX D\cf1\par
\par
                                  \cf2 RELEASE NOTES\cf1\par
\par
\par
\par
\par
           Asxxxx/ASlink version 5.30 is considered a major release ver-\par
        sion.  \par
\par
\par
        January 2019 Version 5.3\par
        \par
           (1)  Added new assemblers:\par
                as78k0, as8008, as8008s, as8x300, and asz280\par
        \par
           (2)  General assembler updates\par
                added -i to insert assember lines before input files\par
                fixed .macro listing options\par
                fixes related to <q> errors and the -bb option\par
                fix the escape processing of the '\\' character\par
                .include file location illustrations\par
        \par
           (3)  General linker updates\par
                fix library path file strings\par
                rewrite of .lst to .rst translation\par
        \par
           (4)  Assembler specific fixes\par
                as740\par
                changed 2-byte code to 1-byte code definition\par
        \par
                as8048\par
                Corrected bug in "sel" instruction in .8041 mode.\par
        \par
                asf2mc\par
                Corrected documentation for asf2mc processor types.\par
        \par
                aspic\par
                Fixed missing machine type variable definition\par
                Fixed 'tris' instruction\par
        \par
\page\par
\par
        RELEASE NOTES                                           Page D-2\par
        \par
\par
\par
                asst8\par
                Included add/addw/sub/subw sp,#byte modes.\par
                Added the int opcode.  Cleaned up st8addr.c\par
                addressing mode comments and code.\par
\par
\par
        January 2017 Version 5.20\par
        \par
           (1)  Completed the functionality for propagating\par
                the boundary specifications .odd, .even, and\par
                .bndry processed during assembly to the linker.\par
        \par
           (2)  Restored the correct functionality of the\par
                .org directive in areas of REL type.\par
        \par
           (3)  Added Intel Hex legacy start address record\par
                type 1 as an option.\par
\par
\par
\par
        Summary  of changes/additions to the ASxxxx Assemblers from Ver-\par
        sion 5.11 to Version 4.11.  \par
\par
\par
\par
        2015_06_27 Version 5.10 Update 1\par
        \par
           This update for Version 5.10 of the ASxxxx Cross\par
        Assemblers includes fixes for the following errors:\par
        \par
           (1)  The as6500 assembler incorrectly assembled\par
                cpx # and cpy # instructions.\par
        \par
           (2)  An error in asmain.c inhibited the listing of\par
                all .if.. assembly directives.\par
\par
\par
\par
        2014_10_31 Version 5.10\par
        \par
           (1)  Rewrite of listing to relocated listing translation\par
                code in the assembler and the linker base code.\par
                The Assemblers now create a .lst to .rst hint file\par
                with the extension .hlr (when both .lst and .rel\par
                files are created by the assembler).\par
        \par
           (2)  Add as6100 assembler (Intersil IM6100 / Harris HM6100)\par
        \par
           (3)  Add as78k0s assembler (Renesas/NEC 78K/0S) \par
\page\par
\par
        RELEASE NOTES                                           Page D-3\par
        \par
\par
\par
\par
\par
\par
        2013_05_12 Version 5.00 Update 6\par
        \par
           This  update  for  Version  5.00  of the  ASxxxx Cross\par
        Assemblers rolls up updates 1, 2, 3, 4, and 5 with fixes\par
        for the following:\par
        \par
           (1)  Fix asscmp assembler (pre-increment on fetch).\par
        \par
           (2)  Fix aslink error reporting for PC relative modes.\par
\par
\par
\par
        2012_08_01 Version 5.00 Update 5\par
        \par
        Update_05 for the ASxxxx Assembler and Linker Version 5.00\par
        (use 'pkunzip -d u05500.zip' for extraction with MS-DOS)\par
        (use 'unzip -L -a u05500.zip' for extraction with Linux)\par
        \par
               See the note about merging\par
               this update with the\par
               asxv5pxx distribution.\par
        \par
           This  update  for  Version  5.00  of the  ASxxxx Cross\par
        Assemblers rolls up updates 1, 2, 3, and 4 with the addition of\par
        a new assembler and fixes:\par
        \par
           (1)  A new cross assembler for the Fairchild\par
                F8 microprocessor (or Mostek 3870).\par
        \par
           (2)  Minor syntactical changes for ANSI C compatability,\par
                fix type conversion warnings, and update the\par
                various build, make, and test files.\par
        \par
        \par
           Update 4 Items\par
        \par
           (1)  The AS8048 base opcode value for the JMPP\par
                instruction should be B3 and NOT 83.\par
        \par
           (2)  The AS8051 assembler calculates incorrect\par
                offsets when using the program counter, ".",\par
                as a destination in the instructions having\par
                a PC-Relative addressing mode.  These\par
                instructions include: jbc, jb, jbn, jc,\par
                jnc, jz, jnz, cjne, and djnz.\par
        \par
\page\par
\par
        RELEASE NOTES                                           Page D-4\par
        \par
\par
\par
        \par
           Update 3 Items\par
        \par
           (1)  A new cross assembler for the Fairchild\par
                F8 microprocessor (or Mostek 3870).\par
        \par
           (2)  Minor syntactical changes for ANSI C compatability,\par
                fix type conversion warnings, and update the\par
                various build, make, and test files.\par
        \par
           (3)  New cross assemblers for STMicroelectronics\par
                ST6, ST7, and STM8 microprocessors.\par
        \par
           (4)  An ASlink list file update error fix (-u option)\par
                causing some errors not to be inserted into the\par
                created .rst file.\par
        \par
           (5)  An additional ASxxxx assembler option (-v) which\par
                enables checking for out of range signed / unsigned\par
                values in symbol equates and arithmetic operations.\par
                This option has some ambiguities as internally the\par
                assemblers use unsigned arithmetic for calculations.\par
                (e.g. for a 2-byte machine -32768 and 32768 are both\par
                represented as 0x8000)\par
        \par
        \par
           Update 2 Items\par
        \par
           (1)  When using the assembler directive .end to specify\par
                the code entry address the assembler fails to set\par
                the variable .__.END. as a global.  Therefor the\par
                value of .__.END. is not passed to the linker and\par
                the start address frame is always zero.\par
        \par
           (2)  The linker will fail to create a start address frame\par
                when there is no code generated within the area/bank\par
                referenced by the .__.END. variable.\par
        \par
        \par
           Update 1 Items\par
        \par
           (1)  The newest versions of gcc (and perhaps other\par
                compilers) give warnings about missing arguments\par
                in the fprintf() function.  This update replaces\par
                fprintf(arg1, arg2) with fprintf(arg1, "%s", arg2)\par
                in each affected line of code.\par
        \par
           (2)  The newest versions of gcc (and perhaps other\par
                compilers) have defined 'getline' as a standard\par
\page\par
\par
        RELEASE NOTES                                           Page D-5\par
        \par
\par
\par
                function in 'stdio.h'.  This conflicts with the\par
                function 'getline()' in the ASxxxx package.\par
                All references to 'getline()' have been changed\par
                to 'nxtline()'.\par
        \par
        \par
           Before merging the asxv5pxx directory and subdirectories with\par
        the V5.00 distribution the following files/directories must be\par
        deleted:\par
        \par
                [asxv5pxx\\asf2mc8\\f8mch.c\par
                [asxv5pxx\\asf2mc8\\f8adr.c\par
                [asxv5pxx\\asf2mc8\\f8pst.c\par
                [asxv5pxx\\asf2mc8\\f8.h\par
        \par
                [asxv5pxx\\asxmak\\vc6\\asf2mc8]\par
                [asxv5pxx\\asxmak\\vs05\\asf2mc8]\par
\par
\par
\par
        2011_07_24 Version 5.00 Update 4\par
        \par
           This  update  for  Version  5.00  of the  ASxxxx Cross\par
        Assemblers includes fixes for the following errors:\par
        \par
           (1)  The AS8048 base opcode value for the\par
                JMPP instruction should be B3 and NOT 83.\par
        \par
           (2)  The AS8051 assembler calculates incorrect\par
                offsets when using the program counter, ".",\par
                as a destination in the instructions having\par
                a PC-Relative addressing mode.  These\par
                instructions include: jbc, jb, jbn, jc,\par
                jnc, jz, jnz, cjne, and djnz.\par
\par
\par
\par
        2010_10_31 Version 5.00 Update 3\par
        \par
           This  update  for  Version  5.00  of the  ASxxxx Cross\par
        Assemblers rolls up updates 1 and 2 with the addition of\par
        three new assemblers and fixes:\par
        \par
           (1)  New cross assemblers for STMicroelectronics\par
                ST6, ST7, and STM8 microprocessors.\par
        \par
           (2)  An ASlink list file update error fix (-u option)\par
                causing some errors not to be inserted into the\par
                created .rst file.\par
\page\par
\par
        RELEASE NOTES                                           Page D-6\par
        \par
\par
\par
        \par
           (3)  An additional ASxxxx assembler option (-v) which\par
                enables checking for out of range signed / unsigned\par
                values in symbol equates and arithmetic operations.\par
                This option has some ambiguities as internally the\par
                assemblers use unsigned arithmetic for calculations.\par
                (e.g. for a 2-byte machine -32768 and 32768 are both\par
                represented as 0x8000)\par
        \par
        \par
           Update 2 Items\par
        \par
           (1)  When using the assembler directive .end to specify\par
                the code entry address the assembler fails to set\par
                the variable .__.END. as a global.  Therefor the\par
                value of .__.END. is not passed to the linker and\par
                the start address frame is always zero.\par
        \par
           (2)  The linker will fail to create a start address frame\par
                when there is no code generated within the area/bank\par
                referenced by the .__.END. variable.\par
        \par
        \par
           Update 1 Items\par
        \par
           (1)  The newest versions of gcc (and perhaps other\par
                compilers) give warnings about missing arguments\par
                in the fprintf() function.  This update replaces\par
                fprintf(arg1, arg2) with fprintf(arg1, "%s", arg2)\par
                in each affected line of code.\par
        \par
           (2)  The newest versions of gcc (and perhaps other\par
                compilers) have defined 'getline' as a standard\par
                function in 'stdio.h'.  This conflicts with the\par
                function 'getline()' in the ASxxxx package.\par
                All references to 'getline()' have been changed\par
                to 'nxtline()'.\par
\par
\par
\par
        2010_04_01 Version 5.00 Update 2\par
        \par
           This  update  for  Version  5.00  of the  ASxxxx Cross\par
        Assemblers includes fixes for the following errors:\par
        \par
           (1)  When using the assembler directive .end to specify\par
                the code entry address the assembler fails to set\par
                the variable .__.END. as a global.  Therefor the\par
                value of .__.END. is not passed to the linker and\par
\page\par
\par
        RELEASE NOTES                                           Page D-7\par
        \par
\par
\par
                the start address frame is always zero.\par
        \par
           (2)  The linker will fail to create a start address frame\par
                when there is no code generated within the area/bank\par
                referenced by the .__.END. variable.\par
\par
\par
\par
        2010_03_03 Version 5.00 Update 1\par
        \par
           This  update  for  Version  5.00  of the  ASxxxx Cross\par
        Assemblers includes fixes for the following errors:\par
        \par
           (1)  The newest versions of gcc (and perhaps other\par
                compilers) give warnings about missing arguments\par
                in the fprintf() function.  This update replaces\par
                fprintf(arg1, arg2) with fprintf(arg1, "%s", arg2)\par
                in each affected line of code.\par
        \par
        \par
           (2)  The newest versions of gcc (and perhaps other\par
                compilers) have defined 'getline' as a standard\par
                function in 'stdio.h'.  This conflicts with the\par
                function 'getline()' in the ASxxxx package.\par
                All references to 'getline()' have been changed\par
                to 'nxtline()'.\par
\par
\par
\par
        2009_04_01 (Version 5.00)\par
\par
\par
           Added  a general purpose macro processor to the ASxxxx assem-\par
        blers.  \par
\par
           Added  true (t), false (f), and true or false (tf) condition-\par
        als to the  .if / .else / .endif  construct.   The  conditionals\par
        .ift,  .iff,  and .iftf allow replacement of the .else directive\par
        making the .if / .endif construct more readable.  \par
\par
        e.g.    .ift    if condition is true\par
\par
\par
           An  alternate  .if  construction has been added to the ASxxxx\par
        assemblers:  \par
\par
        e.g.    .if    eq,...   if argument == 0\par
\par
\par
\page\par
\par
        RELEASE NOTES                                           Page D-8\par
        \par
\par
\par
           The  immediate  conditional statements have been added to the\par
        ASxxxx  assemblers.   These   conditionals   can   replace   the\par
        .if / ... / .endif construct for a single assembler source line: \par
\par
        e.g.    .iifeq  arg     label:  .word   0x1234\par
\par
\par
           The alternate immediate conditional statements have also been\par
        added to the ASxxxx assemblers:  \par
\par
        e.g.    .iif    eq,arg  label:  .word   0x1234\par
\par
\par
           The  listing  options  for the ASxxxx assemblers has been up-\par
        dated to enable/disable any of the following parameters from be-\par
        ing output to a generated listing file:  \par
\par
            err         error codes\par
            loc         code location\par
            bin         assembler binary code\par
            eqt         symbolic equates / if evaluations\par
            cyc         machine cycles\par
            lin         assembler source line number\par
            src         assembler source code\par
            pag         paging control\par
            lst         listing of .list / .nlist\par
            md          macro definition\par
            me          macro expansion\par
            meb         macro expansion binary code\par
        \par
            !           sets the listing mode to\par
                        !(.list) or !(.nlist) before\par
                        applying the sublist options\par
        \par
        e.g.    .nlist  (lst,pag)       ; disable .list/.nlist listing\par
                                        ; and pagination\par
\par
\par
           The  NOT parameter, !, is used to set the listing mode to the\par
        opposite sense of the .list or .nlist directive.  For example:  \par
\par
            .nlist (!)  is equivalent to .list and\par
            .list  (!)  is equivalent to .nlist\par
\par
        To enable listing and simultaneously disable the cycle count use\par
        the directive:  \par
\par
            .nlist  (!,cyc)\par
\par
\page\par
\par
        RELEASE NOTES                                           Page D-9\par
        \par
\par
\par
        or  if  you  wish  to suppress the listing of the .list / .nlist\par
        directives:  \par
\par
            .nlist              ; disables all listing\par
            .nlist  (!,lst)     ; enables  all listing except\par
                                : .list (...) and .nlist\par
\par
\par
           Normally  the  .list  and .nlist directives are not evaluated\par
        when encountered within a FALSE conditional block.  This default\par
        behavior  can  be  modified by specifying a non zero argument in\par
        the .list or .nlist directive:  \par
\par
            .nlist   1,(!,lst)  ; enables listing even within\par
                                ; a FALSE conditional block\par
\par
\par
\par
           The .bndry assembler directive has been added to ASxxxx.  The\par
        .bndry directive changes the  current  location  address  to  be\par
        evenly divisible by a specified integer value.  \par
\par
        e.g.    .org    0\par
                .bndry  4\par
                ; . == 0\par
        \par
                .org    1\par
                .bndry  4\par
                ; . == 4\par
\par
\par
\par
        2009_02\par
           Added the Cypress PSoc (M8C) ASM8C assembler\par
           to ASxxxx.\par
        \par
        \par
        2008_09\par
           Added the 8048 (8021, 8022, and 8041) AS8048\par
           assembler to Asxxxx.\par
        \par
        \par
        2008_02\par
           Added the SC/MP ASSCMP assembler to ASxxxx.\par
\page\par
\par
        RELEASE NOTES                                          Page D-10\par
        \par
\par
\par
        2008_02_03 (Version 4.11 Update 4)\par
        \par
           An update to the AS2650 assembler to\par
           fix the following errors:\par
        \par
           1)  The indexed addressing mode generates invalid\par
               code by using the first argument register as\par
               the index register: (addr = 0x1234)\par
        \par
                   loda    r0,[addr,r1]          0C F2 34\par
                           this should give      0D F2 34\par
        \par
           2)  The index addressing mode did not generate\par
               an addressing error when the first argument\par
               register was not r0:\par
        \par
                   stra    r1,[addr,r2]  should give an <a>\par
                           error, the source must be r0\par
        \par
        \par
                   loda    r2,[addr,r3]  should give an <a>\par
                           error, the destination must be r0\par
        \par
           3)  The S2650 auto increment and decrement indexing \par
               modes always perform the register update before\par
               the register is used. i.e. +Rn or -Rn.  The\par
               assembler now accepts +Rn or Rn+ as meaning\par
               pre-increment and -Rn or Rn- as meaning\par
               pre-decrement.\par
        \par
        \par
           The AS2650 assembler tstscn files have been updated\par
           for testing the assemblers.\par
        \par
        \par
        \par
        2007_10_21 (Version 4.11 Fix)\par
        \par
           In the AS6816 assembler the instruction ANDP gives\par
           wrong object code. Changed from 37 2A  to  37 3A.\par
\page\par
\par
        RELEASE NOTES                                          Page D-11\par
        \par
\par
\par
        2007_04_01 (Version 4.11 Update 3)\par
        \par
           An update to the ASPIC assembler and\par
           associated fix to ASLINK:\par
        \par
           1)  Change the pic addressing to lo/hi from hi/lo\par
               byte ordering.\par
        \par
           2)  The update fixes an error in the pic17 series\par
               LCALL instruction.\par
        \par
           3)  A rewrite of the pic18 series assembler to change\par
               the PC addressing from 1 per 16-bit word to 1 per\par
               8-bit byte and add the extended instruction set.\par
        \par
           4)  Modify the Linker Merge Mode processing to take into\par
               account the discarded low order bits for PC Relative\par
               Addressing.\par
        \par
           5)  New  tstscn files for testing the assemblers.\par
        \par
        \par
        \par
        2006_11_01 (Version 4.11 Optional Update 2)\par
        \par
           1)  OS9  definition files and an  OS9 assembler module\par
               which creates the OS9 header, code and data areas,\par
               and the module CRC block:\par
        \par
                    os9_mod.def       OS9 Module Definitions\par
                    os9_sys.def       OS9 Sytem  Definitions\par
                    os9_mod.asm       OS9 Module Begin / End Code\par
        \par
           2)  a program, s19os9, to post-process  assembled  OS9\par
               modules in  S19  format into  binary  OS9  modules\par
               with the appropriate  header  checksum  and module\par
               CRC values calculated.\par
        \par
           3)  new  make  and  project files which may be used to\par
               compile the s19os9 program.\par
\page\par
\par
        RELEASE NOTES                                          Page D-12\par
        \par
\par
\par
        2006_11_01 (Version 4.11 Optional Update 01)\par
        \par
           The .list  and  .nlist  directives  are  now  modified\par
           by .if / .else / .endif  processing  so  that they are\par
           active only in a TRUE clause.\par
        \par
           The  .page  and  .include  directives are now modified\par
           by the .list and .nlist  directives so that pagination\par
           occurs only when listing is active.\par
        \par
           The new  default functionality for the  .list,  .nlist\par
           and .page directives may  be  modified by including an\par
           optional argument  in the  directive as shown here for\par
           the the .list directive:\par
        \par
              .list    arg\par
        \par
           a non-zero argument invokes the directive irrespective\par
           of the .if / .else / .endif status.\par
        \par
        \par
        \par
        2006_07_26 (Version 4.11 Patch 01)\par
        \par
           The  assembly  of  a  direct  page  instruction with a\par
           numeric  constant  causes a program  crash when a .rel\par
           file is created. e.g.:\par
        \par
                andb    *0x02\par
        \par
        \par
           The  use  of  a  symbolic  constant  or  symbol plus a\par
           a constant compiles normally.\par
        \par
                val = 0x02\par
        \par
                andb    *val\par
                andb    *extern+0x01\par
        \par
        \par
           The assemblers effected are:\par
        \par
                as6809\par
                as6812\par
                ash8\par
                aspic\par
\page\par
\par
        RELEASE NOTES                                          Page D-13\par
        \par
\par
\par
           Summary  of  changes/additions  to the ASxxxx Assemblers from\par
        Version 4.10 to Version 4.11.  \par
\par
             1.  Incorporated  the patches contained in p01410.zip which\par
                 corrected a coding error that affected BANKS containing\par
                 multiple ABS areas or mixed AREA types.  \par
\par
             2.  Incorporated  the patches contained in p02410.zip which\par
                 corrected improper use of  R_USGN  in  most  addressing\par
                 modes  in AS6500.  This caused unexpected <a> errors in\par
                 V4.xx because of the ASxxxx core change to  32-bit  in-\par
                 tegers and arithmetic.  \par
\par
             3.  Incorporated  the patches contained in p03410.zip which\par
                 corrected errors in the  .local  and  .globl  assembler\par
                 directive  processing  routine that introduced unwanted\par
                 side effects for variable and symbol definition  files.\par
                 These  effects included improper definitions and incor-\par
                 rect error warnings.  \par
\par
             4.  The  following  new subdirectories and their files have\par
                 been added to the asxtst directory:  \par
\par
                  *  areabank     Area and Bank Processing Test \par
                     This  directory  contains  several  test  programs:\par
                     ts.asm (single file - multiple areas), tm1.asm  and\par
                     tm2.asm  (multiple  file  -  multiple  areas),  and\par
                     tbm.asm, tbm1.asm, and tbm2.asm ( multiple  file  -\par
                     multiple  areas  within  a  bank) and several other\par
                     files which verify the  correct  operation  of  the\par
                     linker  when used with a single linked file, multi-\par
                     ple linked files having no  banking,  and  multiple\par
                     linked  files  with banking.  These reference files\par
                     show in detail how the .area and  .bank  directives\par
                     work together.  \par
\par
                  *  equtst       Equate Processing Test \par
                     This  directory  contains a test file for verifying\par
                     the operation of the .globl, .local, .equ, .gblequ,\par
                     and  .lclequ  directives  and  the  =,  ==,  and =:\par
                     equalities.  \par
\par
                  *  inctst       Nested Include File Test \par
\par
                  *  itst         Include File Error Reporting Test \par
\par
\par
\page\par
\par
        RELEASE NOTES                                          Page D-14\par
        \par
\par
\par
             5.  Incorporated  the updates contained in u01410.zip which\par
                 added 10 undocumented 8085 instructions to  the  AS8085\par
                 assembler.  \par
\par
\par
\par
\par
\par
\par
           Summary  of  changes/additions  to the ASxxxx Assemblers from\par
        Version 4.00 to Version 4.10.  \par
\par
             1.  Added new assemblers for the Zilog EZ80, Zilog Z8, Sig-\par
                 netics 2650, and Fujitsu F2MC8(L,FX) processors.  \par
\par
             2.  Added the processor cycle count option (-c) to all pro-\par
                 cessors.  \par
\par
             3.  Several   of  the  assemblers  (ASZ80,  ASRAB,  AS6805,\par
                 AS6808, AS6812, ASF2MC8, ...) now  support  subsets  or\par
                 supersets  of  their basic opcodes by the use of assem-\par
                 bler specific directives.  \par
\par
             4.  Added .ifeq, .ifne, .iflt, .ifgt, .ifle, and .ifge con-\par
                 ditional assembly directives.  \par
\par
             5.  Added  support  for the Tandy Color Computer Disc Basic\par
                 binary file format to ASLINK.  \par
\par
             6.  Problem:  \par
                 When  an area size is equal to the 'address space size'\par
                 the size parameter is reported as 0.  (A normal  condi-\par
                 tion  caused  by  address rollover to 0.) Aslink inter-\par
                 preted this as a 0 size.  \par
\par
                 Fix:  \par
                 A  new area 'Output Code Flag' bit was defined to indi-\par
                 cate when data is  defined  in  an  area.   ASxxxx  and\par
                 Aslink  have  been updated to set and process this area\par
                 flag bit.  \par
\par
             7.  Problem:  \par
                 The  use  of  the .end assembler directive in an Asxxxx\par
                 assembler would cause Aslink  to  output  the  optional\par
                 start address in all output files.  \par
\par
                 Fix:  \par
                 Updated  Aslink  to  output  the optional start address\par
                 only in the output file associated with  the  area/bank\par
\page\par
\par
        RELEASE NOTES                                          Page D-15\par
        \par
\par
\par
                 containing the .end directive.  \par
\par
             8.  Problem:  \par
                 Aslink  creates  output  files for banks with no output\par
                 data.  \par
\par
                 Fix:  \par
                 Aslink  now  deletes  any created output file for banks\par
                 with no data.  \par
\par
             9.  Incorporated  the  patches  contained in p01400.zip for\par
                 files t1802.asm and 1802pst.c to correct for  an  error\par
                 in  the  opcodes  generated  for  the  BM,  BL, and BNF\par
                 mnemonics.  \par
\par
            10.  Incorporated  the  patches  contained in p02400.zip for\par
                 file ds8adr.c to correct for an  error  in  the  direct\par
                 page addressing mode of AS8xCxxx.  \par
\par
            11.  Incorporated  the  patches  contained in p03400.zip for\par
                 file rabmch.c to correct for an error in the processing\par
                 of the "ret cc" instruction.  \par
\par
            12.  Made many corrections to internal code comments.  \par
\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX E\cf1\par
\par
                                  \cf2 CONTRIBUTORS\cf1\par
\par
\par
\par
        Thanks  to Marko Makela for his contribution of the AS6500 cross\par
        assembler.  \par
\par
                Marko Makela\par
                Sillitie 10 A\par
                01480 Vantaa\par
                Finland\par
                Internet: Marko dot Makela at Helsinki dot Fi\par
                EARN/BitNet: msmakela at finuh\par
\par
\par
\par
\par
        Thanks  to John Hartman for his contribution of the AS8051 cross\par
        assembler and updates to the ASxxxx and ASLINK internals.  \par
\par
                John L. Hartman\par
                jhartman at compuserve dot com\par
                noice at noicedebugger dot com\par
\par
\par
\par
\par
        Thanks  to  G.   Osborn  for  his  contributions  to LKS19.C and\par
        LKIHX.C.  \par
\par
                G. Osborn\par
                gary at s-4 dot com\par
\par
\par
\par
\par
\page\par
\par
        CONTRIBUTORS                                            Page E-2\par
        \par
\par
\par
        Thanks to Ken Hornstein for his contribution of object libraries\par
        contained in LKLIBR.C.  \par
\par
                Ken Hornstein\par
                kenh at cmf dot nrl dot navy dot mil\par
\par
\par
\par
\par
        Thanks  to  Bill  McKinnon for his contributions to the AS8XCXXX\par
        cross assembler for the DS8XCXXX series of microprocessors.  \par
\par
                Bill McKinnon\par
                w_mckinnon at conknet dot com\par
\par
\par
\par
\par
        Thanks  to Roger Ivie for his contribution of the ASGB cross as-\par
        sembler for the GameBoy.  \par
\par
                Roger Ivie\par
                ivie at cc dot usu dot edu\par
\par
\par
\par
\par
        Thanks  to  Uwe  Steller for his contribution of the AS740 cross\par
        assembler.  \par
\par
                Uwe Stellar\par
                Uwe dot Steller at t-online dot de\par
\par
\par
\par
\par
        Thanks  to  Shujen Chen for his contribution of the AS1802 cross\par
        assembler.  \par
\par
                Shugen Chen\par
                DeVry University\par
                1221 N. Swift Road\par
                schen at devry dot edu\par
\par
\par
\par
\par
\page\par
\par
        CONTRIBUTORS                                            Page E-3\par
        \par
\par
\par
        Thanks  to  Edgar Puehringer for his contribution of the AS61860\par
        cross assembler.  \par
\par
                Edgar Puehringer\par
                edgar_pue at yahoo dot com\par
\par
\par
\par
\par
        Thanks to Ulrich Raich and Razaq Ijoduola for their contribution\par
        of the ASRAB cross assembler.  \par
\par
                Ulrich Raich and Razaq Ijoduola\par
                PS Division\par
                CERN\par
                CH-1211 Geneva-23\par
        \par
                Ulrich dot Raich at cern dot ch\par
\par
\par
\par
\par
        Thanks  to Patrick Head for his contribution of the ASEZ80 cross\par
        assembler.  \par
\par
                Patrick Head\par
                patrick at phead dot net\par
\par
\par
\par
\par
        Thanks  to  Boisy  G.   Pitre for contributing the .ifeq, .ifne,\par
        .ifgt, .iflt, .ifle, and .ifge conditional  directives  and  the\par
        Tandy Color Computer Disk Basic binary output for ASLINK.  \par
\par
                Boisy G. Pitre\par
                boisy at boisypitre dot com\par
\par
\par
\par
\par
\page\par
\par
        CONTRIBUTORS                                            Page E-4\par
        \par
\par
\par
        Thanks  to  Mike  McCarty for his contributions to the processor\par
        cycle count option of the ASxxxx Assemblers.  \par
\par
                Mike McCarty\par
                mike dot mccarty at sbcglobal dot net\par
\par
\par
\par
\par
        Thanks  to  Mengjin Su for his contribution of the PIC18Fxxx Ex-\par
        tended Instructions.  \par
\par
                Mengjin Su\par
                msu at micron dot com\par
\par
\par
\par
\par
        Thanks  to  Carl  Rash for his contribution of the Visual Studio\par
        2010 project files.  \par
\par
                Carl Rash\par
                crash at triad dot rr dot com\par
\par
\par
\par
\par
        Thanks to John Coffman for creating the Z280 assembler.  \par
\par
                John Coffman\par
                johninsd at gmail dot com\par
\par
\par
\par
\par
        Thanks  to  Mike  Naberezny  for  suggesting the addition of the\par
        as78k0 assembler.  \par
                Mike Naberezny\par
                mike at naberezny dot com\par
\par
\par
\par
\par
\par
           And  thanks  to  all  those  who  took  the  time to send bug\par
        reports, suggest changes, or simply sent a  note  of  encourage-\par
        ment.  These were and are greatly appreciated.  Thank you.  \par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX AA\cf1\par
\par
                                \cf2 ASCHECK ASSEMBLER\cf1\par
\par
\par
\par
\par
           The  ASxxxx assembler ASCHECK is used to test the machine in-\par
        dependent features of the ASxxxx assemblers.  The  source  files\par
        for  the ASCHECK assembler are also useful as a template for the\par
        development of a new ASxxxx assembler.  \par
\par
           The  ASCHECK  assembler has all the ASxxxx directives enabled\par
        for testing all features of the assemblers.  \par
\page\par
\par
        ASCHECK ASSEMBLER                                      Page AA-2\par
        \par
\par
\par
        AA.1  .opcode DIRECTIVE \par
\par
        Format:  \par
\par
                .opcode    n \par
\par
        The  .opcode  directive creates a single byte of code having the\par
        value n and having cycle counts defined in the following table: \par
\par
        /*--*--* 0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F */\par
        /*--*--* -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  - */\par
        /*00*/   0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,\par
        /*10*/  UN, 1,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,\par
        /*20*/  UN,UN, 2,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,\par
        /*30*/  UN,UN,UN, 3,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,\par
        /*40*/  UN,UN,UN,UN, 4,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,\par
        /*50*/  UN,UN,UN,UN,UN, 5,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,\par
        /*60*/  UN,UN,UN,UN,UN,UN, 6,UN,UN,UN,UN,UN,UN,UN,UN,UN,\par
        /*70*/  UN,UN,UN,UN,UN,UN,UN, 7,UN,UN,UN,UN,UN,UN,UN,UN,\par
        /*80*/  UN,UN,UN,UN,UN,UN,UN,UN, 8,UN,UN,UN,UN,UN,UN,UN,\par
        /*90*/  UN,UN,UN,UN,UN,UN,UN,UN,UN, 9,UN,UN,UN,UN,UN,UN,\par
        /*A0*/  UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,10,UN,UN,UN,UN,UN,\par
        /*B0*/  UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,11,UN,UN,UN,UN,\par
        /*C0*/  UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,12,UN,UN,UN,\par
        /*D0*/  UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,13,UN,UN,\par
        /*E0*/  UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,14,UN,\par
        /*F0*/  UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,UN,15\par
\par
        The  UN symbols indicate 'undefined cycles' where no cycle count\par
        will be output.  \par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX AB\cf1\par
\par
                                \cf2 AS1802 ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        AB.1  ACKNOWLEDGMENT \par
\par
\par
           Thanks  to  Shujen  Chen  for  his contribution of the AS1802\par
        cross assembler.  \par
\par
                Shujen Chen\par
                DeVry University\par
                Tinley Park, IL\par
                schen at tp dot devry dot edu\par
\par
\par
        AB.2  1802 REGISTER SET \par
\par
        The following is a list of the 1802 registers used by AS1802:  \par
\par
                r0-r15  -       8-bit registers\par
                sp      -       register r2\par
                pc      -       register r3\par
                call    -       register r4\par
                return  -       register r5\par
                argr    -       register r6\par
\par
\par
\page\par
\par
        AS1802 ASSEMBLER                                       PAGE AB-2\par
        1802 INSTRUCTION SET\par
\par
\par
        AB.3  1802 INSTRUCTION SET \par
\par
\par
           The  following  tables  list all 1802 mnemonics recognized by\par
        the AS1802 assembler.  The designation [] refers to  a  required\par
        addressing  mode  argument.   The  following  list specifies the\par
        format for each addressing mode supported by AS1802:  \par
\par
                #data           immediate data\par
                                byte or word data\par
        \par
                expr            expression\par
        \par
                Rn              register addressing\par
        \par
                label           branch label\par
\par
        The terms data, expr, and label may be expressions.  \par
\par
           Note  that  not all addressing modes are valid with every in-\par
        struction, refer to the 1802 technical data for valid modes.  \par
\par
\par
        AB.3.1  1802 Inherent Instructions \par
\par
                adc             add             and\par
                dis             idl             irx\par
                ldx             ldxa            lsdf\par
                lsie            lskp            lsnf\par
                lsnq            lsnz            lsq\par
                lsz             mark            nop\par
                or              req             ret\par
                rshl            rshr            sav\par
                sd              sdb             seq\par
                shl             shlc            shr\par
                shrc            skp             sm\par
                smb             stxd            xor\par
\page\par
\par
        AS1802 ASSEMBLER                                       PAGE AB-3\par
        1802 INSTRUCTION SET\par
\par
\par
        AB.3.2  1802 Short Branch Instructions \par
\par
                b1      label           b2      label\par
                b3      label           b4      label\par
                bdf     label           bge     label\par
                bl      label           bm      label\par
                bn1     label           bn2     label\par
                bn3     label           bn4     label\par
                bnf     label           bnq     label\par
                bnz     label           bpz     label\par
                bq      label           br      label\par
                bz      label           nbr     label\par
\par
\par
        AB.3.3  1802 Long Branch Instructions \par
\par
                lbdf    label           lbnf    label\par
                lbnq    label           lbnz    label\par
                lbq     label           lbr     label\par
                lbz     label           nlbr    label\par
\par
\par
        AB.3.4  1802 Immediate Instructions \par
\par
                adci    #data           adi     #data\par
                ani     #data           ldi     #data\par
                ori     #data           sdbi    #data\par
                sdi     #data           smbi    #data\par
                smi     #data           xri     #data\par
\par
\par
        AB.3.5  1802 Register Instructions \par
\par
                dec     Rn              ghi     Rn\par
                glo     Rn              inc     Rn\par
                lda     Rn              ldn     Rn\par
                phi     Rn              plo     Rn\par
                sep     Rn              sex     Rn\par
                str     Rn\par
\par
\par
\page\par
\par
        AS1802 ASSEMBLER                                       PAGE AB-4\par
        1802 INSTRUCTION SET\par
\par
\par
        AB.3.6  1802 Input and Output Instructions \par
\par
                inp     expr\par
                out     expr\par
\page\par
\par
        AS1802 ASSEMBLER                                       PAGE AB-5\par
        1802 INSTRUCTION SET\par
\par
\par
        AB.3.7  CDP1802 COSMAC Microprocessor Instruction Set Summary \par
\par
        ----------------------------------------------------------------\par
        |                                                              |\par
        |                                                              |\par
        |                             RCA                              |\par
        |                                                              |\par
        |               1     88888      000      22222                |\par
        |              11    8     8    0   0    2     2               |\par
        |               1    8     8   0   0 0        2                |\par
        |               1     88888    0  0  0     222                 |\par
        |               1    8     8   0 0   0    2                    |\par
        |               1    8     8    0   0    2                     |\par
        |              111    88888      000     2222222               |\par
        |                                                              |\par
        |    CDP1802 COSMAC Microprocessor Instruction Set Summary     |\par
        |                                                              |\par
        |                                                              |\par
        |                                                              |\par
        |                                                              |\par
        |Written by     Jonathan Bowen                                 |\par
        |               Programming Research Group                     |\par
        |               Oxford University Computing Laboratory         |\par
        |               8-11 Keble Road                                |\par
        |               Oxford OX1 3QD                                 |\par
        |               England                                        |\par
        |                                                              |\par
        |               Tel +44-865-273840                             |\par
        |                                                              |\par
        |Created        August 1981                                    |\par
        |Updated        April 1985                                     |\par
        |Issue          1.3                Copyright (C) J.P.Bowen 1985|\par
        ----------------------------------------------------------------\par
\page\par
\par
        AS1802 ASSEMBLER                                       PAGE AB-6\par
        1802 INSTRUCTION SET\par
\par
\par
        ----------------------------------------------------------------\par
        |                                                              |\par
        |             CDP1802 COSMAC Microprocessor Pinout             |\par
        |                                                              |\par
        |                    _________    _________                    |\par
        |                  _|         \\__/         |_                  |\par
        |       --> CLOCK |_|1                   40|_| Vdd             |\par
        |            ____  _|                      |_  ____            |\par
        |        --> WAIT |_|2                   39|_| XTAL -->        |\par
        |           _____  _|                      |_  ______          |\par
        |       --> CLEAR |_|3                   38|_| DMA IN <--      |\par
        |                  _|                      |_  _______         |\par
        |           <-- Q |_|4                   37|_| DMA OUT <--     |\par
        |                  _|                      |_  _________       |\par
        |         <-- SC1 |_|5                   36|_| INTERRUPT <--   |\par
        |                  _|                      |_  ___             |\par
        |         <-- SC0 |_|6                   35|_| MWR <--         |\par
        |             ___  _|                      |_                  |\par
        |         <-- MRD |_|7                   34|_| TPA -->         |\par
        |                  _|                      |_                  |\par
        |      <--> BUS 7 |_|8                   33|_| TPB -->         |\par
        |                  _|                      |_                  |\par
        |      <--> BUS 6 |_|9                   32|_| MA7 -->         |\par
        |                  _|                      |_                  |\par
        |      <--> BUS 5 |_|10       1802       31|_| MA6 -->         |\par
        |                  _|                      |_                  |\par
        |      <--> BUS 4 |_|11                  30|_| MA5 -->         |\par
        |                  _|                      |_                  |\par
        |      <--> BUS 3 |_|12                  29|_| MA4 -->         |\par
        |                  _|                      |_                  |\par
        |      <--> BUS 2 |_|13                  28|_| MA3 -->         |\par
        |                  _|                      |_                  |\par
        |      <--> BUS 1 |_|14                  27|_| MA2 -->         |\par
        |                  _|                      |_                  |\par
        |      <--> BUS 0 |_|15                  26|_| MA1 -->         |\par
        |                  _|                      |_                  |\par
        |             Vcc |_|16                  25|_| MA0 -->         |\par
        |                  _|                      |_  ___             |\par
        |          <-- N2 |_|17                  24|_| EF1 <--         |\par
        |                  _|                      |_  ___             |\par
        |          <-- N1 |_|18                  23|_| EF2 <--         |\par
        |                  _|                      |_  ___             |\par
        |          <-- N0 |_|19                  22|_| EF3 <--         |\par
        |                  _|                      |_  ___             |\par
        |             Vss |_|20                  21|_| EF4 <--         |\par
        |                   |______________________|                   |\par
        |                                                              |\par
        |                                                              |\par
        ----------------------------------------------------------------\par
\page\par
\par
        AS1802 ASSEMBLER                                       PAGE AB-7\par
        1802 INSTRUCTION SET\par
\par
\par
        ----------------------------------------------------------------\par
        |Mnem. |Op|F|Description                 |Notes                |\par
        |------+--+-+----------------------------+---------------------|\par
        |ADC   |74|*|Add with Carry              |\{DF,D\}=mx+D+DF       |\par
        |ADCI i|7C|*|Add with Carry Immediate    |\{DF,D\}=mp+D+DF,p=p+1 |\par
        |ADD   |F4|*|Add                         |\{DF,D\}=mx+D          |\par
        |ADI  i|FC|*|Add Immediate               |\{DF,D\}=mp+D,p=p+1    |\par
        |AND   |F2|*|Logical AND                 |D=\{mx\}&D             |\par
        |ANI  i|FA|*|Logical AND Immediate       |D=\{mp\}&D,p=p+1       |\par
        |B1   a|34|-|Branch if EF1               |If EF1=1 BR else NBR |\par
        |B2   a|35|-|Branch if EF2               |If EF2=1 BR else NBR |\par
        |B3   a|36|-|Branch if EF3               |If EF3=1 BR else NBR |\par
        |B4   a|37|-|Branch if EF4               |If EF4=1 BR else NBR |\par
        |BDF  a|33|-|Branch if DF                |If DF=1 BR else NBR  |\par
        |BGE  a|33|-|Branch if Greater or Equal  |See BDF              |\par
        |BL   a|38|-|Branch if Less              |See BNF BR else NBR  |\par
        |BM   a|38|-|Branch if Minus             |See BNF              |\par
        |BN1  a|3C|-|Branch if Not EF1           |If EF1=0 BR else NBR |\par
        |BN2  a|3D|-|Branch if Not EF2           |If EF2=0 BR else NBR |\par
        |BN3  a|3E|-|Branch if Not EF3           |If EF3=0 BR else NBR |\par
        |BN4  a|3F|-|Branch if Not EF4           |If EF4=0 BR else NBR |\par
        |BNF  a|38|-|Branch if Not DF            |If DF=0 BR else NBR  |\par
        |BNQ  a|39|-|Branch if Not Q             |If Q=0 BR else NBR   |\par
        |BNZ  a|3A|-|Branch if D Not Zero        |If D=1 BR else NBR   |\par
        |BPZ  a|33|-|Branch if Positive or Zero  |See BDF              |\par
        |BQ   a|31|-|Branch if Q                 |If Q=1 BR else NBR   |\par
        |BR   a|30|-|Branch                      |pl=mp                |\par
        |BZ   a|32|-|Branch if D Zero            |If D=0 BR else NBR   |\par
        |DEC  r|2N|-|Decrement register N        |n=n-1                |\par
        |DIS   |71|-|Disable                     |\{X,P\}=mx,x=x+1,IE=0  |\par
        |GHI  r|9N|-|Get High register N         |D=nh                 |\par
        |GLO  r|8N|-|Get Low register N          |D=nl                 |\par
        |IDL   |00|-|Idle (wait for DMA or int.) |Bus=m0               |\par
        |INC  r|1N|-|Increment register N        |n=n+1                |\par
        |INP  d|6N|-|Input (N=d+8=9-F)           |mx=Bus,D=Bus,Nlines=d|\par
        |IRX   |60|-|Increment register X        |x=x+1                |\par
        |LBDF a|C3|-|Long Branch if DF           |If DF=1 LBR else LNBR|\par
        |LBNF a|C8|-|Long Branch if Not DF       |If DF=0 LBR else LNBR|\par
        |LBNQ a|C9|-|Long Branch if Not Q        |If Q=0 LBR else LNBR |\par
        |LBNZ a|CA|-|Long Branch if D Not Zero   |If D=1 LBR else LNBR |\par
        ----------------------------------------------------------------\par
\page\par
\par
        AS1802 ASSEMBLER                                       PAGE AB-8\par
        1802 INSTRUCTION SET\par
\par
\par
        ----------------------------------------------------------------\par
        |Mnem. |Op|F|Description                 |Notes                |\par
        |------+--+-+----------------------------+---------------------|\par
        |LBQ  a|C1|-|Long Branch if Q            |If Q=1 LBR else LNBR |\par
        |LBR  a|C0|-|Long Branch                 |p=mp                 |\par
        |LBZ  a|C2|-|Long Branch if D Zero       |If D=0 LBR else LNBR |\par
        |LDA  r|4N|-|Load advance                |D=mn,n=n+1           |\par
        |LDI  i|F8|-|Load Immediate              |D=mp,p=p+1           |\par
        |LDN  r|0N|-|Load via N (except N=0)     |D=mn                 |\par
        |LDX   |F0|-|Load via X                  |D=mx                 |\par
        |LDXA  |72|-|Load via X and Advance      |D=mx,x=x+1           |\par
        |LSDF  |CF|-|Long Skip if DF             |If DF=1 LSKP else NOP|\par
        |LSIE  |CC|-|Long Skip if IE             |If IE=1 LSKP else NOP|\par
        |LSKP  |C8|-|Long Skip                   |See NLBR             |\par
        |LSNF  |C7|-|Long Skip if Not DF         |If DF=0 LSKP else NOP|\par
        |LSNQ  |C5|-|Long Skip if Not Q          |If Q=0 LSKP else NOP |\par
        |LSNZ  |C6|-|Long Skip if D Not Zero     |If D=1 LSKP else NOP |\par
        |LSQ   |CD|-|Long Skip if Q              |If Q=1 LSKP else NOP |\par
        |LSZ   |CE|-|Long Skip if D Zero         |If D=0 LSKP else NOP |\par
        |MARK  |79|-|Push X,P to stack  (T=\{X,P\})|m2=\{X,P\},X=P,r2=r2-1 |\par
        |NBR   |38|-|No short Branch (see SKP)   |p=p+1                |\par
        |NLBR a|C8|-|No Long Branch (see LSKP)   |p=p+2                |\par
        |NOP   |C4|-|No Operation                |Continue             |\par
        |OR    |F1|*|Logical OR                  |D=\{mx\}vD             |\par
        |ORI  i|F9|*|Logical OR Immediate        |D=\{mp\}vD,p=p+1       |\par
        |OUT  d|6N|-|Output (N=d=1-7)            |Bus=mx,x=x+1,Nlines=d|\par
        |PLO  r|AN|-|Put Low register N          |nl=D                 |\par
        |PHI  r|BN|-|Put High register N         |nh=D                 |\par
        |REQ   |7A|-|Reset Q                     |Q=0                  |\par
        |RET   |70|-|Return                      |\{X,P\}=mx,x=x+1,IE=1  |\par
        |RSHL  |7E|*|Ring Shift Left             |See SHLC             |\par
        |RSHR  |76|*|Ring Shift Right            |See SHRC             |\par
        ----------------------------------------------------------------\par
\page\par
\par
        AS1802 ASSEMBLER                                       PAGE AB-9\par
        1802 INSTRUCTION SET\par
\par
\par
        ----------------------------------------------------------------\par
        |Mnem. |Op|F|Description                 |Notes                |\par
        |------+--+-+----------------------------+---------------------|\par
        |SAV   |78|-|Save                        |mx=T                 |\par
        |SDB   |75|*|Subtract D with Borrow      |\{DF,D\}=mx-D-DF       |\par
        |SDBI i|7D|*|Subtract D with Borrow Imm. |\{DF,D\}=mp-D-DF,p=p+1 |\par
        |SD    |F5|*|Subtract D                  |\{DF,D\}=mx-D          |\par
        |SDI  i|FD|*|Subtract D Immediate        |\{DF,D\}=mp-D,p=p+1    |\par
        |SEP  r|DN|-|Set P                       |P=N                  |\par
        |SEQ   |7B|-|Set Q                       |Q=1                  |\par
        |SEX  r|EN|-|Set X                       |X=N                  |\par
        |SHL   |FE|*|Shift Left                  |\{DF,D\}=\{DF,D,0\}<-    |\par
        |SHLC  |7E|*|Shift Left with Carry       |\{DF,D\}=\{DF,D\}<-      |\par
        |SHR   |F6|*|Shift Right                 |\{D,DF\}=->\{0,D,DF\}    |\par
        |SHRC  |76|*|Shift Right with Carry      |\{D,DF\}=->\{D,DF\}      |\par
        |SKP   |38|-|Short Skip                  |See NBR              |\par
        |SMB   |77|*|Subtract Memory with Borrow |\{DF,D\}=D-mx-\{~DF\}    |\par
        |SMBI i|7F|*|Subtract Mem with Borrow Imm|\{DF,D\}=D-mp-~DF,p=p+1|\par
        |SM    |F7|*|Subtract Memory             |\{DF,D\}=D-mx          |\par
        |SMI  i|FF|*|Subtract Memory Immediate   |\{DF,D\}=D-mp,p=p+1    |\par
        |STR  r|5N|-|Store via N                 |mn=D                 |\par
        |STXD  |73|-|Store via X and Decrement   |mx=D,x=x-1           |\par
        |XOR   |F3|*|Logical Exclusive OR        |D=\{mx\}.D             |\par
        |XRI  i|FB|*|Logical Exclusive OR Imm.   |D=\{mp\}.D,p=p+1       |\par
        |      |  |-|Interrupt action            |T=\{X,P\},P=1,X=2,IE=0 |\par
        |------+--+-+--------------------------------------------------|\par
        |      |??| |8-bit hexadecimal opcode                          |\par
        |      |?N| |Opcode with register/device in low 4/3 bits       |\par
        |      |  |-|DF flag unaffected                                |\par
        |      |  |*|DF flag affected                                  |\par
        ----------------------------------------------------------------\par
\page\par
\par
        AS1802 ASSEMBLER                                      PAGE AB-10\par
        1802 INSTRUCTION SET\par
\par
\par
        ----------------------------------------------------------------\par
        |Arguments  |                     Notes                        |\par
        |-----------+--------------------------------------------------|\par
        | mn        |Register addressing                               |\par
        | mx        |Register-indirect addressing                      |\par
        | mp        |Immediate addressing                              |\par
        | R( )      |Stack addressing (implied addressing)             |\par
        |-----------+--------------------------------------------------|\par
        | D         |Data register (accumulator, 8-bit)                |\par
        | DF        |Data Flag (ALU carry, 1-bit)                      |\par
        | I         |High-order instruction digit (4-bit)              |\par
        | IE        |Interrupt Enable (1-bit)                          |\par
        | N         |Low-order instruction digit (4-bit)               |\par
        | P         |Designates Program Counter register (4-bit)       |\par
        | Q         |Output flip-flop (1-bit)                          |\par
        | R         |1 of 16 scratchpad Registers(16-bit)              |\par
        | T         |Holds old \{X,P\} after interrupt (X high, 8-bit)   |\par
        | X         |Designates Data Pointer register (4-bit)          |\par
        |-----------+--------------------------------------------------|\par
        | mn        |Memory byte addressed by R(N)                     |\par
        | mp        |Memory byte addressed by R(P)                     |\par
        | mx        |Memory byte addressed by R(X)                     |\par
        | m?        |Memory byte addressed by R(?)                     |\par
        | n         |Short form for R(N)                               |\par
        | nh        |High-order byte of R(N)                           |\par
        | nl        |Low-order byte of R(N)                            |\par
        | p         |Short form for R(P)                               |\par
        | pl        |Low-order byte of R(P)                            |\par
        | r?        |Short form for R(?)                               |\par
        | x         |Short form for R(X)                               |\par
        |-----------+--------------------------------------------------|\par
        | R(N)      |Register specified by N                           |\par
        | R(P)      |Current program counter                           |\par
        | R(X)      |Current data pointer                              |\par
        | R(?)      |Specific register                                 |\par
        ----------------------------------------------------------------\par
\page\par
\par
        AS1802 ASSEMBLER                                      PAGE AB-11\par
        1802 INSTRUCTION SET\par
\par
\par
        ----------------------------------------------------------------\par
        |Arguments  |                     Notes                        |\par
        |-----------+--------------------------------------------------|\par
        | a         |Address expression                                |\par
        | d         |Device number (1-7)                               |\par
        | i         |Immediate expression                              |\par
        | n         |Expression                                        |\par
        | r         |Register (hex digit or an R followed by hex digit)|\par
        |-----------+--------------------------------------------------|\par
        | +         |Arithmetic addition                               |\par
        | -         |Arithmetic subtraction                            |\par
        | *         |Arithmetic multiplication                         |\par
        | /         |Arithmetic division                               |\par
        | &         |Logical AND                                       |\par
        | ~         |Logical NOT                                       |\par
        | v         |Logical inclusive OR                              |\par
        | .         |Logical exclusive OR                              |\par
        | <-        |Rotate left                                       |\par
        | ->        |Rotate right                                      |\par
        | \{ \}       |Combination of operands                           |\par
        | ?         |Hexadecimal digit (0-F)                           |\par
        | -->       |Input pin                                         |\par
        | <--       |Output pin                                        |\par
        | <-->      |Input/output pin                                  |\par
        ----------------------------------------------------------------\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX AC\cf1\par
\par
                                \cf2 AS2650 ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        AC.1  2650 REGISTER SET \par
\par
        The following is a list of the 2650 registers used by AS2650:  \par
\par
                r0,r1   -       8-bit accumulators\par
                r2,r3\par
\par
\par
        AC.2  2650 INSTRUCTION SET \par
\par
\par
           The  following  tables  list all 2650 mnemonics recognized by\par
        the AS2650 assembler.  The designation [] refers to  a  required\par
        addressing  mode  argument.   The designation CC refers to a re-\par
        quired condition code argument:   .eq.,  .gt.,  .lt.,  .un.,  or\par
        value  of 0-3.  The following list specifies the format for each\par
        addressing mode supported by AS2650:  \par
\par
                #data           immediate byte data\par
        \par
                r0,r1,r2,r3     registers\par
        \par
                addr            location/branch address\par
        \par
                [addr]     or   indirect addressing\par
                @addr\par
        \par
                [addr,r0]  or   register indexed\par
                @addr,r0        indirect addressing\par
        \par
                [addr,-r0] or   autodecrement register indexed\par
                @addr,-r0       indirect addressing\par
        \par
\page\par
\par
        AS2650 ASSEMBLER                                       PAGE AC-2\par
        2650 INSTRUCTION SET\par
\par
\par
                [addr,r0+] or   autoincrement register indexed\par
                @addr,r0+       indirect addressing\par
        \par
                .eq.            CC: equal               (== 0)\par
                .gt.            CC: greater than        (== 1)\par
                .lt.            CC: less than           (== 2)\par
                .un.            CC: unconditional       (== 3)\par
\par
        The terms data, label, and addr may all be expressions.  \par
\par
           Note  that  not all addressing modes are valid with every in-\par
        struction, refer to the 2650 technical data for valid modes.  \par
\par
\par
        AC.2.1  Load / Store Instructions \par
\par
                lodz    r               lodi    #data\par
                lodr    []              loda    []\par
        \par
                stoz    r\par
                stor    []              stoa    []\par
\par
\par
        AC.2.2  Arithmetic / Compare Instructions \par
\par
                addz    r               addi    #data\par
                addr    []              adda    []\par
        \par
                subz    r               subi    #data\par
                subr    []              suba    []\par
        \par
                comz    r               comi    #data\par
                comr    []              coma    []\par
        \par
                dar     r\par
\par
\par
        AC.2.3  Logical / Rotate Instructions \par
\par
                andz    r               andi    #data\par
                andr    []              anda    []\par
        \par
                iorz    r               iori    #data\par
                iorr    []              iora    []\par
        \par
                eorz    r               eori    #data\par
                eorr    []              eora    []\par
        \par
                rrr     r\par
\page\par
\par
        AS2650 ASSEMBLER                                       PAGE AC-3\par
        2650 INSTRUCTION SET\par
\par
\par
                rrl     r\par
\par
\par
        AC.2.4  Condition Code Branches \par
\par
                bctr    CC,[]           bcta    CC,[]\par
        \par
                bcfr    CC,[]           bcfa    CC,[]\par
        \par
                bstr    CC,[]           bsta    CC,[]\par
        \par
                bsfr    CC,[]           bsta    CC,[]\par
\par
\par
        AC.2.5  Register Test Branches \par
\par
                brnr    r,[]            brna    r,[]\par
        \par
                birr    r,[]            bira    r,[]\par
        \par
                bdrr    r,[]            bdra    r,[]\par
        \par
                bsnr    r,[]            bsna    r,[]\par
\par
\par
        AC.2.6  Branches (to Subroutines) / Returns \par
\par
                bxa     []              bsxa    []\par
        \par
                zbrr    []              zbsr    []\par
        \par
                retc    CC              rete    CC\par
\par
\par
        AC.2.7  Input / Output \par
\par
                redc    r               wrtc    r\par
                redd    r               wrtd    r\par
                rede    r,addr          wrte    r,addr\par
\par
\par
\page\par
\par
        AS2650 ASSEMBLER                                       PAGE AC-4\par
        2650 INSTRUCTION SET\par
\par
\par
        AC.2.8  Miscellaneos \par
\par
                halt                    nop\par
                tmi     r,#data\par
\par
\par
        AC.2.9  Program Status \par
\par
                lpsl                    lpsu\par
                spsl                    spsu\par
                cpsl    #data           cpsu    #data\par
                ppsl    #data           ppsu    #data\par
                tpsl    #data           tpsu    #data\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX AD\cf1\par
\par
                                 \cf2 AS430 ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        AD.1  MPS430 REGISTER SET \par
\par
        The following is a list of the MPS430 registers used by AS430:  \par
\par
        Sixteen 16-bit registers provide adddress, data, and\par
        special functions:\par
                pc  /   r0      -       program counter\par
                sp  /   r1      -       stack pointer\par
                sr  /   r2      -       status register\par
                cg1 /   r2      -       constant generator 1\par
                cg2 /   r3      -       constant generator 2\par
                        r4      -       working register r4\par
                        r5      -       working register r5\par
                        ...\par
                        r14     -       working register r14\par
                        r15     -       working register r15\par
\page\par
\par
        AS430 ASSEMBLER                                        PAGE AD-2\par
        MPS430 REGISTER SET\par
\par
\par
        AD.2  MPS430 ADDRESSING MODES \par
\par
\par
           The  following  list specifies the format for each addressing\par
        mode supported by AS430:  \par
\par
        Source/Destination Operand Addressing Modes\par
        \par
        As/Ad   Addressing Mode Syntax  Description\par
        -----   --------------- ------  -----------\par
        00/0    Register mode   Rn      Register contents are operand.\par
        \par
        01/1    Indexed mode    X(Rn)   (Rn + X) points to the operand,\par
                                        X is stored in the next word.\par
        \par
        01/1    Symbolic mode   ADDR    (PC + X) points to the operand,\par
                                        X is stored in the next word,\par
                                        Indexed mode X(PC) is used.\par
        \par
        01/1    Absolute mode   &ADDR   The word following the\par
                                        instruction, contains the\par
                                        absolute address.\par
        \par
        10/-    Indirect        @Rn     Rn is used as a pointer to the\par
                register mode           operand.\par
        \par
        11/-    Indirect        @Rn+    Rn is used as a pointer to the\par
                autoincrement           operand. Rn is incremented\par
                                        afterwards.\par
        \par
        11/-    Immediate mode  #N      The word following the\par
                                        instruction contains the\par
                                        immediate constant N. Indirect\par
                                        autoincrement mode @PC+ is used.\par
\par
        The terms ADDR, X and N may all be expressions.  \par
\par
           Note  that  not all addressing modes are valid with every in-\par
        struction, refer to the MPS430 technical data for valid modes.  \par
\page\par
\par
        AS430 ASSEMBLER                                        PAGE AD-3\par
        MPS430 ADDRESSING MODES\par
\par
\par
        AD.2.1  MPS430 Instruction Mnemonics \par
\par
        The following table lists all MPS430 family mnemonics recognized\par
        by the AS430 assembler.  The designations src and dst  refer  to\par
        required source and/or destination addressing mode arguments.  \par
\par
        * ADC[.W];ADC.B  dst        dst + C -> dst\par
          ADD[.W];ADD.B  src,dst    src + dst -> dst\par
          ADDC[.W];ADDC.B           src,dst src + dst + C -> dst\par
          AND[.W];AND.B  src,dst    src .and. dst -> dst\par
        \par
          BIC[.W];BIC.B src,dst     .not.src .and. dst -> dst\par
          BIS[.W];BIS.B src,dst     src .or. dst -> dst\par
          BIT[.W];BIT.B src,dst     src .and. dst\par
        * BR dst                Branch to .......\par
        * BRANCH dst            Branch to .......\par
        \par
          CALL dst              PC+2 -> stack, dst -> PC\par
        * CLR[.W];CLR.B dst     Clear destination\par
        * CLRC                  Clear carry bit\par
        * CLRN                  Clear negative bit\par
        * CLRZ                  Clear zero bit\par
          CMP[.W];CMP.B src,dst     dst - src\par
        \par
        * DADC[.W];DADC.B dst       dst + C -> dst (decimal)\par
          DADD[.W];DADD.B src,dst   src + dst + C -> dst (decimal)\par
        * DEC[.W];DEC.B dst     dst - 1 -> dst\par
        * DECD[.W];DECD.B dst   dst - 2 -> dst\par
        \par
        * DINT                  Disable interrupt\par
        * EINT                  Enable interrupt\par
        \par
        * INC[.W];INC.B dst     dst + 1 -> dst\par
        * INCD[.W];INCD.B dst   dst + 2 -> dst\par
        * INV[.W];INV.B dst     Invert destination\par
        \par
          JC/JHS Label          Jump to Label if Carry-bit is set\par
          JEQ/JZ Label          Jump to Label if Zero-bit is set\par
          JGE Label             Jump to Label if (N .XOR. V) = 0\par
          JL Label              Jump to Label if (N .XOR. V) = 1\par
          JMP Label             Jump to Label unconditionally\par
          JN Label              Jump to Label if Negative-bit is set\par
          JNC/JLO Label         Jump to Label if Carry-bit is reset\par
          JNE/JNZ Label         Jump to Label if Zero-bit is reset\par
        \par
          MOV[.W];MOV.B src,dst     src -> dst\par
        \par
        * NOP                   No operation\par
\page\par
\par
        AS430 ASSEMBLER                                        PAGE AD-4\par
        MPS430 ADDRESSING MODES\par
\par
\par
        * POP[.W];POP.B dst     Item from stack, SP+2 -> SP\par
          PUSH[.W];PUSH.B src   SP - 2 -> SP, src -> @SP\par
        \par
          RETI                  Return from interrupt\par
                                    TOS -> SR, SP + 2 -> SP\par
                                    TOS -> PC, SP + 2 -> SZP\par
        * RET                   Return from subroutine\par
                                    TOS -> PC, SP + 2 -> SP\par
        * RLA[.W];RLA.B dst     Rotate left arithmetically\par
        * RLC[.W];RLC.B dst     Rotate left through carry\par
          RRA[.W];RRA.B dst     MSB -> MSB . ....LSB -> C\par
          RRC[.W];RRC.B dst     C -> MSB . ......LSB -> C\par
        \par
        * SBC[.W];SBC.B dst     Subtract carry from destination\par
        * SETC                  Set carry bit\par
        * SETN                  Set negative bit\par
        * SETZ                  Set zero bit\par
          SUB[.W];SUB.B src,dst     dst + .not.src + 1 -> dst\par
          SUBC[.W];SUBC.B src,dst   dst + .not.src + C -> dst\par
          SBB[.W];SBB.B src,dst     dst + .not.src + C -> dst\par
          SWPB dst              swap bytes\par
          SXT dst               Bit7 -> Bit8 ........ Bit15\par
        \par
        * TST[.W];TST.B dst     Test destination\par
        \par
          XOR[.W];XOR.B src,dst     src .xor. dst -> dst\par
        \par
                Note: Asterisked Instructions\par
                Asterisked (*) instructions are emulated.\par
                They are replaced with coreinstructions\par
                by the assembler.\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX AE\cf1\par
\par
                                \cf2 AS6100 ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        AE.1  6100 MACHINE DESCRIPTION \par
\par
\par
           The IM6100 (Intersil) and HM6100 (Harris) microprocessors are\par
        12-bit word addressable machines having three 12-bit program ac-\par
        cessible  registers  and one single bit register.  These are the\par
        Accumulator (AC), MQ Register (MQ), Program  Counter  (PC),  and\par
        the Link (L) respectively.  \par
\par
           The  6100  is basically a clone of the Digital Equipment Cor-\par
        poration PDP-8E minicomputer  architecture.   This  architecture\par
        predates  all  microprocessors  and labeled the bits from 0 (the\par
        most significant) to 11 (the least significant) rather than from\par
        least  to  most  significant.  The actual labelling is arbitrary\par
        and the as6100 assembler uses the now more common labelling.  \par
\par
           The  output  generated from the assembler/linker is two bytes\par
        per word ordered as MSB then LSB with the upper 4  bits  of  the\par
        MSB always zero.  \par
\par
\par
        AE.2  ASSEMBLER SPECIFIC DIRECTIVES \par
\par
\par
           Because  the  6100  microprocessor  has  no  concept of bytes\par
        several of the cross assembler directives have  their  operation\par
        changed to reflect the 12-Bit nature of the microprocessor.  \par
\par
        These are:\par
                .byte           (.db and .fcb are aliases)\par
                                output an 8-Bit value\par
                                into a 12-bit word\par
                .word           (.dw and .fdb are aliases)\par
\page\par
\par
        AS6100 ASSEMBLER                                       PAGE AE-2\par
        ASSEMBLER SPECIFIC DIRECTIVES \par
\par
\par
                                output a 12-Bit value\par
                                into a 12-Bit word\par
                .ascii          (.asciz and ascis also)\par
                                output a sequence of 8-Bit\par
                                characters in 12-bit words\par
\par
           A double precision integer (24-Bits) mnemonic has been added: \par
\par
                .dubl           (.4byte and .quad are aliases)\par
                                output a 24-Bit value\par
                                into two 12-bit words\par
\par
           Two  new  directives  have  been  added  to  implement  6-bit\par
        character string operations.  The characters A-Z and  [/]^_  are\par
        masked  to values of 0x01 to 0x1F, the characters a-z are masked\par
        to values of 0x01 to 0x1A, and the characters from  ' '  (space)\par
        to  '?'  are masked to 0x20 to 0x3F.  All other ascii characters\par
        become a space (0x20).  \par
\par
        These are:\par
                .text           output upto two characters per 12-bit\par
        word\par
                .textz          output upto two characters per 12-bit\par
        word\par
                                followed by a 6-bit zero value.\par
\par
\par
        AE.3  MACHINE SPECIFIC DIRECTIVES \par
\par
\par
           The  6100  microprocessor  memory architecture consists of 32\par
        pages each having 128 words for  a  total  of  4096  addressable\par
        words.   The  6100  instruction set allows direct access only to\par
        the current page and to page 0.  Three machine  specific  direc-\par
        tives  provide  differing  methods  to  select  the memory page.\par
        These directives are:  \par
\par
\par
\page\par
\par
        AS6100 ASSEMBLER                                       PAGE AE-3\par
        MACHINE SPECIFIC DIRECTIVES\par
\par
\par
        AE.3.1  .setpg \par
\par
        Format:  \par
\par
                .setpg          ; . = next page boundary\par
                .setpg  N       ; . = Nth page boundary\par
        \par
        where:  N       is the page number from 0 to 31\par
\par
           The .setpg directive is used to set the current program loca-\par
        tion counter to a specific 128 word page boundary or to the next\par
        128  word  page boundary and inform the assembler/linker of this\par
        boundary.  \par
\par
\par
        AE.3.2  .mempn \par
\par
        Format:  \par
\par
                .mempn N        ; . = Nth page boundary\par
        \par
        where:  N       is the page number from 0 to 31\par
\par
           The .mempn directive is used to set the current program loca-\par
        tion counter to a specific 128 word page boundary and inform the\par
        assembler/linker of this boundary.  \par
\par
\par
        AE.3.3  .mempa \par
\par
        Format:  \par
\par
                .mempa A        ; . = A (a page boundary)\par
        \par
        where:  A       is a 128 word page address boundary\par
\par
           The .mempa directive is used to set the current program loca-\par
        tion counter to a specific page boundary address and inform  the\par
        assembler/linker of this boundary.  \par
\par
\par
\page\par
\par
        AS6100 ASSEMBLER                                       PAGE AE-4\par
        6100 INSTRUCTION SET \par
\par
\par
        AE.4  6100 INSTRUCTION SET \par
\par
\par
           The  following  tables  list all 6100 family mnemonics recog-\par
        nized by the AS6100 assembler.  The instruction set is described\par
        in 3 major groupings:  Basic Instructions, Operate Microinstruc-\par
        tions, and IOT Instructions.  \par
\par
\par
        AE.4.1  Basic Instructions \par
\par
\par
           The basic instructions are:  \par
\par
                and     Logical AND\par
                tad     Binary ADD\par
                isz     Increment and skip if zero\par
                dca     Deposit and clear AC\par
                jms     Jump to subroutine\par
                jmp     Jump\par
\par
           These instructions have two paging addressing modes:  \par
\par
                addr            current page address\par
                *addr           page 0 address\par
\par
        which  can  be  combined with an indirect mode signified by an i\par
        argument or enclosing brackets []:  \par
\par
                i addr          indirect current page\par
                [addr]\par
        \par
                i *addr         indirect page 0\par
                [*addr] or *[addr]\par
\par
        The  6100  implements  an auto-increment mode when accessing ad-\par
        dresses 0x08 - 0x0F in page 0 by incrementing  the  contents  of\par
        the location before using the value as an address.  \par
\par
\par
\page\par
\par
        AS6100 ASSEMBLER                                       PAGE AE-5\par
        6100 INSTRUCTION SET \par
\par
\par
        AE.4.2  Operate Instructions \par
\par
\par
           The  operate  instructions are split into three groups of mu-\par
        tually exclusive micro operations.  The single  micro  operation\par
        in common with all three groups is:  \par
\par
                CLA     Clear Accumulator\par
\par
\par
        AE.4.2.1  Group 1 Operate Instructions  - \par
\par
           The  group  1 microinstructions are used primarily to perform\par
        logical operations on the contents of the accumulator and link: \par
\par
                CLL     Clear Link\par
                CMA     Complement Accumulator\par
                CML     Complement Link\par
                IAC     Increment Accumulator\par
        \par
                RAL     Rotate Accumulator Left\par
                RTL     Rotate Two Left\par
                RAR     Rotate Accumulator Right\par
                RTR     Rotate Two Right\par
                BSW     Byte Swap\par
\par
        A group 1 microinstruction can contain one or all of the mnemon-\par
        ics CLA, CLL, CMA, CML, IAC, but only one of the RAL, RTL,  RAR,\par
        RTR,  or BSW mnemonics (RAL, RTL, RAR, RTR, and BSW are mutually\par
        exclusive).  \par
\par
           The  NOP  (No  Operation) functionality can be implemented in\par
        all three operate instruction groups but is specified by the as-\par
        sembler as a group 1 instruction.  \par
\par
           Several  common  group 1 operations have been given their own\par
        mnemonics:  \par
\par
                NOP     NO Operation\par
                CIA     Complement and Increment Accumulator\par
                GLT     Get Link\par
                STA     Set Accumulator\par
\par
\par
\page\par
\par
        AS6100 ASSEMBLER                                       PAGE AE-6\par
        6100 INSTRUCTION SET \par
\par
\par
        AE.4.2.2  Group 2 Operate Instructions  - \par
\par
           The  group 2 microinstructions are used primarily to test the\par
        contents of the accumulator and/or link and  then  conditionally\par
        skip the next sequential instruction:  \par
\par
                HLT     Halt\par
                OSR     Or With Switch Register\par
        \par
                SKP     Skip\par
                SNL     Skip On Non-Zero Link\par
                SZL     Skip On Zero Link\par
                SZA     Skip On Zero Accumulator\par
                SNA     Skip On Non-Zero Accumulator\par
                SMA     Skip On Minus Accumulator\par
                SPA     Skip On Plus Accumulator\par
\par
        A group 2 microinstruction can contain one or all of the mnemon-\par
        ics CLA, HLT, OSR, but only one of the SKP, SNL, SZL, SZA,  SNA,\par
        SMA, or SPA mnemonics (SKP, SNL, SZL, SZA, SNA, SMA, and SPA are\par
        mutually exclusive).  \par
\par
           One common group 2 operation has been given its own mnemonic: \par
\par
                LAS     Load Accumulator With Switch Register\par
\par
\par
        AE.4.2.3  Group 3 Operate Instructions  - \par
\par
           The  group  3 microinstructions perform logical operations on\par
        the contents of AC and MQ.  \par
\par
                MQL     MQ Register Load\par
                MQA     MQ Register Into Accumulator\par
\par
        A group 3 microinstruction can contain one or all of the mnemon-\par
        ics CLA, MQL, and MQA.  \par
\par
           Several  common  group 3 operations have been given their own\par
        mnemonics:  \par
\par
                SWP     Swap Accumulator and MQ Register\par
                CAM     Clear Accumulator and MQ Register\par
                ACL     Clear Accumulator and Load\par
                        MQ Register into Accumulator\par
\par
\par
\page\par
\par
        AS6100 ASSEMBLER                                       PAGE AE-7\par
        6100 INSTRUCTION SET \par
\par
\par
        AE.4.2.4  Group Errors  - \par
\par
           The 6100 assembler has three additional error codes which oc-\par
        cur when the group 1, 2, or 3 operations are mixed.   The  error\par
        code  will  be  <1>, <2>, or <3> based upon the first group type\par
        encountered followed by any other type of group operation.   The\par
        CLA operation is valid with all groups and does not cause an er-\par
        ror code to be generated.  \par
\par
\par
        AE.4.3  Input/Output (IOT) Instructions \par
\par
\par
           The  input/output  transfer  instructions are used to control\par
        the operation of peripherals and  transfer  data  between  peri-\par
        pherals and the 6100 microprocessor.  Of the lower 9 bits of the\par
        instruction used for device selection and control typically  the\par
        3  LSBs  are  the  I/O  operation  bits and the remaining 6 bits\par
        select the peripheral device.  \par
\par
                IOT     DEV,CMND\par
        \par
                where DEV is the device select code and\par
                CMND is the command code.\par
\par
        Specifying  a  device select code of zero in the IOT instruction\par
        allows the user program to control the  interrupt  mechanism  of\par
        the 6100 microprocessor.  These instructions are:  \par
\par
                SKON    Skip If Interrupt On\par
                ION     Interrupt Turn On\par
                IOF     Interrupt Turn Off\par
                SRQ     Skip If Int Request\par
                GTF     GetFlags\par
                RTF     Return Flags\par
                SGT     Defined By Device Logic\par
                CAF     Clear All Flags\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX AF\cf1\par
\par
                                \cf2 AS61860 ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        AF.1  ACKNOWLEDGMENT \par
\par
\par
           Thanks  to  Edgar  Puehringer  for  his  contribution  of the\par
        AS61860 cross assembler.  \par
\par
                Edgar Peuhringer\par
                edgar_pue at yahoo dot com\par
\par
\par
        AF.2  61860 REGISTER SET \par
\par
        The  SC61860  from  Sharp has 96 bytes of internal RAM which are\par
        used as registers and hardware stack.  The last  four  bytes  of\par
        the  internal  RAM  are  special  purpose registers (I/O, timers\par
        ...).  Here is a list of the 61860 registers:  \par
\par
                Reg     Address         Common use\par
                ---     -------         ----------\par
                i, j    0, 1            Length of block operations\par
                a, b    2, 3            Accumulator       \par
                xl, xh  4, 5            Pointer for read operations\par
                yl, yh  6, 7            Pointer for write operations\par
                k - n   8 - 0x0b        General purpose (counters ...)\par
                  -     0x0c - 0x5b     Stack\par
                ia      0x5c            Inport A\par
                ib      0x5d            Inport B\par
                fo      0x5e            Outport F\par
                cout    0x5f            Control port\par
\par
\par
           Other  parts of the 61860 are the 16 bit program counter (pc)\par
        and 16 bit data pointer (dp).  The ALU has a carry flag (c)  and\par
\page\par
\par
        AS61860 ASSEMBLER                                      PAGE AF-2\par
        61860 REGISTER SET\par
\par
\par
        a zero flag (z).  There is an internal register d which can't be\par
        accessed with machine instructions.  It is filled from  i  or  j\par
        when executing block operations.  \par
\par
           In addition there are three 7 bit registers p, q, and r which\par
        are used to address the internal RAM (r is the stack pointer,  p\par
        and q are used for block operations).  \par
\par
\par
        AF.3  PROCESSOR SPECIFIC DIRECTIVES \par
\par
\par
           The  AS61860  cross  assembler has two (2) processor specific\par
        assembler directives which are used for the etc mnemonic  (which\par
        is a kind of a built-in switch/case statement):  \par
\par
                .default        A 16 bit address (same as .dw)\par
                .case           One byte followed by a 16 bit address\par
        \par
        Here is an example how this should be used (cut from a lst\par
        file)::\par
        \par
           022B 7A 05 02 18         614         PTC     0x05,   CONT16\par
           022F 69                  615         DTC\par
           0230 4C 01 25            616         .CASE   0x4C,   SLOADI\par
           0233 4D 01 2F            617         .CASE   0x4D,   SMERGI\par
           0236 51 01 D2            618         .CASE   0x51,   QUITI   \par
           0239 53 00 CD            619         .CASE   0x53,   LLISTI\par
           023C 56 01 D5            620         .CASE   0x56,   VERI\par
           023F 01 D1               621         .DEFAULT        CONT9\par
\par
\par
        AF.4  61860 INSTRUCTION SET \par
\par
\par
           The  following  tables list all 61860 family mnemonics recog-\par
        nized by the AS61860 assembler.  Most of the mnemonics are  con-\par
        verted  into  8  bit  machine instructions with no argument or a\par
        one- or two-byte argument.  There are some exceptions for this: \par
\par
                Mnemonic        Description\par
                --------        -----------\par
                jp              2 bit instruction, 6 bit argument\par
                cal             3 bit instruction, 13 bit argument\par
                ptc *)          1 byte instruction, 3 byte argument\par
                dtc *)          1 byte instruction, n bytes argument\par
        \par
                *) Not mentioned in the CPU specification from Sharp\par
\page\par
\par
        AS61860 ASSEMBLER                                      PAGE AF-3\par
        61860 INSTRUCTION SET \par
\par
\par
        AF.4.1  Load Immediate Register \par
\par
\par
                LII n           (n --> I)\par
                LIJ n\par
                LIA n\par
                LIB n\par
                LIP n\par
                LIQ n\par
                LIDP nm\par
                LIDL n          (DL is the low byte of DP)\par
                LP              (One byte version of LIP)\par
                RA              (Same as LIA 0, but only one byte)\par
                CLRA            (synonym for RA)\par
\par
\par
        AF.4.2  Load Accumulator \par
\par
\par
                LDP             (P --> A)\par
                LDQ\par
                LDR\par
                LDM             ((P) --> A)\par
                LDD             ((DP) --> A)\par
\par
\par
        AF.4.3  Store Accumulator \par
\par
\par
                STP             (A --> P)\par
                STQ\par
                STR\par
                STD             (A --> (DP))\par
\par
\par
        AF.4.4  Move Data \par
\par
\par
                MVDM            ((P) --> (DP))\par
                MVMD            ((DP) --> (P))\par
\par
\par
\page\par
\par
        AS61860 ASSEMBLER                                      PAGE AF-4\par
        61860 INSTRUCTION SET \par
\par
\par
        AF.4.5  Exchange Data \par
\par
\par
                EXAB            (A <--> B)\par
                EXAM            (A <--> (P))\par
\par
\par
        AF.4.6  Stack Operations \par
\par
\par
                PUSH            (R - 1 --> R, A --> (R))\par
                POP             ((R) --> A, R + 1 --> R)\par
                LEAVE           (0 --> (R))\par
\par
\par
        AF.4.7  Block Move Data \par
\par
\par
                MVW             ((Q) --> (P), I+1 bytes)\par
                MVB             ((Q) --> (P), J+1 bytes)\par
                MVWD            ((DP) --> (P), I+1 bytes)\par
                MVBD            ((DP) --> (P), J+1 bytes)\par
                DATA            ((B,A) --> (P), I+1 bytes,\par
                                reads CPU ROM also)\par
\par
\par
        AF.4.8  Block Exchange Data \par
\par
\par
                EXW             ((Q) <--> (P), I+1 bytes)\par
                EXB             ((Q) <--> (P), J+1 bytes)\par
                EXWD            ((DP) <--> (P), I+1 bytes)\par
                EXBD            ((DP) <--> (P), J+1 bytes)\par
\page\par
\par
        AS61860 ASSEMBLER                                      PAGE AF-5\par
        61860 INSTRUCTION SET \par
\par
\par
        AF.4.9  Increment and Decrement \par
\par
\par
                INCP            (P + 1 --> P)\par
                DECP\par
                INCI\par
                DECI\par
                INCJ\par
                DECJ\par
                INCA\par
                DECA\par
                INCB\par
                DECB\par
                INCK\par
                DECK\par
                INCL\par
                DECL\par
                IX              (X + 1 --> X, X --> DP)\par
                DX\par
                IY\par
                DY\par
                INCM *)\par
                DECM *)\par
                INCN *)\par
                DECN *)\par
        \par
                *) Not mentioned in the CPU specification from Sharp\par
\par
\par
        AF.4.10  Increment/Decrement with Load/Store \par
\par
\par
                IXL             (Same as IX plus LDD)\par
                DXL\par
                IYS             (Same as IY plus STD)\par
                DYS\par
\par
\par
\page\par
\par
        AS61860 ASSEMBLER                                      PAGE AF-6\par
        61860 INSTRUCTION SET \par
\par
\par
        AF.4.11  Fill \par
\par
\par
                FILM            (A --> (P), I+1 bytes)\par
                FILD            (A --> (DP), I+1 bytes)\par
\par
\par
        AF.4.12  Addition and Subtraction \par
\par
\par
                ADIA n          (A + n --> A)\par
                SBIA n\par
                ADIM n          ((P) + n --> (P))\par
                SBIM n\par
                ADM n           ((P) + A --> (P))\par
                SBM n\par
                ADCM n          ((P) + A --> (P), with carry)\par
                SBCM\par
                ADB             (like ADM, but 16 bit)\par
                SBB\par
                ADN             (like ADM, BCD addition, I+1 bytes)\par
                SBN\par
                ADW             ((P) + (Q) --> (P), BCD, I+1 bytes)\par
                SBW\par
\par
\par
        AF.4.13  Shift Operations \par
\par
\par
                SRW             (shift I+1 bytes in (P) 4 bits right)\par
                SLW\par
                SR              (shift A 1 bit, with carry)\par
                SL\par
                SWP             (exchange low and high nibble of A)\par
\par
\par
        AF.4.14  Boolean Operations \par
\par
\par
                ANIA n          (A & n --> A)\par
                ORIA n\par
                ANIM n          ((P) & n --> (P))\par
                ORIM n\par
                ANID n          ((DP) & n --> (DP))\par
                ORID n\par
                ANMA            ((P) & A --> (P))\par
                ORMA\par
\page\par
\par
        AS61860 ASSEMBLER                                      PAGE AF-7\par
        61860 INSTRUCTION SET \par
\par
\par
        AF.4.15  Compare \par
\par
\par
                CPIA n          (A - n --> c,z)\par
                CPIM n          ((P) - n --> c,z)\par
                CPMA            ((P) - A --> c,z)\par
                TSIA n          (A & n --> z)\par
                TSIM n          ((P) & n --> z)\par
                TSID n          ((DP) & n --> z)\par
                TSIP            ((P) & A --> z)\par
\par
\par
        AF.4.16  CPU Control \par
\par
\par
                SC              (Set carry)\par
                RC\par
                NOPW            (no op)\par
                NOPT\par
                WAIT n          (wait 6+n cycles)\par
                WAITJ           (wait 5+4*I cycles)\par
                CUP             (synonym for WAITJ)\par
\par
\par
        AF.4.17  Absolute Jumps \par
\par
\par
                JP nm\par
                JPZ nm          (on zero)\par
                JPNZ nm\par
                JPC nm\par
                JPNC nm\par
                PTC/DTC         (see 'Processor Specific Directives')\par
                PTJ/DTJ         (synonym for PTD/DTC)\par
                CPCAL/DTLRA     (synonym for PTC/DTC)\par
                CASE1/CASE2     (synonym for PTC/DTC)\par
                SETT/JST        (synonym for PTC/DTC)\par
\page\par
\par
        AS61860 ASSEMBLER                                      PAGE AF-8\par
        61860 INSTRUCTION SET \par
\par
\par
        AF.4.18  Relative Jumps \par
\par
\par
           These  operations  handle  a  jump relative to PC forward and\par
        back with  a  maximum  distance  of  255  byte.   The  assembler\par
        resolves 16 bit addresses to to 8 bit relative adresses.  If the\par
        target address is to far away, an error will be generated.  Note\par
        that relative jumps need 1 byte less than absolute jumps.  \par
\par
                JRP nm\par
                JRZP nm\par
                JRNZP nm        (jump relative non zero plus direction)\par
                JRCP nm\par
                JRNCP nm\par
                JRM nm\par
                JRZM nm\par
                JRNZM nm\par
                JRCM nm         (jump relative on carry minus direction)\par
                JRNCM nm\par
                LOOP nm         (decrements (R) and makes a JRNCM)\par
\par
\par
        AF.4.19  Calls \par
\par
\par
                CALL nm\par
                CAL nm          (nm must be <= 0x1fff,\par
                                1 byte less code than CALL)\par
                RTN\par
\par
\par
        AF.4.20  Input and output \par
\par
\par
                INA             (IA --> A)\par
                INB\par
                OUTA\par
                OUTB\par
                OUTF            (A --> FO)\par
                OUTC            (control port)\par
                TEST n          (timers, pins & n --> z)\par
\par
\par
\page\par
\par
        AS61860 ASSEMBLER                                      PAGE AF-9\par
        61860 INSTRUCTION SET \par
\par
\par
        AF.4.21  Unknown Commands \par
\par
\par
                READ            ((PC+1) -> A)\par
                READM           ((PC+1) -> (P))\par
                WRIT            (???)\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX AG\cf1\par
\par
                                \cf2 AS6500 ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        AG.1  ACKNOWLEDGMENT \par
\par
\par
           Thanks  to  Marko  Makela  for his contribution of the AS6500\par
        cross assembler.  \par
\par
                Marko Makela\par
                Sillitie 10 A\par
                01480 Vantaa\par
                Finland\par
                Internet: Marko dot Makela at Helsinki dot Fi\par
                EARN/BitNet: msmakela at finuh\par
\par
           Several  additions and modifications were made to his code to\par
        support the following families of 6500 processors:  \par
\par
                (1)     650X and 651X processor family\par
                (2)     65F11 and 65F12 processor family\par
                (3)     65C00/21 and 65C29 processor family\par
                (4)     65C02, 65C102, and 65C112 processor family\par
\par
           The  instruction  syntax of this cross assembler contains two\par
        peculiarities:  (1) the addressing indirection is denoted by the\par
        square  brackets  []  and (2) the `bbrx' and `bbsx' instructions\par
        are written `bbr0 memory,label'.  \par
\par
\par
\page\par
\par
        AS6500 ASSEMBLER                                       PAGE AG-2\par
        6500 REGISTER SET\par
\par
\par
        AG.2  6500 REGISTER SET \par
\par
        The following is a list of the 6500 registers used by AS6500:  \par
\par
                a       -       8-bit accumulator\par
                x,y     -       index registers\par
\par
\par
        AG.3  6500 INSTRUCTION SET \par
\par
\par
           The  following  tables  list all 6500 family mnemonics recog-\par
        nized by the AS6500 assembler.  The designation [] refers  to  a\par
        required addressing mode argument.  The following list specifies\par
        the format for each addressing mode supported by AS6500:  \par
\par
                #data           immediate data\par
                                byte or word data\par
        \par
                *dir            direct page addressing\par
                                (see .setdp directive)\par
                                0 <= dir <= 255 \par
        \par
                offset,x        indexed addressing\par
                offset,y        indexed addressing\par
                                address = (offset + (x or y))\par
        \par
                [offset,x]      pre-indexed indirect addressing\par
                                0 <= offset <= 255\par
                                address = contents of location\par
                                    (offset + (x or y)) mod 256\par
        \par
                [offset],y      post-indexed indirect addressing\par
                                address = contents of location at offset\par
                                    plus the value of the y register\par
        \par
                [address]       indirect addressing\par
        \par
                ext             extended addressing\par
        \par
                label           branch label\par
        \par
                address,label   direct page memory location\par
                                branch label\par
                                bbrx and bbsx instruction addressing\par
\par
        The  terms data, dir, offset, address, ext, and label may all be\par
        expressions.  \par
\par
\page\par
\par
        AS6500 ASSEMBLER                                       PAGE AG-3\par
        6500 INSTRUCTION SET\par
\par
\par
           Note  that  not all addressing modes are valid with every in-\par
        struction, refer to the 65xx technical data for valid modes.  \par
\par
\par
        AG.3.1  Processor Specific Directives \par
\par
\par
           The  AS6500  cross  assembler has four (4) processor specific\par
        assembler directives which  define  the  target  65xx  processor\par
        family:  \par
\par
                .r6500          Core 650X and 651X family (default)\par
                .r65f11         Core plus 65F11 and 65F12\par
                .r65c00         Core plus 65C00/21 and 65C29\par
                .r65c02         Core plus 65C02, 65C102, and 65C112\par
\par
\par
        AG.3.2  65xx Core Inherent Instructions \par
\par
                brk                     clc\par
                cld                     cli\par
                clv                     dex\par
                dey                     inx\par
                iny                     nop\par
                pha                     php\par
                pla                     plp\par
                rti                     rts\par
                sec                     sed\par
                sei                     tax\par
                tay                     tsx\par
                txa                     txs\par
                tya\par
\par
\par
        AG.3.3  65xx Core Branch Instructions \par
\par
                bcc     label           bhs     label\par
                bcs     label           blo     label\par
                beq     label           bmi     label\par
                bne     label           bpl     label\par
                bvc     label           bvs     label\par
\page\par
\par
        AS6500 ASSEMBLER                                       PAGE AG-4\par
        6500 INSTRUCTION SET\par
\par
\par
        AG.3.4  65xx Core Single Operand Instructions \par
\par
                asl     []\par
                dec     []\par
                inc     []\par
                lsr     []\par
                rol     []\par
                ror     []\par
\par
\par
        AG.3.5  65xx Core Double Operand Instructions \par
\par
                adc     []\par
                and     []\par
                bit     []\par
                cmp     []\par
                eor     []\par
                lda     []\par
                ora     []\par
                sbc     []\par
                sta     []\par
\par
\par
        AG.3.6  65xx Core Jump and Jump to Subroutine Instructions \par
\par
                jmp     []              jsr     []\par
\par
\par
        AG.3.7  65xx Core Miscellaneous X and Y Register Instructions \par
\par
                cpx     []\par
                cpy     []\par
                ldx     []\par
                stx     []\par
                ldy     []\par
                sty     []\par
\page\par
\par
        AS6500 ASSEMBLER                                       PAGE AG-5\par
        6500 INSTRUCTION SET\par
\par
\par
        AG.3.8  65F11 and 65F12 Specific Instructions \par
\par
                bbr0    [],label                bbr1    [],label\par
                bbr2    [],label                bbr3    [],label\par
                bbr4    [],label                bbr5    [],label\par
                bbr6    [],label                bbr7    [],label\par
        \par
                bbs0    [],label                bbs1    [],label\par
                bbs2    [],label                bbs3    [],label\par
                bbs4    [],label                bbs5    [],label\par
                bbs6    [],label                bbs7    [],label\par
        \par
                rmb0    []                      rmb1    []\par
                rmb2    []                      rmb3    []\par
                rmb4    []                      rmb5    []\par
                rmb6    []                      rmb7    []\par
        \par
                smb0    []                      smb1    []\par
                smb2    []                      smb3    []\par
                smb4    []                      smb5    []\par
                smb6    []                      smb7    []\par
\par
\par
        AG.3.9  65C00/21 and 65C29 Specific Instructions \par
\par
                bbr0    [],label                bbr1    [],label\par
                bbr2    [],label                bbr3    [],label\par
                bbr4    [],label                bbr5    [],label\par
                bbr6    [],label                bbr7    [],label\par
        \par
                bbs0    [],label                bbs1    [],label\par
                bbs2    [],label                bbs3    [],label\par
                bbs4    [],label                bbs5    [],label\par
                bbs6    [],label                bbs7    [],label\par
        \par
                bra     label\par
        \par
                phx                             phy\par
                plx                             ply\par
        \par
                rmb0    []                      rmb1    []\par
                rmb2    []                      rmb3    []\par
                rmb4    []                      rmb5    []\par
                rmb6    []                      rmb7    []\par
        \par
                smb0    []                      smb1    []\par
                smb2    []                      smb3    []\par
                smb4    []                      smb5    []\par
                smb6    []                      smb7    []\par
\page\par
\par
        AS6500 ASSEMBLER                                       PAGE AG-6\par
        6500 INSTRUCTION SET\par
\par
\par
        AG.3.10  65C02, 65C102, and 65C112 Specific Instructions \par
\par
                bbr0    [],label                bbr1    [],label\par
                bbr2    [],label                bbr3    [],label\par
                bbr4    [],label                bbr5    [],label\par
                bbr6    [],label                bbr7    [],label\par
        \par
                bbs0    [],label                bbs1    [],label\par
                bbs2    [],label                bbs3    [],label\par
                bbs4    [],label                bbs5    [],label\par
                bbs6    [],label                bbs7    [],label\par
        \par
                bra     label\par
        \par
                phx                             phy\par
                plx                             ply\par
        \par
                rmb0    []                      rmb1    []\par
                rmb2    []                      rmb3    []\par
                rmb4    []                      rmb5    []\par
                rmb6    []                      rmb7    []\par
        \par
                smb0    []                      smb1    []\par
                smb2    []                      smb3    []\par
                smb4    []                      smb5    []\par
                smb6    []                      smb7    []\par
        \par
                stz     []\par
                trb     []\par
                tsb     []\par
\par
           Additional  addressing  modes for the following core instruc-\par
        tions are also available with the 65C02, 65C102, and 65C112 pro-\par
        cessors.  \par
\par
                adc     []                      and     []\par
                cmp     []                      eor     []\par
                lda     []                      ora     []\par
                sbc     []                      sta     []\par
        \par
                bit     []                      jmp     []\par
        \par
                dec                             inc\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX AH\cf1\par
\par
                                \cf2 AS6800 ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        AH.1  6800 REGISTER SET \par
\par
        The following is a list of the 6800 registers used by AS6800:  \par
\par
                a,b     -       8-bit accumulators\par
                x       -       index register\par
\par
\par
        AH.2  6800 INSTRUCTION SET \par
\par
\par
           The following tables list all 6800/6802/6808 mnemonics recog-\par
        nized by the AS6800 assembler.  The designation [] refers  to  a\par
        required addressing mode argument.  The following list specifies\par
        the format for each addressing mode supported by AS6800:  \par
\par
                #data           immediate data\par
                                byte or word data\par
        \par
                *dir            direct page addressing\par
                                (see .setdp directive)\par
                                0 <= dir <= 255 \par
        \par
                ,x              register indirect addressing\par
                                zero offset\par
        \par
                offset,x        register indirect addressing\par
                                0 <= offset <= 255\par
        \par
                ext             extended addressing\par
        \par
                label           branch label\par
\par
\page\par
\par
        AS6800 ASSEMBLER                                       PAGE AH-2\par
        6800 INSTRUCTION SET\par
\par
\par
        The  terms  data, dir, offset, ext, and label may all be expres-\par
        sions.  \par
\par
           Note  that  not all addressing modes are valid with every in-\par
        struction, refer to the 6800 technical data for valid modes.  \par
\par
\par
        AH.2.1  Inherent Instructions \par
\par
                aba                     cba\par
                clc                     cli\par
                clv                     daa\par
                des                     dex\par
                ins                     inx\par
                nop                     rti\par
                rts                     sba\par
                sec                     sei\par
                sev                     swi\par
                tab                     tap\par
                tba                     tpa\par
                tsx                     txs\par
                wai\par
        \par
                psha                    pshb\par
                psh a                   psh b\par
                pula                    pulb\par
                pul a                   pul b\par
\par
\par
        AH.2.2  Branch Instructions \par
\par
                bra     label           bhi     label\par
                bls     label           bcc     label\par
                bhs     label           bcs     label\par
                blo     label           bne     label\par
                beq     label           bvc     label\par
                bvs     label           bpl     label\par
                bmi     label           bge     label\par
                blt     label           bgt     label\par
                ble     label           bsr     label\par
\page\par
\par
        AS6800 ASSEMBLER                                       PAGE AH-3\par
        6800 INSTRUCTION SET\par
\par
\par
        AH.2.3  Single Operand Instructions \par
\par
                asla                    aslb\par
                asl a                   asl b\par
                asl     []\par
        \par
                asra                    asrb\par
                asr a                   asr b\par
                asr     []\par
        \par
                clra                    clrb\par
                clr a                   clr b\par
                clr     []\par
        \par
                coma                    comb\par
                com a                   com b\par
                com     []\par
        \par
                deca                    decb\par
                dec a                   dec b\par
                dec     []\par
        \par
                inca                    incb\par
                inc a                   inc b\par
                inc     []\par
        \par
                lsla                    lslb\par
                lsl a                   lsl b\par
                lsl     []\par
        \par
                lsra                    lsrb\par
                lsr a                   lsr b\par
                lsr     []\par
        \par
                nega                    negb\par
                neg a                   neg b\par
                neg     []\par
        \par
                rola                    rolb\par
                rol a                   rol b\par
                rol     []\par
        \par
                rora                    rorb\par
                ror a                   ror b\par
                ror     []\par
        \par
                tsta                    tstb\par
                tst a                   tst b\par
                tst     []\par
\page\par
\par
        AS6800 ASSEMBLER                                       PAGE AH-4\par
        6800 INSTRUCTION SET\par
\par
\par
        AH.2.4  Double Operand Instructions \par
\par
                adca    []              adcb    []\par
                adc a   []              adc b   []\par
        \par
                adda    []              addb    []\par
                add a   []              add b   []\par
        \par
                anda    []              andb    []\par
                and a   []              and b   []\par
        \par
                bita    []              bitb    []\par
                bit a   []              bit b   []\par
        \par
                cmpa    []              cmpb    []\par
                cmp a   []              cmp b   []\par
        \par
                eora    []              eorb    []\par
                eor a   []              eor b   []\par
        \par
                ldaa    []              ldab    []\par
                lda a   []              lda b   []\par
        \par
                oraa    []              orab    []\par
                ora a   []              ora b   []\par
        \par
                sbca    []              sbcb    []\par
                sbc a   []              sbc b   []\par
        \par
                staa    []              stab    []\par
                sta a   []              sta b   []\par
        \par
                suba    []              subb    []\par
                sub a   []              sub b   []\par
\par
\par
        AH.2.5  Jump and Jump to Subroutine Instructions \par
\par
                jmp     []              jsr     []\par
\par
\par
\page\par
\par
        AS6800 ASSEMBLER                                       PAGE AH-5\par
        6800 INSTRUCTION SET\par
\par
\par
        AH.2.6  Long Register Instructions \par
\par
                cpx     []\par
                lds     []              sts     []\par
                ldx     []              stx     []\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX AI\cf1\par
\par
                                \cf2 AS6801 ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        AI.1  .hd6303 DIRECTIVE \par
\par
        Format:  \par
\par
                .hd6303 \par
\par
        The  .hd6303 directive enables processing of the HD6303 specific\par
        mnemonics not included in  the  6801  instruction  set.   HD6303\par
        mnemonics  encountered  without  the  .hd6303  directive will be\par
        flagged with an <o> error.  \par
\par
\par
        AI.2  6801 REGISTER SET \par
\par
        The following is a list of the 6801 registers used by AS6801:  \par
\par
                a,b     -       8-bit accumulators\par
                d       -       16-bit accumulator <a:b>\par
                x       -       index register\par
\par
\par
        AI.3  6801 INSTRUCTION SET \par
\par
\par
           The following tables list all 6801/6803/6303 mnemonics recog-\par
        nized by the AS6801 assembler.  The designation [] refers  to  a\par
        required addressing mode argument.  The following list specifies\par
        the format for each addressing mode supported by AS6801:  \par
\par
                #data           immediate data\par
                                byte or word data\par
        \par
                *dir            direct page addressing\par
\page\par
\par
        AS6801 ASSEMBLER                                       PAGE AI-2\par
        6801 INSTRUCTION SET\par
\par
\par
                                (see .setdp directive)\par
                                0 <= dir <= 255 \par
        \par
                ,x              register indirect addressing\par
                                zero offset\par
        \par
                offset,x        register indirect addressing\par
                                0 <= offset <= 255\par
        \par
                ext             extended addressing\par
        \par
                label           branch label\par
\par
        The  terms  data, dir, offset, ext, and label may all be expres-\par
        sions.  \par
\par
           Note  that  not all addressing modes are valid with every in-\par
        struction, refer to  the  6801/6303  technical  data  for  valid\par
        modes.  \par
\par
\par
        AI.3.1  Inherent Instructions \par
\par
                aba             abx\par
                cba             clc\par
                cli             clv\par
                daa             des\par
                dex             ins\par
                inx             mul\par
                nop             rti\par
                rts             sba\par
                sec             sei\par
                sev             swi\par
                tab             tap\par
                tba             tpa\par
                tsx             txs\par
                wai\par
\page\par
\par
        AS6801 ASSEMBLER                                       PAGE AI-3\par
        6801 INSTRUCTION SET\par
\par
\par
        AI.3.2  Branch Instructions \par
\par
                bra     label           brn     label\par
                bhi     label           bls     label\par
                bcc     label           bhs     label\par
                bcs     label           blo     label\par
                bne     label           beq     label\par
                bvc     label           bvs     label\par
                bpl     label           bmi     label\par
                bge     label           blt     label\par
                bgt     label           ble     label\par
                bsr     label\par
\par
\par
        AI.3.3  Single Operand Instructions \par
\par
                asla            aslb            asld\par
                asl a           asl b           asl d\par
                asl     []\par
        \par
                asra            asrb\par
                asr a           asr b\par
                asr     []\par
        \par
                clra            clrb\par
                clr a           clr b\par
                clr     []\par
        \par
                coma            comb\par
                com a           com b\par
                com     []\par
        \par
                deca            decb\par
                dec a           dec b\par
                dec     []\par
        \par
                eora            eorb\par
                eor a           eor b\par
                eor     []\par
        \par
                inca            incb\par
                inc a           inc b\par
                inc     []\par
        \par
                lsla            lslb            lsld\par
                lsl a           lsl b           lsl d\par
                lsl     []\par
        \par
                lsra            lsrb            lsrd\par
\page\par
\par
        AS6801 ASSEMBLER                                       PAGE AI-4\par
        6801 INSTRUCTION SET\par
\par
\par
                lsr a           lsr b           lsr d\par
                lsr     []\par
        \par
                nega            negb\par
                neg a           neg b\par
                neg     []\par
        \par
                psha            pshb            pshx\par
                psh a           psh b           psh x\par
        \par
                pula            pulb            pulx\par
                pul a           pul b           pul x\par
        \par
                rola            rolb\par
                rol a           rol b\par
                rol     []\par
        \par
                rora            rorb\par
                ror a           ror b\par
                ror     []\par
        \par
                tsta            tstb\par
                tst a           tst b\par
                tst     []\par
\page\par
\par
        AS6801 ASSEMBLER                                       PAGE AI-5\par
        6801 INSTRUCTION SET\par
\par
\par
        AI.3.4  Double Operand Instructions \par
\par
                adca    []      adcb    []\par
                adc a   []      adc b   []\par
        \par
                adda    []      addb    []      addd    []\par
                add a   []      add b   []      add d   []\par
        \par
                anda    []      andb    []\par
                and a   []      and b   []\par
        \par
                bita    []      bitb    []\par
                bit a   []      bit b   []\par
        \par
                cmpa    []      cmpb    []\par
                cmp a   []      cmp b   []\par
        \par
                ldaa    []      ldab    []\par
                lda a   []      lda b   []\par
        \par
                oraa    []      orab    []\par
                ora a   []      ora b   []\par
        \par
                sbca    []      sbcb    []\par
                sbc a   []      sbc b   []\par
        \par
                staa    []      stab    []\par
                sta a   []      sta b   []\par
        \par
                suba    []      subb    []      subd    []\par
                sub a   []      sub b   []      sub d   []\par
\par
\par
        AI.3.5  Jump and Jump to Subroutine Instructions \par
\par
                jmp     []      jsr     []\par
\par
\par
\page\par
\par
        AS6801 ASSEMBLER                                       PAGE AI-6\par
        6801 INSTRUCTION SET\par
\par
\par
        AI.3.6  Long Register Instructions \par
\par
                cpx     []      ldd     []\par
                lds     []      ldx     []\par
                std     []      sts     []\par
                stx     []\par
\par
\par
        AI.3.7  6303 Specific Instructions \par
\par
                aim     #data, []       eim     #data, []\par
                oim     #data, []       tim     #data, []\par
        \par
                xgdx            slp\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX AJ\cf1\par
\par
                                \cf2 AS6804 ASSEMBLER\cf1\par
\par
\par
\par
\par
           Requires the .setdp directive to specify the ram area.  \par
\par
\par
        AJ.1  6804 REGISTER SET \par
\par
        The following is a list of the 6804 registers used by AS6804:  \par
\par
                x,y     -       index registers\par
\par
\par
        AJ.2  6804 INSTRUCTION SET \par
\par
\par
           The  following  tables  list all 6804 mnemonics recognized by\par
        the AS6804 assembler.  The designation [] refers to  a  required\par
        addressing  mode  argument.   The  following  list specifies the\par
        format for each addressing mode supported by AS6804:  \par
\par
                #data           immediate data\par
                                byte or word data\par
        \par
                ,x              register indirect addressing\par
        \par
                dir             direct addressing\par
                                (see .setdp directive)\par
                                0 <= dir <= 255\par
        \par
                ext             extended addressing\par
        \par
                label           branch label\par
\par
        The  terms data, dir, and ext may be expressions.  The label for\par
        the short branchs beq, bne, bcc, and bcs must not be external.  \par
\par
\page\par
\par
        AS6804 ASSEMBLER                                       PAGE AJ-2\par
        6804 INSTRUCTION SET\par
\par
\par
           Note  that  not all addressing modes are valid with every in-\par
        struction, refer to the 6804 technical data for valid modes.  \par
\par
\par
        AJ.2.1  Inherent Instructions \par
\par
                coma            decx\par
                decy            incx\par
                incy            rola\par
                rti             rts\par
                stop            tax\par
                tay             txa\par
                tya             wait\par
\par
\par
        AJ.2.2  Branch Instructions \par
\par
                bne     label           beq     label\par
                bcc     label           bcs     label\par
\par
\par
        AJ.2.3  Single Operand Instructions \par
\par
                add     []\par
                and     []\par
                cmp     []\par
                dec     []\par
                inc     []\par
                lda     []\par
                sta     []\par
                sub     []\par
\par
\par
        AJ.2.4  Jump and Jump to Subroutine Instructions \par
\par
                jsr     []\par
                jmp     []\par
\par
\par
\page\par
\par
        AS6804 ASSEMBLER                                       PAGE AJ-3\par
        6804 INSTRUCTION SET\par
\par
\par
        AJ.2.5  Bit Test Instructions \par
\par
                brclr   #data,[],label\par
                brset   #data,[],label\par
        \par
                bclr    #label,[]\par
                bset    #label,[]\par
\par
\par
        AJ.2.6  Load Immediate data Instruction \par
\par
                mvi     [],#data\par
\par
\par
        AJ.2.7  6804 Derived Instructions \par
\par
                asla\par
                bam     label\par
                bap     label\par
                bxmi    label\par
                bxpl    label\par
                bymi    label\par
                bypl    label\par
                clra\par
                clrx\par
                clry\par
                deca\par
                decx\par
                decy\par
                inca\par
                incx\par
                incy\par
                ldxi    #data\par
                ldyi    #data\par
                nop\par
                tax\par
                tay\par
                txa\par
                tya\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX AK\cf1\par
\par
                              \cf2 AS68(HC)05 ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        AK.1  .6805 DIRECTIVE \par
\par
        Format:  \par
\par
                .6805 \par
\par
        The  .6805 directive selects the MC6805 specific cycles count to\par
        be output.  \par
\par
\par
        AK.2  .hc05 DIRECTIVE \par
\par
        Format:  \par
\par
                .hc05 \par
\par
        The  .hc05 directive selects the MC68HC05/146805 specific cycles\par
        count to be output.  \par
\par
\par
        AK.3  THE .__.CPU.  VARIABLE \par
\par
\par
           The value of the pre-defined symbol '.__.CPU.' corresponds to\par
        the selected processor type.  The default value is 0 which  cor-\par
        responds  to  the  default  processor type.  The following table\par
        lists the processor types and associated values  for  the  ASZ80\par
        assembler:  \par
\par
                Processor Type            .__.CPU. Value\par
                --------------            --------------\par
                    .6805                        0\par
                    .hc05                        1\par
\page\par
\par
        AS68(HC)05 ASSEMBLER                                   PAGE AK-2\par
        THE .__.CPU.  VARIABLE\par
\par
\par
\par
\par
           The  variable  '.__.CPU.'  is by default defined as local and\par
        will not be output to the created .rel file.  The assembler com-\par
        mand line options -g or -a will not cause the local symbol to be\par
        output to the created .rel file.  \par
\par
           The  assembler  .globl  directive  may  be used to change the\par
        variable type to global causing its definition to be  output  to\par
        the  .rel file.  The inclusion of the definition of the variable\par
        '.__.CPU.' might be a useful means of validating that seperately\par
        assembled  files have been compiled for the same processor type.\par
        The linker will report an error for variables with multiple  non\par
        equal definitions.  \par
\par
\par
        AK.4  6805 REGISTER SET \par
\par
        The following is a list of the 6805 registers used by AS6805:  \par
\par
                a       -       8-bit accumulator\par
                x       -       index register\par
\par
\par
        AK.5  6805 INSTRUCTION SET \par
\par
\par
           The  following  tables  list all 6805 mnemonics recognized by\par
        the AS6805 assembler.  The designation [] refers to  a  required\par
        addressing  mode  argument.   The  following  list specifies the\par
        format for each addressing mode supported by AS6805:  \par
\par
                #data           immediate data\par
                                byte or word data\par
        \par
                *dir            direct page addressing\par
                                (see .setdp directive)\par
                                0 <= dir <= 255 \par
        \par
                ,x              register indirect addressing\par
                                zero offset\par
        \par
                offset,x        register indirect addressing\par
                                  0 <= offset <= 255   --- byte mode\par
                                256 <= offset <= 65535 --- word mode\par
                                (an externally defined offset uses the\par
                                 word mode)\par
        \par
                ext             extended addressing\par
\page\par
\par
        AS68(HC)05 ASSEMBLER                                   PAGE AK-3\par
        6805 INSTRUCTION SET\par
\par
\par
        \par
                label           branch label\par
\par
        The terms data, dir, offset, and ext may all be expressions.  \par
\par
           Note  that  not all addressing modes are valid with every in-\par
        struction, refer to the 6805 technical data for valid modes.  \par
\par
\par
        AK.5.1  Control Instructions \par
\par
                clc             cli\par
                nop             rsp\par
                rti             rts\par
                sec             sei\par
                stop            swi\par
                tax             txa\par
                wait\par
\par
\par
        AK.5.2  Bit Manipulation Instructions \par
\par
                brset   #data,*dir,label\par
                brclr   #data,*dir,label\par
        \par
                bset    #data,*dir\par
                bclr    #data,*dir\par
\par
\par
        AK.5.3  Branch Instructions \par
\par
                bra     label           brn     label\par
                bhi     label           bls     label\par
                bcc     label           bcs     label\par
                bne     label           beq     label\par
                bhcc    label           bhcs    label\par
                bpl     label           bmi     label\par
                bmc     label           bms     label\par
                bil     label           bih     label\par
                bsr     label\par
\page\par
\par
        AS68(HC)05 ASSEMBLER                                   PAGE AK-4\par
        6805 INSTRUCTION SET\par
\par
\par
        AK.5.4  Read-Modify-Write Instructions \par
\par
                nega            negx\par
                neg     []\par
        \par
                coma            comx\par
                com     []\par
        \par
                lsra            lsrx\par
                lsr     []\par
        \par
                rora            rorx\par
                ror     []\par
        \par
                asra            asrx\par
                asr     []\par
        \par
                lsla            lslx\par
                lsl     []\par
        \par
                rola            rolx\par
                rol     []\par
        \par
                deca            decx\par
                dec     []\par
        \par
                inca            incx\par
                inc     []\par
        \par
                tsta            tstx\par
                tst     []\par
        \par
                clra            clrx\par
                clr     []\par
\par
\par
        AK.5.5  Register\\Memory Instructions \par
\par
                sub     []              cmp     []\par
                sbc     []              cpx     []\par
                and     []              bit     []\par
                lda     []              sta     []\par
                eor     []              adc     []\par
                ora     []              add     []\par
                ldx     []              stx     []\par
\page\par
\par
        AS68(HC)05 ASSEMBLER                                   PAGE AK-5\par
        6805 INSTRUCTION SET\par
\par
\par
        AK.5.6  Jump and Jump to Subroutine Instructions \par
\par
                jmp     []              jsr     []\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX AL\cf1\par
\par
                             \cf2 AS68(HC[S])08 ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        AL.1  PROCESSOR SPECIFIC DIRECTIVES \par
\par
\par
           The MC68HC(S)08 processor is a superset of the MC6805 proces-\par
        sors.  The AS6808 assembler supports the HC08, HCS08, 6805,  and\par
        HC05 cores.  \par
\par
\par
        AL.1.1  .hc08 Directive \par
\par
        Format:  \par
\par
                .hc08 \par
\par
        The .hc08 directive enables processing of only the HC08 specific\par
        mnemonics.  6805/HC05/HCS08 mnemonics  encountered  without  the\par
        .hc08 directive will be flagged with an <o> error.  \par
\par
           The  .hc08  directive  also  selects the HC08 specific cycles\par
        count to be output.  \par
\par
\par
\page\par
\par
        AS68(HC[S])08 ASSEMBLER                                PAGE AL-2\par
        PROCESSOR SPECIFIC DIRECTIVES\par
\par
\par
        AL.1.2  .hcs08 Directive \par
\par
        Format:  \par
\par
                .hcs08 \par
\par
        The  .hcs08  directive  enables processing of the HCS08 specific\par
        mnemonics.  \par
\par
           The  .hcs08  directive also selects the HCS08 specific cycles\par
        count to be output.  \par
\par
\par
        AL.1.3  .6805 Directive \par
\par
        Format:  \par
\par
                .6805 \par
\par
        The  .6805  directive  enables  processing of only the 6805/HC05\par
        specific mnemonics.  HC08/HCS08  mnemonics  encountered  without\par
        the .hc08/.hcs08 directives will be flagged with an <o> error.  \par
\par
           The  .6805  directive also selects the MC6805 specific cycles\par
        count to be output.  \par
\par
\par
        AL.1.4  .hc05 Directive \par
\par
        Format:  \par
\par
                .hc05 \par
\par
        The  .hc05  directive  enables  processing of only the 6805/HC05\par
        specific mnemonics.  HC08/HCS08  mnemonics  encountered  without\par
        the .hc08/.hcs08 directives will be flagged with an <o> error.  \par
\par
           The .hc05 directive also selects the MC68HC05/146805 specific\par
        cycles count to be output.  \par
\par
\par
\page\par
\par
        AS68(HC[S])08 ASSEMBLER                                PAGE AL-3\par
        PROCESSOR SPECIFIC DIRECTIVES\par
\par
\par
        AL.1.5  The .__.CPU.  Variable \par
\par
\par
           The value of the pre-defined symbol '.__.CPU.' corresponds to\par
        the selected processor type.  The default value is 0 which  cor-\par
        responds  to  the  default  processor type.  The following table\par
        lists the processor types and associated values for  the  AS6808\par
        assembler:  \par
\par
                Processor Type            .__.CPU. Value\par
                --------------            --------------\par
                    .hc08                        0\par
                    .hcs08                       1\par
                    .6805                        2\par
                    .hc05                        3\par
\par
\par
           The  variable  '.__.CPU.'  is by default defined as local and\par
        will not be output to the created .rel file.  The assembler com-\par
        mand line options -g or -a will not cause the local symbol to be\par
        output to the created .rel file.  \par
\par
           The  assembler  .globl  directive  may  be used to change the\par
        variable type to global causing its definition to be  output  to\par
        the  .rel file.  The inclusion of the definition of the variable\par
        '.__.CPU.' might be a useful means of validating that seperately\par
        assembled  files have been compiled for the same processor type.\par
        The linker will report an error for variables with multiple  non\par
        equal definitions.  \par
\par
\par
        AL.2  68HC(S)08 REGISTER SET \par
\par
        The  following  is  a  list  of  the 68HC(S)08 registers used by\par
        AS6808:  \par
\par
                a       -       8-bit accumulator\par
                x       -       index register  <H:X>\par
                s       -       stack pointer\par
\par
\par
\page\par
\par
        AS68(HC[S])08 ASSEMBLER                                PAGE AL-4\par
        68HC(S)08 INSTRUCTION SET\par
\par
\par
        AL.3  68HC(S)08 INSTRUCTION SET \par
\par
\par
           The  following tables list all 68HC(S)08 mnemonics recognized\par
        by the AS6808 assembler.  The designation []  refers  to  a  re-\par
        quired  addressing  mode argument.  The following list specifies\par
        the format for each addressing mode supported by AS6808:  \par
\par
                #data           immediate data\par
                                byte or word data\par
        \par
                *dir            direct page addressing\par
                                (see .setdp directive)\par
                                0 <= dir <= 255 \par
        \par
                ,x              register indexed addressing\par
                                zero offset\par
        \par
                offset,x        register indexed addressing\par
                                  0 <= offset <= 255   --- byte mode\par
                                256 <= offset <= 65535 --- word mode\par
                                (an externally defined offset uses the\par
                                 word mode)\par
        \par
                ,x+             register indexed addressing\par
                                zero offset with post increment\par
        \par
                offset,x+       register indexed addressing\par
                                unsigned byte offset with post increment\par
        \par
                offset,s        stack pointer indexed addressing\par
                                  0 <= offset <= 255   --- byte mode\par
                                256 <= offset <= 65535 --- word mode\par
                                (an externally defined offset uses the\par
                                 word mode)\par
        \par
                ext             extended addressing\par
        \par
                label           branch label\par
\par
        The terms data, dir, offset, and ext may all be expressions.  \par
\par
           Note  that  not all addressing modes are valid with every in-\par
        struction, refer to  the  68HC(S)08  technical  data  for  valid\par
        modes.  \par
\page\par
\par
        AS68(HC[S])08 ASSEMBLER                                PAGE AL-5\par
        68HC(S)08 INSTRUCTION SET\par
\par
\par
        AL.3.1  Control Instructions \par
\par
                clc             cli             daa             div\par
                mul             nop             nsa             psha\par
                pshh            pshx            pula            pulh\par
                pulx            rsp             rti             rts\par
                sec             sei             stop            swi\par
                tap             tax             tpa             tsx\par
                txa             txs             wait\par
\par
\par
        AL.3.2  Bit Manipulation Instructions \par
\par
                brset   #data,*dir,label\par
                brclr   #data,*dir,label\par
        \par
                bset    #data,*dir\par
                bclr    #data,*dir\par
\par
\par
        AL.3.3  Branch Instructions \par
\par
                bra     label           brn     label\par
                bhi     label           bls     label\par
                bcc     label           bcs     label\par
                bne     label           beq     label\par
                bhcc    label           bhcs    label\par
                bpl     label           bmi     label\par
                bmc     label           bms     label\par
                bil     label           bih     label\par
                bsr     label           bge     label\par
                blt     label           bgt     label\par
                ble     label\par
\par
\par
        AL.3.4  Complex Branch Instructions \par
\par
                cbeqa   [],label\par
                cbeqx   [],label\par
                cbeq    [],label\par
                dbnza   label\par
                dbnzx   label\par
                dbnz    [],label\par
\page\par
\par
        AS68(HC[S])08 ASSEMBLER                                PAGE AL-6\par
        68HC(S)08 INSTRUCTION SET\par
\par
\par
        AL.3.5  Read-Modify-Write Instructions \par
\par
                nega                    negx\par
                neg     []\par
        \par
                coma                    comx\par
                com     []\par
        \par
                lsra                    lsrx\par
                lsr     []\par
        \par
                rora                    rorx\par
                ror     []\par
        \par
                asra                    asrx\par
                asr     []\par
        \par
                asla                    aslx\par
                asl     []\par
        \par
                lsla                    lslx\par
                lsl     []\par
        \par
                rola                    rolx\par
                rol     []\par
        \par
                deca                    decx\par
                dec     []\par
        \par
                inca                    incx\par
                inc     []\par
        \par
                tsta                    tstx\par
                tst     []\par
        \par
                clra                    clrx\par
                clr     []              clrh\par
        \par
                aix     #data\par
        \par
                ais     #data\par
\page\par
\par
        AS68(HC[S])08 ASSEMBLER                                PAGE AL-7\par
        68HC(S)08 INSTRUCTION SET\par
\par
\par
        AL.3.6  Register\\Memory Instructions \par
\par
                sub     []              cmp     []\par
                sbc     []              cpx     []\par
                and     []              bit     []\par
                lda     []              sta     []\par
                eor     []              adc     []\par
                ora     []              add     []\par
                ldx     []              stx     []\par
\par
\par
        AL.3.7  Double Operand Move Instruction \par
\par
                mov     [],[]\par
\par
\par
        AL.3.8  16-Bit <H:X> Index Register Instructions \par
\par
                cphx    []\par
                ldhx    []\par
                sthx    []\par
\par
\par
        AL.3.9  Jump and Jump to Subroutine Instructions \par
\par
                jmp     []              jsr     []\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX AM\cf1\par
\par
                                \cf2 AS6809 ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        AM.1  6809 REGISTER SET \par
\par
        The following is a list of the 6809 registers used by AS6809:  \par
\par
                a,b     -       8-bit accumulators\par
                d       -       16-bit accumulator <a:b>\par
                x,y     -       index registers\par
                s,u     -       stack pointers\par
                pc      -       program counter\par
                cc      -       condition code\par
                dp      -       direct page\par
\par
\par
        AM.2  6809 INSTRUCTION SET \par
\par
\par
           The  following  tables  list all 6809 mnemonics recognized by\par
        the AS6809 assembler.  The designation [] refers to  a  required\par
        addressing  mode  argument.   The  following  list specifies the\par
        format for each addressing mode supported by AS6809:  \par
\par
                #data           immediate data\par
                                byte or word data\par
        \par
                *dir            direct page addressing\par
                                (see .setdp directive)\par
                                0 <= dir <= 255 \par
        \par
                label           branch label\par
        \par
                r,r1,r2         registers\par
                                cc,a,b,d,dp,x,y,s,u,pc\par
        \par
\page\par
\par
        AS6809 ASSEMBLER                                       PAGE AM-2\par
        6809 INSTRUCTION SET\par
\par
\par
                ,-x     ,--x    register indexed\par
                                autodecrement\par
        \par
                ,x+     ,x++    register indexed\par
                                autoincrement\par
        \par
                ,x              register indexed addressing\par
                                zero offset\par
        \par
                offset,x        register indexed addressing\par
                                   -16 <= offset <= 15    ---  5-bit\par
                                  -128 <= offset <= -17   ---  8-bit\par
                                    16 <= offset <= 127   ---  8-bit\par
                                -32768 <= offset <= -129  --- 16-bit\par
                                   128 <= offset <= 32767 --- 16-bit\par
                                (external definition of offset\par
                                 uses 16-bit mode)\par
        \par
                a,x             accumulator offset indexed addressing\par
        \par
                ext             extended addressing\par
        \par
                ext,pc          pc addressing ( pc <- pc + ext )\par
        \par
                ext,pcr         pc relative addressing\par
                                \par
                [,--x]          register indexed indirect\par
                                autodecrement\par
        \par
                [,x++]          register indexed indirect\par
                                autoincrement\par
        \par
                [,x]            register indexed indirect addressing\par
                                zero offset\par
        \par
                [offset,x]      register indexed indirect addressing\par
                                  -128 <= offset <= 127   ---  8-bit\par
                                -32768 <= offset <= -129  --- 16-bit\par
                                   128 <= offset <= 32767 --- 16-bit\par
                                (external definition of offset\par
                                 uses 16-bit mode)\par
        \par
                [a,x]           accumulator offset indexed\par
                                indirect addressing\par
        \par
                [ext]           extended indirect addressing\par
        \par
                [ext,pc]        pc indirect addressing\par
                                ( [pc <- pc + ext] )\par
\page\par
\par
        AS6809 ASSEMBLER                                       PAGE AM-3\par
        6809 INSTRUCTION SET\par
\par
\par
        \par
                [ext,pcr]       pc relative indirect addressing\par
\par
        The  terms  data, dir, label, offset, and ext may all be expres-\par
        sions.  \par
\par
           Note  that  not all addressing modes are valid with every in-\par
        struction, refer to the 6809 technical data for valid modes.  \par
\par
\par
        AM.2.1  Inherent Instructions \par
\par
                abx             daa\par
                mul             nop\par
                rti             rts\par
                sex             swi\par
                swi1            swi2\par
                swi3            sync\par
\par
\par
        AM.2.2  Short Branch Instructions \par
\par
                bcc     label           bcs     label\par
                beq     label           bge     label\par
                bgt     label           bhi     label\par
                bhis    label           bhs     label\par
                ble     label           blo     label\par
                blos    label           bls     label\par
                blt     label           bmi     label\par
                bne     label           bpl     label\par
                bra     label           brn     label\par
                bvc     label           bvs     label\par
                bsr     label\par
\page\par
\par
        AS6809 ASSEMBLER                                       PAGE AM-4\par
        6809 INSTRUCTION SET\par
\par
\par
        AM.2.3  Long Branch Instructions \par
\par
                lbcc    label           lbcs    label\par
                lbeq    label           lbge    label\par
                lbgt    label           lbhi    label\par
                lbhis   label           lbhs    label\par
                lble    label           lblo    label\par
                lblos   label           lbls    label\par
                lblt    label           lbmi    label\par
                lbne    label           lbpl    label\par
                lbra    label           lbrn    label\par
                lbvc    label           lbvs    label\par
                lbsr    label\par
\page\par
\par
        AS6809 ASSEMBLER                                       PAGE AM-5\par
        6809 INSTRUCTION SET\par
\par
\par
        AM.2.4  Single Operand Instructions \par
\par
                asla            aslb\par
                asl     []\par
        \par
                asra            asrb\par
                asr     []\par
        \par
                clra            clrb\par
                clr     []\par
        \par
                coma            comb\par
                com     []\par
        \par
                deca            decb\par
                dec     []\par
        \par
                inca            incb\par
                inc     []\par
        \par
                lsla            lslb\par
                lsl     []\par
        \par
                lsra            lsrb\par
                lsr     []\par
        \par
                nega            negb\par
                neg     []\par
        \par
                rola            rolb\par
                rol     []\par
        \par
                rora            rorb\par
                ror     []\par
        \par
                tsta            tstb\par
                tst     []\par
\page\par
\par
        AS6809 ASSEMBLER                                       PAGE AM-6\par
        6809 INSTRUCTION SET\par
\par
\par
        AM.2.5  Double Operand Instructions \par
\par
                adca    []              adcb    []\par
        \par
                adda    []              addb    []\par
        \par
                anda    []              andb    []\par
        \par
                bita    []              bitb    []\par
        \par
                cmpa    []              cmpb    []\par
        \par
                eora    []              eorb    []\par
        \par
                lda     []              ldb     []\par
        \par
                ora     []              orb     []\par
        \par
                sbca    []              sbcb    []\par
        \par
                sta     []              stb     []\par
        \par
                suba    []              subb    []\par
\par
\par
        AM.2.6  D-register Instructions \par
\par
                addd    []              subd    []\par
                cmpd    []              ldd     []\par
                std     []\par
\page\par
\par
        AS6809 ASSEMBLER                                       PAGE AM-7\par
        6809 INSTRUCTION SET\par
\par
\par
        AM.2.7  Index/Stack Register Instructions \par
\par
                cmps    []              cmpu    []\par
                cmpx    []              cmpy    []\par
        \par
                lds     []              ldu     []\par
                ldx     []              ldy     []\par
        \par
                leas    []              leau    []\par
                leax    []              leay    []\par
        \par
                sts     []              stu     []\par
                stx     []              sty     []\par
        \par
                pshs    r               pshu    r\par
                puls    r               pulu    r\par
\par
\par
        AM.2.8  Jump and Jump to Subroutine Instructions \par
\par
                jmp     []              jsr     []\par
\par
\par
        AM.2.9  Register - Register Instructions \par
\par
                exg     r1,r2           tfr     r1,r2\par
\par
\par
        AM.2.10  Condition Code Register Instructions \par
\par
                andcc   #data           orcc    #data\par
                cwai    #data\par
\page\par
\par
        AS6809 ASSEMBLER                                       PAGE AM-8\par
        6809 INSTRUCTION SET\par
\par
\par
        AM.2.11  6800 Compatibility Instructions \par
\par
                aba             cba\par
                clc             cli\par
                clv             des\par
                dex             ins\par
                inx\par
                ldaa    []      ldab    []\par
                oraa    []      orab    []\par
                psha            pshb\par
                pula            pulb\par
                sba             sec\par
                sei             sev\par
                staa    []      stab    []\par
                tab             tap\par
                tba             tpa\par
                tsx             txs\par
                wai\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX AN\cf1\par
\par
                                \cf2 AS6811 ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        AN.1  68HC11 REGISTER SET \par
\par
        The following is a list of the 68HC11 registers used by AS6811: \par
\par
                a,b     -       8-bit accumulators\par
                d       -       16-bit accumulator <a:b>\par
                x,y     -       index registers\par
\par
\par
        AN.2  68HC11 INSTRUCTION SET \par
\par
\par
           The  following tables list all 68HC11 mnemonics recognized by\par
        the AS6811 assembler.  The designation [] refers to  a  required\par
        addressing  mode  argument.   The  following  list specifies the\par
        format for each addressing mode supported by AS6811:  \par
\par
                #data           immediate data\par
                                byte or word data\par
        \par
                *dir            direct page addressing\par
                                (see .setdp directive)\par
                                0 <= dir <= 255 \par
        \par
                ,x              register indirect addressing\par
                                zero offset\par
        \par
                offset,x        register indirect addressing\par
                                0 <= offset <= 255\par
        \par
                ext             extended addressing\par
        \par
                label           branch label\par
\page\par
\par
        AS6811 ASSEMBLER                                       PAGE AN-2\par
        68HC11 INSTRUCTION SET\par
\par
\par
\par
        The terms data, dir, offset, and ext may all be expressions.  \par
\par
           Note  that  not all addressing modes are valid with every in-\par
        struction, refer to the 68HC11 technical data for valid modes.  \par
\par
\par
        AN.2.1  Inherent Instructions \par
\par
                aba             abx\par
                aby             cba\par
                clc             cli\par
                clv             daa\par
                des             dex\par
                dey             fdiv\par
                idiv            ins\par
                inx             iny\par
                mul             nop\par
                rti             rts\par
                sba             sec\par
                sei             sev\par
                stop            swi\par
                tab             tap\par
                tba             tpa\par
                tsx             txs\par
                wai             xgdx\par
                xgdy\par
        \par
                psha            pshb\par
                psh a           psh b\par
                pshx            pshy\par
                psh x           psh y\par
        \par
                pula            pulb\par
                pul a           pul b\par
                pulx            puly\par
                pul x           pul y\par
\page\par
\par
        AS6811 ASSEMBLER                                       PAGE AN-3\par
        68HC11 INSTRUCTION SET\par
\par
\par
        AN.2.2  Branch Instructions \par
\par
                bra     label           brn     label\par
                bhi     label           bls     label\par
                bcc     label           bhs     label\par
                bcs     label           blo     label\par
                bne     label           beq     label\par
                bvc     label           bvs     label\par
                bpl     label           bmi     label\par
                bge     label           blt     label\par
                bgt     label           ble     label\par
                bsr     label\par
\page\par
\par
        AS6811 ASSEMBLER                                       PAGE AN-4\par
        68HC11 INSTRUCTION SET\par
\par
\par
        AN.2.3  Single Operand Instructions \par
\par
                asla            aslb            asld\par
                asl a           asl b           asl d\par
                asl     []\par
        \par
                asra            asrb\par
                asr a           asr b\par
                asr     []\par
        \par
                clra            clrb\par
                clr a           clr b\par
                clr     label\par
        \par
                coma            comb\par
                com a           com b\par
                com     []\par
        \par
                deca            decb\par
                dec a           dec b\par
                dec     []\par
        \par
                inca            incb\par
                inc a           inc b\par
                inc     []\par
        \par
                lsla            lslb            lsld\par
                lsl a           lsl b           lsl d\par
                lsl     []\par
        \par
                lsra            lsrb            lsrd\par
                lsr a           lsr b           lsr d\par
                lsr     []\par
        \par
                nega            negb\par
                neg a           neg b\par
                neg     []\par
        \par
                rola            rolb\par
                rol a           rol b\par
                rol     []\par
        \par
                rora            rorb\par
                ror a           ror b\par
                ror     []\par
        \par
                tsta            tstb\par
                tst a           tst b\par
                tst     []\par
\page\par
\par
        AS6811 ASSEMBLER                                       PAGE AN-5\par
        68HC11 INSTRUCTION SET\par
\par
\par
        AN.2.4  Double Operand Instructions \par
\par
                adca    []              adcb    []\par
                adc a   []              adc b   []\par
        \par
                adda    []      addb    []      addd    []\par
                add a   []      add b   []      add d   []\par
        \par
                anda    []              andb    []\par
                and a   []              and b   []\par
        \par
                bita    []              bitb    []\par
                bit a   []              bit b   []\par
        \par
                cmpa    []              cmpb    []\par
                cmp a   []              cmp b   []\par
        \par
                eora    []              eorb    []\par
                eor a   []              eor b   []\par
        \par
                ldaa    []              ldab    []\par
                lda a   []              lda b   []\par
        \par
                oraa    []              orab    []\par
                ora a   []              ora b   []\par
        \par
                sbca    []              sbcb    []\par
                sbc a   []              sbc b   []\par
        \par
                staa    []              stab    []\par
                sta a   []              sta b   []\par
        \par
                suba    []      subb    []      subd    []\par
                sub a   []      sub b   []      sub d   []\par
\par
\par
        AN.2.5  Bit Manupulation Instructions \par
\par
                bclr    [],#data\par
                bset    [],#data\par
        \par
                brclr   [],#data,label\par
                brset   [],#data,label\par
\page\par
\par
        AS6811 ASSEMBLER                                       PAGE AN-6\par
        68HC11 INSTRUCTION SET\par
\par
\par
        AN.2.6  Jump and Jump to Subroutine Instructions \par
\par
                jmp     []              jsr     []\par
\par
\par
        AN.2.7  Long Register Instructions \par
\par
                cpx     []              cpy     []\par
        \par
                ldd     []              lds     []\par
                ldx     []              ldy     []\par
        \par
                std     []              sts     []\par
                stx     []              sty     []\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX AO\cf1\par
\par
                             \cf2 AS68(HC[S])12 ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        AO.1  PROCESSOR SPECIFIC DIRECTIVES \par
\par
\par
           The   AS6812  assembler  supports  the  68HC(S)12  series  of\par
        microprocessors which includes  the  68HC(S)8xx  and  68HC(S)9xx\par
        series.  \par
\par
\par
        AO.1.1  .hc12 Directive \par
\par
        Format:  \par
\par
                .hc12 \par
\par
        The  .hc12 directive selects the HC12 core specific cycles count\par
        to be output.  \par
\par
\par
        AO.1.2  .hcs12 Directive \par
\par
        Format:  \par
\par
                .hcs12 \par
\par
        The  .hcs12  directive  selects  the  HCS12 core specific cycles\par
        count to be output.  \par
\par
\par
\page\par
\par
        AS68(HC[S])12 ASSEMBLER                                PAGE AO-2\par
        PROCESSOR SPECIFIC DIRECTIVES\par
\par
\par
        AO.1.3  The .__.CPU.  Variable \par
\par
\par
           The value of the pre-defined symbol '.__.CPU.' corresponds to\par
        the selected processor type.  The default value is 0 which  cor-\par
        responds  to  the  default  processor type.  The following table\par
        lists the processor types and associated values for  the  AS6812\par
        assembler:  \par
\par
                Processor Type            .__.CPU. Value\par
                --------------            --------------\par
                    .hc12                        0\par
                    .hcs12                       1\par
\par
\par
           The  variable  '.__.CPU.'  is by default defined as local and\par
        will not be output to the created .rel file.  The assembler com-\par
        mand line options -g or -a will not cause the local symbol to be\par
        output to the created .rel file.  \par
\par
           The  assembler  .globl  directive  may  be used to change the\par
        variable type to global causing its definition to be  output  to\par
        the  .rel file.  The inclusion of the definition of the variable\par
        '.__.CPU.' might be a useful means of validating that seperately\par
        assembled  files have been compiled for the same processor type.\par
        The linker will report an error for variables with multiple  non\par
        equal definitions.  \par
\par
\par
        AO.2  68HC(S)12 REGISTER SET \par
\par
        The  following  is  a  list  of  the 68HC(S)12 registers used by\par
        AS6812:  \par
\par
                a,b     -       8-bit accumulators\par
                d       -       16-bit accumulator <a:b>\par
                x,y     -       index registers\par
                sp,s    -       stack pointer\par
                pc      -       program counter\par
                ccr,cc  -       condition code register\par
\par
\par
\page\par
\par
        AS68(HC[S])12 ASSEMBLER                                PAGE AO-3\par
        68HC(S)12 INSTRUCTION SET\par
\par
\par
        AO.3  68HC(S)12 INSTRUCTION SET \par
\par
\par
           The  following tables list all 68HC(S)12 mnemonics recognized\par
        by the AS6812 assembler.  The designation []  refers  to  a  re-\par
        quired  addressing  mode argument.  The following list specifies\par
        the format for each addressing mode supported by AS6812:  \par
\par
                #data           immediate data\par
                                byte or word data\par
        \par
                ext             extended addressing\par
        \par
                pg              memory page number\par
        \par
                *dir            direct page addressing\par
                                (see .setdp directive)\par
                                0 <= dir <= 255 \par
        \par
                label           branch label\par
        \par
                r,r1,r2         registers\par
                                ccr,a,b,d,x,y,sp,pc\par
        \par
                -x      x-      register indexed, pre or\par
                ,-x     ,x-     post autodecrement by 1\par
        \par
                n,-x    n,x-    register indexed, pre or\par
                                post autodecrement by 1 - 8\par
        \par
                +x      x+      register indexed, pre or\par
                ,+x     ,x+     post autoincrement by 1\par
        \par
                n,+x    n,x+    register indexed, pre or\par
                                post autoincrement by 1 - 8\par
        \par
                offset,x        register indexed addressing\par
                                   -16 <= offset <= 15    ---  5-bit\par
                                  -256 <= offset <= -17   ---  9-bit\par
                                    16 <= offset <= 255   ---  9-bit\par
                                -32768 <= offset <= -257  --- 16-bit\par
                                   256 <= offset <= 32767 --- 16-bit\par
                                (external definition of offset\par
                                 uses 16-bit mode)\par
        \par
                [offset,x]      register indexed indirect addressing\par
                                -32768 <= offset <= 32767 --- 16-bit\par
        \par
                [,x]            register indexed indirect addressing\par
\page\par
\par
        AS68(HC[S])12 ASSEMBLER                                PAGE AO-4\par
        68HC(S)12 INSTRUCTION SET\par
\par
\par
                                zero offset\par
        \par
                a,x             accumulator offset indexed addressing\par
        \par
                [d,x]           d accumulator offset indexed\par
                                indirect addressing\par
\par
        The  terms  data, dir, label, offset, and ext may all be expres-\par
        sions.  \par
\par
           Note  that  not all addressing modes are valid with every in-\par
        struction, refer to  the  68HC(S)12  technical  data  for  valid\par
        modes.  \par
\par
\par
        AO.3.1  Inherent Instructions \par
\par
                aba             bgnd            cba\par
                daa             dex             dey\par
                ediv            edivs           emul\par
                emuls           fdiv            idiv\par
                idivs           inx             iny\par
                mem             mul             nop\par
                psha            pshb            pshc\par
                pshd            pshx            pshy\par
                pula            pulb            pulc\par
                puld            pulx            puly\par
                rev             revw            rtc\par
                rti             rts             sba\par
                stop            swi             tab\par
                tba             wai             wav\par
                wavr\par
\page\par
\par
        AS68(HC[S])12 ASSEMBLER                                PAGE AO-5\par
        68HC(S)12 INSTRUCTION SET\par
\par
\par
        AO.3.2  Short Branch Instructions \par
\par
                bcc     label           bcs     label\par
                beq     label           bge     label\par
                bgt     label           bhi     label\par
                bhis    label           bhs     label\par
                ble     label           blo     label\par
                blos    label           bls     label\par
                blt     label           bmi     label\par
                bne     label           bpl     label\par
                bra     label           brn     label\par
                bvc     label           bvs     label\par
                bsr     label\par
\par
\par
        AO.3.3  Long Branch Instructions \par
\par
                lbcc    label           lbcs    label\par
                lbeq    label           lbge    label\par
                lbgt    label           lbhi    label\par
                lbhis   label           lbhs    label\par
                lble    label           lblo    label\par
                lblos   label           lbls    label\par
                lblt    label           lbmi    label\par
                lbne    label           lbpl    label\par
                lbra    label           lbrn    label\par
                lbvc    label           lbvs    label\par
\par
\par
        AO.3.4  Branch on Decrement, Test, or Increment \par
\par
                dbeq    r,label         dbne    r,label\par
                ibeq    r,label         ibne    r,label\par
                tbeq    r,label         tbne    r,label\par
\par
\par
        AO.3.5  Bit Clear and Set Instructions \par
\par
                bclr    [],#data\par
                bset    [],#data\par
\par
\par
\page\par
\par
        AS68(HC[S])12 ASSEMBLER                                PAGE AO-6\par
        68HC(S)12 INSTRUCTION SET\par
\par
\par
        AO.3.6  Branch on Bit Clear or Set \par
\par
                brclr   [],#data,label\par
                brset   [],#data,label\par
\par
\par
        AO.3.7  Single Operand Instructions \par
\par
                asla            aslb\par
                asl     []\par
        \par
                asra            asrb\par
                asr     []\par
        \par
                clra            clrb\par
                clr     []\par
        \par
                coma            comb\par
                com     []\par
        \par
                deca            decb\par
                dec     []\par
        \par
                inca            incb\par
                inc     []\par
        \par
                lsla            lslb\par
                lsl     []\par
        \par
                lsra            lsrb\par
                lsr     []\par
        \par
                nega            negb\par
                neg     []\par
        \par
                rola            rolb\par
                rol     []\par
        \par
                rora            rorb\par
                ror     []\par
        \par
                tsta            tstb\par
                tst     []\par
\page\par
\par
        AS68(HC[S])12 ASSEMBLER                                PAGE AO-7\par
        68HC(S)12 INSTRUCTION SET\par
\par
\par
        AO.3.8  Double Operand Instructions \par
\par
                adca    []              adcb    []\par
        \par
                adda    []              addb    []\par
        \par
                anda    []              andb    []\par
        \par
                bita    []              bitb    []\par
        \par
                cmpa    []              cmpb    []\par
        \par
                eora    []              eorb    []\par
        \par
                ldaa    []      <=>     lda     []\par
        \par
                ldab    []      <=>     ldb     []\par
        \par
                oraa    []      <=>     ora     []\par
        \par
                orab    []      <=>     orb     []\par
        \par
                sbca    []              sbcb    []\par
        \par
                staa    []      <=>     sta     []\par
        \par
                stab    []      <=>     stb     []\par
        \par
                suba    []              subb    []\par
\par
\par
        AO.3.9  Move Instructions \par
\par
                movb    [],[]           movw    [],[]\par
\par
\par
        AO.3.10  D-register Instructions \par
\par
                addd    []              subd    []\par
                cpd     []      <=>     cmpd    []\par
                ldd     []              std     []\par
\page\par
\par
        AS68(HC[S])12 ASSEMBLER                                PAGE AO-8\par
        68HC(S)12 INSTRUCTION SET\par
\par
\par
        AO.3.11  Index/Stack Register Instructions \par
\par
                cps     []      <=>     cmps    []\par
                cpx     []      <=>     cmpx    []\par
                cpy     []      <=>     cmpy    []\par
        \par
                lds     []\par
                ldx     []              ldy     []\par
        \par
                leas    []\par
                leax    []              leay    []\par
        \par
                sts     []\par
                stx     []              sty     []\par
\par
\par
        AO.3.12  Jump and Jump/Call to Subroutine Instructions \par
\par
                call    [],pg\par
                jmp     []              jsr     []\par
\par
\par
        AO.3.13  Other Special Instructions \par
\par
                emacs   []\par
                emaxd   []              emaxm   []\par
                emind   []              eminm   []\par
                etbl    []\par
                maxa    []              maxm    []\par
                mina    []              minm    []\par
                tbl     []              trap    #data\par
\par
\par
        AO.3.14  Register - Register Instructions \par
\par
                exg     r1,r2           sex     r1,r2\par
                tfr     r1,r2\par
\par
\par
\page\par
\par
        AS68(HC[S])12 ASSEMBLER                                PAGE AO-9\par
        68HC(S)12 INSTRUCTION SET\par
\par
\par
        AO.3.15  Condition Code Register Instructions \par
\par
                andcc   #data           orcc    #data\par
\par
\par
        AO.3.16  M68HC11 Compatibility Mode Instructions \par
\par
                abx             aby             clc\par
                cli             clv             des\par
                ins             sec             sei\par
                sev             tap             tpa\par
                tsx             tsy             txs\par
                tys             xgdx            xgdy\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX AP\cf1\par
\par
                                \cf2 AS6816 ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        AP.1  68HC16 REGISTER SET \par
\par
        The following is a list of the 68HC16 registers used by AS6816: \par
\par
                a,b     -       8-bit accumulators\par
                d       -       16-bit accumulator <a:b>\par
                e       -       16-bit accumulator\par
                x,y,z   -       index registers\par
                k       -       address extension register\par
                s       -       stack pointer\par
                ccr     -       condition code\par
\par
\par
        AP.2  68HC16 INSTRUCTION SET \par
\par
\par
           The  following tables list all 68HC16 mnemonics recognized by\par
        the AS6816 assembler.  The designation [] refers to  a  required\par
        addressing  mode  argument.   The  following  list specifies the\par
        format for each addressing mode supported by AS6816:  \par
\par
                #data           immediate data\par
                                byte or word data\par
        \par
                #xo,#yo         local immediate data (mac / rmac)\par
        \par
                label           branch label\par
        \par
                r               register\par
                                ccr,a,b,d,e,x,y,z,s\par
        \par
                ,x              zero offset register indexed addressing\par
                ,x8\par
\page\par
\par
        AS6816 ASSEMBLER                                       PAGE AP-2\par
        68HC16 INSTRUCTION SET\par
\par
\par
                ,x16\par
        \par
                offset,x        register indexed addressing\par
                                     0 <= offset <= 255   ---  8-bit\par
                                -32768 <= offset <= -1    --- 16-bit\par
                                   256 <= offset <= 32767 --- 16-bit\par
                                (external definition of offset\par
                                 uses 16-bit mode)\par
        \par
                offset,x8       unsigned 8-bit offset indexed addressing\par
                offset,x16      signed 16-bit offset indexed addressing\par
        \par
                e,x             accumulator offset indexed addressing\par
        \par
                ext             extended addressing\par
        \par
                bank            64K bank number (jmp / jsr)\par
\par
        The  terms data, label, offset, bank, and ext may all be expres-\par
        sions.  \par
\par
           Note  that  not all addressing modes are valid with every in-\par
        struction, refer to the 6816 technical data for valid modes.  \par
\page\par
\par
        AS6816 ASSEMBLER                                       PAGE AP-3\par
        68HC16 INSTRUCTION SET\par
\par
\par
        AP.2.1  Inherent Instructions \par
\par
                aba             abx             aby             abz\par
                ace             aced            ade             adx\par
                ady             adz             aex             aey\par
                aez             bgnd            cba             daa\par
                ediv            edivs           emul            emuls\par
                fdiv            fmuls           idiv            ldhi\par
                lpstop          mul             nop             psha\par
                pshb            pshmac          pula            pulb\par
                pulmac          rtr             rts             sba\par
                sde             sted            swi             sxt\par
                tab             tap             tba             tbek\par
                tbsk            tbxk            tbyk            tbzk\par
                tde             tdmsk           tdp             ted\par
                tedm            tekb            tem             tmer\par
                tmet            tmxed           tpa             tpd\par
                tskb            tsx             tsy             tsz\par
                txkb            txs             txy             txz\par
                tykb            tys             tyx             tyz\par
                tzkb            tzs             tzx             tzy\par
                wai             xgab            xgde            xgdx\par
                xgdy            xgdz            xgex            xgey\par
                xgez\par
\par
\par
        AP.2.2  Push/Pull Multiple Register Instructions \par
\par
                pshm    r,...           pulm    r,...\par
\par
\par
        AP.2.3  Short Branch Instructions \par
\par
                bcc     label           bcs     label\par
                beq     label           bge     label\par
                bgt     label           bhi     label\par
                bhis    label           bhs     label\par
                ble     label           blo     label\par
                blos    label           bls     label\par
                blt     label           bmi     label\par
                bne     label           bpl     label\par
                bra     label           brn     label\par
                bvc     label           bvs     label\par
                bsr     label\par
\page\par
\par
        AS6816 ASSEMBLER                                       PAGE AP-4\par
        68HC16 INSTRUCTION SET\par
\par
\par
        AP.2.4  Long Branch Instructions \par
\par
                lbcc    label           lbcs    label\par
                lbeq    label           lbge    label\par
                lbgt    label           lbhi    label\par
                lbhis   label           lbhs    label\par
                lble    label           lblo    label\par
                lblos   label           lbls    label\par
                lblt    label           lbmi    label\par
                lbne    label           lbpl    label\par
                lbra    label           lbrn    label\par
                lbvc    label           lbvs    label\par
                lbsr    label\par
\par
\par
        AP.2.5  Bit Manipulation Instructions \par
\par
                bclr    [],#data\par
                bset    [],#data\par
        \par
                brclr   [],#data,label\par
                brset   [],#data,label\par
\page\par
\par
        AS6816 ASSEMBLER                                       PAGE AP-5\par
        68HC16 INSTRUCTION SET\par
\par
\par
        AP.2.6  Single Operand Instructions \par
\par
                asla                    aslb\par
                asld                    asle\par
                aslm\par
                asl     []              aslw    []\par
        \par
                asra                    asrb\par
                asrd                    asre\par
                asrm\par
                asr     []              asrw    []\par
        \par
                clra                    clrb\par
                clrd                    clre\par
                                        clrm\par
                clr     []              clrw    []\par
        \par
                coma                    comb\par
                comd                    come\par
                com     []              comw    []\par
        \par
                deca                    decb\par
                dec     []              decw    []\par
        \par
                inca                    incb\par
                inc     []              incw    []\par
        \par
                lsla                    lslb\par
                lsld                    lsle\par
                lslm\par
                lsl     []              lslw    []\par
        \par
                lsra                    lsrb\par
                lsrd                    lsre\par
                lsr     []              lsrw    []\par
        \par
                nega                    negb\par
                negd                    nege\par
                neg     []              negw    []\par
        \par
                rola                    rolb\par
                rold                    role\par
                rol     []              rolw    []\par
        \par
                rora                    rorb\par
                rord                    rore\par
                ror     []              rorw    []\par
        \par
                tsta                    tstb\par
\page\par
\par
        AS6816 ASSEMBLER                                       PAGE AP-6\par
        68HC16 INSTRUCTION SET\par
\par
\par
                tsta                    tste\par
                tst     []              tstw    []\par
\par
\par
        AP.2.7  Double Operand Instructions \par
\par
                adca    []              adcb    []\par
                adcd    []              adce    []\par
        \par
                adda    []              addb    []\par
                addd    []              adde    []\par
        \par
                anda    []              andb    []\par
                andd    []              ande    []\par
        \par
                bita    []              bitb    []\par
        \par
                cmpa    []              cmpb    []\par
                cpd     []              cpe     []\par
        \par
                eora    []              eorb    []\par
                eord    []              eore    []\par
        \par
                ldaa    []              ldab    []\par
                ldd     []              lde     []\par
        \par
                oraa    []              orab    []\par
                ord     []              ore     []\par
        \par
                sbca    []              sbcb    []\par
                sbcd    []              sbce    []\par
        \par
                staa    []              stab    []\par
                std     []              ste     []\par
        \par
                suba    []              subb    []\par
                subd    []              sube    []\par
\page\par
\par
        AS6816 ASSEMBLER                                       PAGE AP-7\par
        68HC16 INSTRUCTION SET\par
\par
\par
        AP.2.8  Index/Stack Register Instructions \par
\par
                cps     []              cpx     []\par
                cpy     []              cpz     []\par
        \par
                lds     []              ldx     []\par
                ldy     []              ldz     []\par
        \par
                sts     []              stx     []\par
                sty     []              stz     []\par
\par
\par
        AP.2.9  Jump and Jump to Subroutine Instructions \par
\par
                jmp     bank,[]         jsr     bank,[]\par
\par
\par
        AP.2.10  Condition Code Register Instructions \par
\par
                andp    #data           orp     #data\par
\par
\par
        AP.2.11  Multiply and Accumulate Instructions \par
\par
                mac     #data           rmac    #data\par
                mac     #xo,#yo         rmac    #xo,#yo\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX AQ\cf1\par
\par
                                 \cf2 AS740 ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        AQ.1  ACKNOWLEDGMENT \par
\par
\par
           Thanks to Uwe Steller for his contribution of the AS740 cross\par
        assembler.  \par
\par
                Uwe Stellar\par
                Uwe dot Steller at t-online dot de\par
\par
\par
\par
           The  instruction  syntax  of  this  cross  assembler uses the\par
        square brackets [] to denote addressing indirection.  \par
\par
\par
        AQ.2  740 REGISTER SET \par
\par
        The following is a list of the 740 registers used by AS740:  \par
\par
                a       -       8-bit accumulator\par
                x,y     -       index registers\par
\par
\par
\page\par
\par
        AS740 ASSEMBLER                                        PAGE AQ-2\par
        740 INSTRUCTION SET\par
\par
\par
        AQ.3  740 INSTRUCTION SET \par
\par
\par
           The  following  tables  list  all 740 family mnemonics recog-\par
        nized by the AS740 assembler.  The designation []  refers  to  a\par
        required addressing mode argument.  The following list specifies\par
        the format for each addressing mode supported by AS740:  \par
\par
                #data           immediate data byte\par
        \par
                #data,*zp       immediate data to zero page\par
        \par
                a               accumulator addressing\par
        \par
                *zp             zero page addressing\par
                                (see .setdp directive)\par
                                0 <= dir <= 255 \par
        \par
                *zp,x           zero page x addressing\par
                *zp,y           zero page y addressing\par
                                address = (offset + (x or y))\par
        \par
                [*zp,x]         indirect x addressing\par
                                0 <= offset <= 255\par
                                address = 2 bytes at location\par
                                    [(offset + (x or y)) mod 256]\par
        \par
                [*zp],y         indirect y addressing\par
                                address = 2 byte value at offset\par
                                    plus the value of the y register\par
        \par
                abs             absolute addressing (2 byte)\par
                abs,x           absolute x addressing (2 byte + x)\par
                abs,y           absolute y addressing (2 byte + y)\par
        \par
                [abs]           indirect addressing (2 byte)\par
        \par
                label           branch label\par
        \par
                \\special        low order byte of address 0xFFnn\par
        \par
                BIT#,*zp        bit set/clear zero page\par
                BIT#,A          bit set/clear accumulator\par
        \par
                BIT#,*zp,label  branch on bit set/clear in zero page\par
                BIT#,A,label    branch on bit set/clear in accumulator\par
\par
        The terms data, zp, abs, BIT , special, and label may all be ex-\par
        pressions.  \par
\page\par
\par
        AS740 ASSEMBLER                                        PAGE AQ-3\par
        740 INSTRUCTION SET\par
\par
\par
           Note  that  not all addressing modes are valid with every in-\par
        struction, refer to the 740 technical data for valid modes.  \par
\par
\par
        AQ.3.1  Inherent Instructions \par
\par
                brk                     clc\par
                cld                     cli\par
                clt                     clv\par
                dex                     dey\par
                inx                     iny\par
                nop                     pha\par
                php                     pla\par
                plp                     rti\par
                rts                     sec\par
                sed                     sei\par
                set                     stp\par
                tax                     tay\par
                tsx                     txa\par
                txs                     tya\par
                wit\par
\par
\par
        AQ.3.2  Branch Instructions \par
\par
                bcc     label           bhs     label\par
                bcs     label           blo     label\par
                beq     label           bmi     label\par
                bne     label           bpl     label\par
                bvc     label           bvs     label\par
                bra     label\par
\par
\par
        AQ.3.3  Single Operand Instructions \par
\par
                asl     []\par
                dec     []\par
                inc     []\par
                lsr     []\par
                rol     []\par
                ror     []\par
\page\par
\par
        AS740 ASSEMBLER                                        PAGE AQ-4\par
        740 INSTRUCTION SET\par
\par
\par
        AQ.3.4  Double Operand Instructions \par
\par
                adc     []\par
                and     []\par
                bit     []\par
                cmp     []\par
                eor     []\par
                lda     []\par
                ora     []\par
                sbc     []\par
                sta     []\par
\par
\par
        AQ.3.5  Jump and Jump to Subroutine Instructions \par
\par
                jmp     []              jsr     []\par
\par
\par
        AQ.3.6  Miscellaneous X and Y Register Instructions \par
\par
                cpx     []\par
                cpy     []\par
                ldx     []\par
                stx     []\par
                ldy     []\par
                sty     []\par
\par
\par
        AQ.3.7  Bit Instructions \par
\par
                bit     []\par
                bbc     BIT#,[],label           bbs     BIT#,[],label\par
                clb     BIT#,[]                 seb     BIT#,[]\par
\par
\par
        AQ.3.8  Other Instructions \par
\par
                div     []                      mul     []\par
                ldm     #imm,[]                 com     []\par
                tst     []                      rrf     []\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX AR\cf1\par
\par
                                \cf2 AS78K0 ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        AR.1  PROCESSOR SPECIFIC DIRECTIVES \par
\par
\par
\par
        AR.1.1  .setdp Directive \par
\par
        Format:  \par
\par
                .setdp [base [,area]] \par
\par
        The set direct page directive has a common format in all the as-\par
        semblers supporting a paged mode.  The .setdp directive is  used\par
        to  inform  the  AS78K0 assembler of the current SFR page region\par
        and the offset address within the selected area.  The normal in-\par
        vocation methods are:  \par
\par
               .area   SFR  (PAG)\par
               .setdp\par
        \par
               or\par
        \par
               .setdp  0xFF00,SFR\par
\par
\par
        The  directives  specify that the direct page is in area SFR and\par
        its offset address is 0xFF00 (the only valid value for all r78k0\par
        microprocessor  variations).   Be  sure to place the SFR area at\par
        address 0xFF00 during linking.  When the base address  and  area\par
        are  not  specified,  then  0xFF00  and the current area are the\par
        defaults.  If a .setdp directive is  not  issued  the  assembler\par
        defaults the direct page to the area "CODE" at offset 0xFF00.  \par
\par
\page\par
\par
        AS78K0 ASSEMBLER                                       PAGE AR-2\par
        PROCESSOR SPECIFIC DIRECTIVES\par
\par
\par
           The assembler verifies that any local variable used in an SFR\par
        variable reference is located in this area.  Local variable  and\par
        constant  value direct access addresses are checked to be within\par
        the address range from 0xFF00 to 0xFFFF.  \par
\par
           External SFR references are assumed by the assembler to be in\par
        the correct area and have valid offsets.  The linker will  check\par
        all SFR page relocations to verify that they are within the cor-\par
        rect area.  \par
\par
\par
        AR.1.2  .xerr Directive \par
\par
        Format:  \par
\par
                .xerr [n] \par
\par
\par
           The expanded error directive outputs alternate error messages\par
        for the <a> error at the commmand line and in the listing  files\par
        created by the assembler.  The modes are:  \par
\par
               .xerr [0]\par
        \par
                   Restores the default <a> error reporting.\par
        \par
               .xerr 1\par
        \par
                   Replaces the <a> error with the <x> error which\par
                   lists the source line containing the error on\par
                   the stdout device.\par
        \par
               .xerr 2\par
        \par
                   Replaces the <a> error with the <x> error which\par
                   lists the source line containing the error on\par
                   the stdout device and also outputs an additional\par
                   <x> error describing the detected error.\par
        \par
               .xerr 3\par
        \par
                   Replaces the <a> error with the <x> error which\par
                   lists the source line containing the error on\par
                   the stdout device and also outputs an additional\par
                   <x> error describing the detected error.  The\par
                   additional <x> error describing the detected\par
                   error is inserted into the optional listing file.\par
\par
\par
\page\par
\par
        AS78K0 ASSEMBLER                                       PAGE AR-3\par
        78K/0 REGISTER SET\par
\par
\par
        AR.2  78K/0 REGISTER SET \par
\par
        The following is a list of the 78K/0 registers used by AS78K0:  \par
\par
                x(r0), a(r1),   8-bit registers\par
                c(r2), b(r3),\par
                e(r4), d(r5),\par
                l(r6), h(r7)\par
        \par
                ax(rp0),        16-bit registers\par
                bc(rp1),\par
                de(rp2),\par
                hl(rp3)\par
        \par
                rb0, rb1,       register bank selection\par
                rb2, rb3\par
        \par
                sp              Stack pointer\par
                psw             Program status word\par
                cy              Carry flag\par
        \par
                Register names are NOT case sensitive.\par
\par
\par
        AR.3  78K/0 INSTRUCTION SET \par
\par
\par
           The  following  tables list all 78K/0 mnemonics recognized by\par
        the AS78K0 assembler.  The designation [] refers to  a  required\par
        addressing  mode  argument.  The first list specifies the format\par
        for each addressing mode supported by AS78K0:  \par
\par
                addr16          direct addressing\par
                                via a 16-bit address\par
        \par
                !addr16         immediate addressing\par
                                only required for the\par
                                long br instruction\par
        \par
                addr11          direct addressing\par
                                via an 11-bit address\par
        \par
                [addr5]         indirect addressing\par
                                via a 5-bit address\par
        \par
                @saddr          short direct addressing\par
                                0xFE20 <= saddr <= 0xFF1F\par
        \par
                @saddr.bit      short direct addressing\par
\page\par
\par
        AS78K0 ASSEMBLER                                       PAGE AR-4\par
        78K/0 INSTRUCTION SET\par
\par
\par
                @saddr,bit      with bit addressing (0-7)\par
                                0xFE20 <= saddr <= 0xFF1F\par
        \par
                *sfr            special function registers\par
                                0xFF00 <= sfr <= 0xFFCF  or\par
                                0xFFE0 <= sfr <= 0xFFFF\par
        \par
                *sfr.bit        special function registers\par
                *sfr,bit        wiht bit addressing (0-7)\par
                                0xFF00 <= sfr <= 0xFFCF  or\par
                                0xFFE0 <= sfr <= 0xFFFF\par
        \par
                label           branch label\par
                                (pc relative addressing)\par
        \par
                #byte           immediate data (8  bit)\par
                #word           immediate data (16 bit)\par
        \par
                rn              registers (8 bit)\par
                                x, a, c, b, e, d, l, h\par
                                r0-r7\par
        \par
                rpn             registers (16 bit)\par
                                ax, bc, de, hl\par
                                rp0-rp3\par
        \par
                rbn             register bank\par
                                rb0-rb3\par
        \par
                sp              stack pointer\par
        \par
                psw             program status register\par
        \par
                cy              carry flag\par
        \par
                [DE], [HL]      register indirect addressing\par
        \par
                [HL+byte]       based register indirect addressing\par
                [HL,byte]\par
                [HL+B]\par
                [HL,B]\par
                [HL+C]\par
                [HL,C]\par
        \par
                [HL].bit        register indirect addressing\par
                                with bit addressing\par
\par
\par
\page\par
\par
        AS78K0 ASSEMBLER                                       PAGE AR-5\par
        78K/0 INSTRUCTION SET\par
\par
\par
           The  terms  addr16,  addr11,  addr5,  saddr, sfr, bit, label,\par
        byte, and word may all be expressions.  \par
\par
           Absolute  addresses  (CONSTANTS)  will be checked as being in\par
        the 'saddr' range first and then as being in the 'sfr' range  if\par
        no explicit @ or * is specified.  \par
\par
           The  bit addressing modes *sfr.bit and @saddr.bit use the '.'\par
        as a seperator from the address and  the  bit  value.   The  bit\par
        value  can  be  a numeric constant, a named constant, an expres-\par
        sion, or a combination of these.  Because the '.' is also a  le-\par
        gal  character  in a name or label the assembler may not be able\par
        to resolve the address and bit value.  The  optional  method  of\par
        using a ',' to seperate the address and bit value may be used in\par
        this case.  \par
\par
           If  the 'sfr' or 'saddr' address is external then the user is\par
        responsible to ensure the addresses are in  the  proper  ranges.\par
        Paging ERRORS for 'sfr' may be reported by the linker.  \par
\par
           Note  that  not all addressing modes are valid with every in-\par
        struction, refer to the 78K/0 technical data for valid modes.  \par
\par
\par
        AR.3.1  Inherent Instructions \par
\par
                nop     halt    stop\par
                ret     retb    reti\par
                di      ei      brk\par
                adjba   adjbs\par
\par
\par
        AR.3.2  Branch Instructions \par
\par
                bc      label                   bnc     label\par
                bz      label                   bnz     label\par
        \par
                br      []                      dbnz    [],addr16\par
        \par
                bt      [],addr16               bf      [],addr16\par
                btclr   [],addr16\par
\page\par
\par
        AS78K0 ASSEMBLER                                       PAGE AR-6\par
        78K/0 INSTRUCTION SET\par
\par
\par
        AR.3.3  Single Operand Instructions \par
\par
                inc     []                      dec     []\par
                incw    rpn                     dec     rpn\par
        \par
                set1    []                      clr1    []\par
        \par
                set1    cy                      clr1    cy\par
                not1    cy\par
        \par
                ror4    [HL]                    rol4    [HL]\par
        \par
                call    addr16                  callt   [addr5]\par
                callf   addr11\par
        \par
                mulu    x                       divuw   c\par
        \par
                push    []                      pop     []\par
\par
\par
        AR.3.4  Double Operand Instructions \par
\par
                movw    sp,ax                   movw    ax,sp\par
                movw    [],[]                   xchw    ax,rpn\par
        \par
                add     a,[]                    add     saddr,#byte\par
                addc    a,[]                    addc    saddr,#byte\par
                sub     a,[]                    sub     saddr,#byte\par
                subc    a,[]                    subc    saddr,#byte\par
                and     a,[]                    and     saddr,#byte\par
                or      a,[]                    or      saddr,#byte\par
                xor     a,[]                    xor     saddr,#byte\par
                cmp     a,[]                    cmp     saddr,#byte\par
        \par
                mov1    cy,[]                   mov1    [],cy\par
                and1    cy,[]                   and1    [],cy\par
                or1     cy,[]                   or1     [],cy\par
                xor1    cy,[]                   xor1    [],cy\par
        \par
                adddw   ax,#word                subw    ax,#word\par
                cmpw    ax,#word\par
        \par
                ror     a,1                     rol     a,1\par
                rorc    a,1                     rolc    a,1\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX AS\cf1\par
\par
                                \cf2 AS78K0S ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        AS.1  78K/0S REGISTER SET \par
\par
        The following is a list of the 78K/0S registers used by AS78K0S: \par
\par
                x(r0), a(r1),   8-bit registers\par
                c(r2), b(r3),\par
                e(r4), d(r5),\par
                l(r6), h(r7)\par
        \par
                ax(rp0),        16-bit registers\par
                bc(rp1),\par
                de(rp2),\par
                hl(rp3)\par
        \par
                sp              Stack pointer\par
                psw             Program status word\par
                cy              Carry flag\par
        \par
                Register names are NOT case sensitive.\par
\par
\par
        AS.2  78K/0S INSTRUCTION SET \par
\par
\par
           The  following tables list all 78K/0S mnemonics recognized by\par
        the AS78K0S assembler.  The designation [] refers to a  required\par
        addressing  mode  argument.  The first list specifies the format\par
        for each addressing mode supported by AS78K0S:  \par
\par
                addr16          direct addressing\par
                                via 16-bit address\par
        \par
                !addr16         immediate addressing\par
\page\par
\par
        AS78K0S ASSEMBLER                                      PAGE AS-2\par
        78K/0S INSTRUCTION SET\par
\par
\par
                                only required for the\par
                                long br instruction\par
        \par
                @saddr          short direct addressing\par
                                0xFE20 <= saddr <= 0xFF1F\par
        \par
                @saddr.bit      short direct addressing\par
                @saddr,bit      with bit addressing (0-7)\par
                                0xFE20 <= saddr <= 0xFF1F\par
        \par
                *sfr            special function registers\par
                                0xFF00 <= sfr <= 0xFFCF  or\par
                                0xFFE0 <= sfr <= 0xFFFF\par
        \par
                *sfr.bit        special function registers\par
                *sfr,bit        wiht bit addressing (0-7)\par
                                0xFF00 <= sfr <= 0xFFCF  or\par
                                0xFFE0 <= sfr <= 0xFFFF\par
        \par
                label           branch label\par
                                (pc relative addressing)\par
        \par
                #byte           immediate data (8  bit)\par
                #word           immediate data (16 bit)\par
        \par
                rn              registers (8 bit)\par
                                x, a, c, b, e, d, l, h\par
                                r0-r7\par
        \par
                rpn             registers (16 bit)\par
                                ax, bc, de, hl\par
                                rp0-rp3\par
        \par
                sp              stack pointer\par
        \par
                psw             program status register\par
        \par
                cy              carry flag\par
        \par
                [DE], [HL]      register indirect addressing\par
        \par
                [HL+byte]       based register indirect addressing\par
\par
        The terms addr16, saddr, sfr, bit, label, byte, and word may all\par
        be expressions.  \par
\par
           Absolute  addresses  (CONSTANTS)  will be checked as being in\par
        the 'saddr' range first and then as being in the 'sfr' range  if\par
        no explicit @ or * is specified.  \par
\page\par
\par
        AS78K0S ASSEMBLER                                      PAGE AS-3\par
        78K/0S INSTRUCTION SET\par
\par
\par
           The  bit addressing modes *sfr.bit and @saddr.bit use the '.'\par
        as a seperator from the address and  the  bit  value.   The  bit\par
        value  can  be  a numeric constant, a named constant, an expres-\par
        sion, or a combination of these.  Because the '.' is also a  le-\par
        gal  character  in a name or label the assembler may not be able\par
        to resolve the address and bit value.  The  optional  method  of\par
        using a ',' to seperate the address and bit value may be used in\par
        this case.  \par
\par
           If  the 'sfr' or 'saddr' address is external then the user is\par
        responsible to ensure the addresses are in  the  proper  ranges.\par
        NO ERRORS will be reported by the linker.  \par
\par
           Note  that  not all addressing modes are valid with every in-\par
        struction, refer to the 78K/0S technical data for valid modes.  \par
\par
\par
        AS.2.1  Inherent Instructions \par
\par
                nop     halt    stop\par
                ret     reti\par
                di      ei\par
\par
\par
        AS.2.2  Branch Instructions \par
\par
                bc      label                   bnc     label\par
                bz      label                   bnz     label\par
        \par
                br      []                      dbnz    [],addr16\par
        \par
                bt      [],addr16               bf      [],addr16\par
\par
\par
        AS.2.3  Single Operand Instructions \par
\par
                inc     []                      dec     []\par
                incw    rpn                     dec     rpn\par
        \par
                set1    []                      clr1    []\par
        \par
                set1    cy                      clr1    cy\par
                not1    cy\par
        \par
                call    addr16                  callt   []\par
        \par
                push    []                      pop     []\par
\page\par
\par
        AS78K0S ASSEMBLER                                      PAGE AS-4\par
        78K/0S INSTRUCTION SET\par
\par
\par
        AS.2.4  Double Operand Instructions \par
\par
                movw    sp,ax                   movw    ax,sp\par
                movw    [],[]                   xchw    ax,rpn\par
        \par
                add     a,[]                    add     saddr,#byte\par
                addc    a,[]                    addc    saddr,#byte\par
                sub     a,[]                    sub     saddr,#byte\par
                subc    a,[]                    subc    saddr,#byte\par
                and     a,[]                    and     saddr,#byte\par
                or      a,[]                    or      saddr,#byte\par
                xor     a,[]                    xor     saddr,#byte\par
                cmp     a,[]                    cmp     saddr,#byte\par
        \par
                adddw   ax,#word                subw    ax,#word\par
                cmpw    ax,#word\par
        \par
                ror     a,1                     rol     a,1\par
                rorc    a,1                     rolc    a,1\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX AT\cf1\par
\par
                                \cf2 AS8008 ASSEMBLER\cf1\par
\par
\par
\par
\par
           The  AS8008  assembler supports the 8008 microprocessor using\par
        the traditional MCS-8 assembly language syntax.  \par
\par
\par
        AT.1  8008 REGISTER SET \par
\par
        The following is a list of the 8008 registers used by AS8008:  \par
\par
                a               -       8-bit accumulator\par
                b,c,d,e,h,l     -       8-bit registers\par
\page\par
\par
        AS8008 ASSEMBLER                                       PAGE AT-2\par
        8008 REGISTER SET\par
\par
\par
        AT.2  8008 INSTRUCTION SET \par
\par
\par
           The  following  tables  list all 8008 mnemonics recognized by\par
        the AS8008 assembler.  The following list specifies  the  format\par
        for each addressing mode supported by AS8008:  \par
\par
            Instruction Argument Syntax:\par
        \par
                REGM    register a,b,c,d,e,h,l\par
                        or Memory (address is HL)\par
        \par
                SRC     REGM source\par
        \par
                DST     REGM destination\par
        \par
                #data   immediate byte data\par
        \par
                addr    call or jump address or label\par
        \par
                port    input/output port\par
        \par
                n       reset number\par
\par
        The terms data, addr, port, and n may all be expressions.  \par
\par
           Note  that  not  all addressing modes may be valid with every\par
        instruction.  Refer to the 8008 technical data for valid modes. \par
\par
\par
        AT.2.1  Instruction Listing \par
\par
            Single Register Instructions    REGM != a or M\par
                inr     REGM            dcr     REGM\par
        \par
            Mov Instructions    SRC and DST not both = M\par
                mov     DST,SRC\par
        \par
            Register or Memory to Accumulator Instructions\par
                add     REGM            adc     REGM\par
                sub     REGM            sbb     REGM\par
                ana     REGM            xra     REGM\par
                ora     REGM            cmp     REGM\par
        \par
            Rotate Accumulator Instructions\par
                rlc                     rrc\par
                ral                     rar\par
        \par
            Immediate Instructions\par
\page\par
\par
        AS8008 ASSEMBLER                                       PAGE AT-3\par
        8008 INSTRUCTION SET\par
\par
\par
                movi    REGM,#data\par
                adi     #data           aci     #data\par
                sui     #data           sbi     #data\par
                ani     #data           xri     #data\par
                ori     #data           cpi     #data\par
        \par
            Jump Instructions\par
                jmp     addr\par
                jc      addr            jnc     addr\par
                jz      addr            jnz     addr\par
                jp      addr            jm      addr\par
                jpe     addr            jpo     addr\par
        \par
            Call Instructions\par
                call    addr\par
                cc      addr            cnc     addr\par
                cz      addr            cnz     addr\par
                cp      addr            cm      addr\par
                cpe     addr            cpo     addr\par
        \par
            Return Instructions\par
                rte\par
                rc                      rnc\par
                rz                      rnz\par
                rp                      rm\par
                rpe                     rpo\par
        \par
            Reset Instruction\par
                rst     n       0 <= n <= 7\par
        \par
            Input/Output Instructions\par
                in      port    0 <= port <= 7\par
                out     port    8 <= port <= 31\par
        \par
            Halt and No-Operation Instruction\par
                hlt\par
                nop\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX AU\cf1\par
\par
                                \cf2 AS8008S ASSEMBLER\cf1\par
\par
\par
\par
\par
           The  AS8008S assembler supports the 8008 microprocessor using\par
        the early MCS-8 assembly language syntax of a Fortan  based  as-\par
        sembler/simulator  (SIM-8)  which  had minimal lexical analysis.\par
        The instruction set contains a mnemonic for every  variation  of\par
        the basic instruction types.  As an example the load accumulator\par
        operation has a mnemonic for load a with a (laa), load a with  b\par
        (lab),  load  a with c (lac), load a with d (lad), load a with e\par
        (lae), load a with h (lah), and load a with l (lal).  \par
\par
\par
        AU.1  8008 REGISTER SET \par
\par
        The following is a list of the 8008 registers used by AS8008S:  \par
\par
                a               -       8-bit accumulator\par
                b,c,d,e,h,l     -       8-bit registers\par
                c,z,s,p         -       status word bits\par
\page\par
\par
        AS8008S ASSEMBLER                                      PAGE AU-2\par
        8008 REGISTER SET\par
\par
\par
        AU.2  8008 INSTRUCTION SET \par
\par
\par
           The  following  tables  list all 8008 mnemonics recognized by\par
        the AS8008S assembler.  The following list specifies the  format\par
        for each addressing mode supported by AS8008S:  \par
\par
            Instruction Mnemonic Syntax:\par
        \par
                r       register a,b,c,d,e,h,l\par
        \par
                c       status bits c,z,s,p\par
        \par
                M       memory access\par
        \par
                I       immediate access\par
        \par
            Instruction Argument Syntax:\par
        \par
                #data   immediate data\par
                        byte or word data\par
        \par
                label   call or jump label\par
        \par
                MMM     input/output port\par
\par
        The terms data, label, and MMM may all be expressions.  \par
\par
           Note  that  not  all addressing modes may be valid with every\par
        instruction.  Refer to the 8008 technical data for valid modes. \par
\page\par
\par
        AS8008S ASSEMBLER                                      PAGE AU-3\par
        8008 INSTRUCTION SET\par
\par
\par
        AU.2.1  Instruction Listing \par
\par
            Register Instructions\par
                Lrr\par
                LrM                     LMr\par
                LrI     #data           LMI     #data\par
                INr                     DCr\par
        \par
            Accumulator Group\par
                ADr                     ACr\par
                SUr                     SBr\par
                NDr                     XRr\par
                ORr                     CPr\par
        \par
                ADM                     ACM\par
                SUM                     SBM\par
                NDM                     XRM\par
                ORM                     CPM\par
        \par
                ADI     #data           ACI     #data\par
                SUI     #data           SBI     #data\par
                NDI     #data           XRI     #data\par
                ORI     #data           CPI     #data\par
        \par
            Rotate Instructions\par
                RLC                     RRC\par
                RAL                     RAR\par
        \par
            Progarm Counter and Stack Control Instructions\par
                JMP     label\par
                JFc     label           JTc     label\par
        \par
                CAL     label\par
                CFc     label           CTc     label\par
        \par
                RET\par
                RFc                     RTc\par
        \par
                RST\par
        \par
            Input/Outpu Instructions\par
                INP     MMM             OUT     MMM\par
        \par
            Machine Instruction\par
                HLT\par
        \par
            Combo Instruction\par
                SHL     #data  (load H and L with word #data)\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX AV\cf1\par
\par
                                \cf2 AS8048 ASSEMBLER\cf1\par
\par
\par
\par
\par
           AS8048  supports the 8048, 8041, 8022, and 8021 variations of\par
        the 8048 microprocessor family.  \par
\par
\par
        AV.1  .8048 DIRECTIVE \par
\par
        Format:  \par
\par
                .8048 \par
\par
        The .8048 directive enables processing of only the 8048 specific\par
        mnemonics.  8041/8022/8021 mnemonics encountered will be flagged\par
        with an <o> error.  \par
\par
\par
        AV.2  .8041 DIRECTIVE \par
\par
        Format:  \par
\par
                .8041 \par
\par
        The  .8041  directive  enables  processing  of the 8041 specific\par
        mnemonics.  8041 mnemonics encountered without the .8041  direc-\par
        tive will be flagged with an <o> error.  \par
\par
\par
\page\par
\par
        AS8048 ASSEMBLER                                       PAGE AV-2\par
        .8022 DIRECTIVE\par
\par
\par
        AV.3  .8022 DIRECTIVE \par
\par
        Format:  \par
\par
                .8022 \par
\par
        The  .8022  directive  enables  processing  of the 8022 specific\par
        mnemonics.  8022 mnemonics encountered without the .8022  direc-\par
        tive will be flagged with an <o> error.  \par
\par
\par
        AV.4  .8021 DIRECTIVE \par
\par
        Format:  \par
\par
                .8021 \par
\par
        The  .8021  directive  enables  processing  of the 8021 specific\par
        mnemonics.  8021 mnemonics encountered without the .8021  direc-\par
        tive will be flagged with an <o> error.  \par
\par
\par
        AV.5  THE .__.CPU.  VARIABLE \par
\par
\par
           The value of the pre-defined symbol '.__.CPU.' corresponds to\par
        the selected processor type.  The default value is 0 which  cor-\par
        responds  to  the  default  processor type.  The following table\par
        lists the processor types and associated values for  the  AS8048\par
        assembler:  \par
\par
                Processor Type            .__.CPU. Value\par
                --------------            --------------\par
                    .8048                        0\par
                    .8041                        1\par
                    .8022                        2\par
                    .8021                        3\par
\par
\par
           The  variable  '.__.CPU.'  is by default defined as local and\par
        will not be output to the created .rel file.  The assembler com-\par
        mand line options -g or -a will not cause the local symbol to be\par
        output to the created .rel file.  \par
\par
           The  assembler  .globl  directive  may  be used to change the\par
        variable type to global causing its definition to be  output  to\par
        the  .rel file.  The inclusion of the definition of the variable\par
        '.__.CPU.' might be a useful means of validating that seperately\par
        assembled  files have been compiled for the same processor type.\par
\page\par
\par
        AS8048 ASSEMBLER                                       PAGE AV-3\par
        THE .__.CPU.  VARIABLE\par
\par
\par
        The linker will report an error for variables with multiple  non\par
        equal definitions.  \par
\par
\par
        AV.6  8048 REGISTER SET \par
\par
        The following is a list of the 8048 registers used by AS8048:  \par
\par
                a               -       8-bit accumulator\par
                r0,r1,r2,r3     -       8-bit registers\par
                r4,r5,r6,r7\par
                bus,p1,p2       -       bus and ports\par
                p4,p5,p6,p7\par
                an0,an1         -       analog input select\par
                rb0,rb1         -       register bank select\par
                mb0,mb1         -       memory bank select\par
                c               -       carry (bit in status word)\par
                clk             -       timer\par
                cnt             -       counter\par
                dbb             -       data bus buffer\par
                f0              -       f0 bit in psw\par
                f1              -       f1 bit in psw\par
                i               -       interrupt\par
                psw             -       program status word\par
                t               -       timer register\par
                tcnt            -       timer counter\par
                tcnti           -       timer interrupt\par
\page\par
\par
        AS8048 ASSEMBLER                                       PAGE AV-4\par
        8048 REGISTER SET\par
\par
\par
        AV.7  8048 INSTRUCTION SET \par
\par
\par
           The  following  tables  list all 8048 mnemonics recognized by\par
        the AS8048 assembler.  The following list specifies  the  format\par
        for each addressing mode supported by AS8048:  \par
\par
                #data           immediate data\par
                                byte or word data\par
        \par
                r               register r0,r1\par
                rn              register r0,r1,r2,r3,r4,r5,r6, or r7\par
        \par
                @r              indirect on register r0 or r1\par
                @a              indirect on accumulator\par
        \par
                addr            direct memory address\par
                addr8           current page 8-bit jmp address\par
        \par
                #data           immediate data\par
        \par
                pn              ports p1 or p2\par
                port            ports p1,p2 or bus\par
                ep              ports p4,p5,p6, or p7\par
        \par
                bus             i/o bus\par
        \par
                s               f0 or f1 bits in psw\par
                bitaddr         bit address\par
        \par
                label           call or jump label\par
\par
        The terms data, addr, and label may all be expressions.  \par
\par
           Note  that  not all addressing modes are valid with every in-\par
        struction.  Refer to the 8048, 8041, 8022,  and  8021  technical\par
        data for valid modes.  \par
\page\par
\par
        AS8048 ASSEMBLER                                       PAGE AV-5\par
        8048 INSTRUCTION SET\par
\par
\par
        AV.7.1  Alphabetical Instruction Listing \par
\par
                                        8021    8022    8041    8048\par
                add     a,@r            x       x       x       x\par
                add     a,#data         x       x       x       x\par
                add     a,rn            x       x       x       x\par
        \par
                addc    a,@r            x       x       x       x\par
                addc    a,#data         x       x       x       x\par
                addc    a,rn            x       x       x       x\par
        \par
                anl     port,#data                      x       x\par
                anl     bus,#data                               x\par
                anl     a,@r            x       x       x       x\par
                anl     a,rn            x       x       x       x\par
        \par
                anld    ep,a            x       x       x       x\par
        \par
                call    addr            x       x       x       x\par
        \par
                clr     a               x       x       x       x\par
                clr     c               x       x       x       x\par
                clr     s                               x       x\par
        \par
                cpl     a               x       x       x       x\par
                cpl     c               x       x       x       x\par
                cpl     s                               x       x\par
        \par
                daa     a               x       x       x       x\par
        \par
                dec     rn                              x       x\par
                dec     a               x       x       x       x\par
        \par
                dis     tcnti                           x       x\par
                dis     i                               x       x\par
        \par
                djnz    rn,addr8        x       x       x       x\par
        \par
                en      tcnti                           x       x\par
                en      i                               x       x\par
        \par
                ent0    clk                                     x\par
\page\par
\par
        AS8048 ASSEMBLER                                       PAGE AV-6\par
        8048 INSTRUCTION SET\par
\par
\par
                                        8021    8022    8041    8048\par
                in      a,dbb                           x\par
                in      a,pn            x       x       x       x\par
        \par
                inc     a               x       x       x       x\par
                inc     a,@r                            x       x\par
                inc     rn              x       x       x       x\par
        \par
                ins     a,bus                                   x\par
        \par
                jmp     addr            x       x       x       x\par
        \par
                jmpp    @a              x       x       x       x\par
        \par
                jb0     addr8                           x       x\par
                jb1     addr8                           x       x\par
                jb2     addr8                           x       x\par
                jb3     addr8                           x       x\par
                jb4     addr8                           x       x\par
                jb5     addr8                           x       x\par
                jb6     addr8                           x       x\par
                jb7     addr8                           x       x\par
        \par
                jc      addr8           x       x       x       x\par
                jf0     addr8                           x       x\par
                jf1     addr8                           x       x\par
                jnc     addr8           x       x       x       x\par
                jni     addr8                                   x\par
                jnibf   addr8                           x\par
                jnt0    addr8                           x       x\par
                jnt1    addr8                           x       x\par
                jnz     addr8           x       x       x       x\par
                jobf    addr8                                   x\par
                jtf     addr8           x       x       x       x\par
                jt0     addr8                           x       x\par
                jt1     addr8           x       x       x       x\par
                jz      addr8           x       x       x       x\par
\page\par
\par
        AS8048 ASSEMBLER                                       PAGE AV-7\par
        8048 INSTRUCTION SET\par
\par
\par
                                        8021    8022    8041    8048\par
                mov     a,#data         x       x       x       x\par
                mov     a,psw                           x       x\par
                mov     a,@r            x       x       x       x\par
                mov     a,rn            x       x       x       x\par
                mov     a,t             x       x       x       x\par
                mov     psw,a                           x       x\par
                mov     rn,a            x       x       x       x\par
                mov     @r,a            x       x       x       x\par
                mov     rn,#data        x       x       x       x\par
                mov     @r,#data        x       x       x       x\par
                mov     t,a             x       x       x       x\par
        \par
                movd    a,ep            x       x       x       x\par
                movd    ep,a            x               x       x\par
        \par
                movp    a,@a            x       x       x       x\par
        \par
                movp3   a,@a                            x       x\par
        \par
                movx    a,@r                                    x\par
                movx    @r,a                                    x\par
        \par
                nop                     x               x       x\par
        \par
                orl     a,#data         x       x       x       x\par
                orl     a,rn            x       x       x       x\par
                orl     a,@r            x       x       x       x\par
                orl     bus,#data                               x\par
                orl     port,#data                      x       x\par
        \par
                orld    ep,a            x       x       x       x\par
        \par
                out     dbb,a                           x\par
        \par
                outl    bus,a                   x\par
                outl    port,a          x       x       x       x\par
        \par
                rad     a                       x\par
        \par
                ret                     x       x       x       x\par
        \par
                retr                                    x       x\par
\page\par
\par
        AS8048 ASSEMBLER                                       PAGE AV-8\par
        8048 INSTRUCTION SET\par
\par
\par
                                        8021    8022    8041    8048\par
                rl      a               x       x       x       x\par
        \par
                rlc     a               x       x       x       x\par
        \par
                rr      a               x       x       x       x\par
        \par
                rrc     a               x       x       x       x\par
        \par
                sel     an0                     x\par
                sel     an1                     x\par
                sel     mb0                                     x\par
                sel     mb1                                     x\par
                sel     rb0                                     x\par
                sel     rb1                                     x\par
        \par
                swap    a               x       x       x       x\par
        \par
                stop    tcnt            x       x       x       x\par
                strt    cnt             x       x       x       x\par
                strt    t               x       x       x       x\par
        \par
                xch     a,@r            x       x       x       x\par
        \par
                xchd    a,@r            x       x       x       x\par
        \par
                xrl     a,@r            x       x       x       x\par
        \par
        \par
                xrl     a,#data         x       x       x       x\par
        \par
                xch     a,rn            x       x       x       x\par
        \par
                xrl     a,rn            x       x       x       x\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX AW\cf1\par
\par
                                \cf2 AS8051 ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        AW.1  ACKNOWLEDGMENT \par
\par
\par
           Thanks  to  John  Hartman  for his contribution of the AS8051\par
        cross assembler.  \par
\par
                John L. Hartman\par
                jhartman at compuserve dot com\par
                noice at noicedebugger dot com\par
\par
\par
        AW.2  8051 REGISTER SET \par
\par
        The following is a list of the 8051 registers used by AS8051:  \par
\par
                a,b             -       8-bit accumulators\par
                r0,r1,r2,r3     -       8-bit registers\par
                r4,r5,r6,r7\par
                dptr            -       data pointer\par
                sp              -       stack pointer\par
                pc              -       program counter\par
                psw             -       status word\par
                c               -       carry (bit in status word)\par
\page\par
\par
        AS8051 ASSEMBLER                                       PAGE AW-2\par
        8051 REGISTER SET\par
\par
\par
        AW.3  8051 INSTRUCTION SET \par
\par
\par
           The  following  tables  list all 8051 mnemonics recognized by\par
        the AS8051 assembler.  The following list specifies  the  format\par
        for each addressing mode supported by AS8051:  \par
\par
                #data           immediate data\par
                                byte or word data\par
        \par
                r,r1,r2         register r0,r1,r2,r3,r4,r5,r6, or r7\par
        \par
                @r              indirect on register r0 or r1\par
                @dptr           indirect on data pointer\par
                @a+dptr         indirect on accumulator\par
                                plus data pointer\par
                @a+pc           indirect on accumulator\par
                                plus program counter\par
        \par
                addr            direct memory address\par
        \par
                bitaddr         bit address\par
        \par
                label           call or jump label\par
\par
        The terms data, addr, bitaddr, and label may all be expressions. \par
\par
           Note  that  not all addressing modes are valid with every in-\par
        struction.  Refer to the 8051 technical data for valid modes.  \par
\par
\par
        AW.3.1  Inherent Instructions \par
\par
                nop\par
\page\par
\par
        AS8051 ASSEMBLER                                       PAGE AW-3\par
        8051 INSTRUCTION SET\par
\par
\par
        AW.3.2  Move Instructions \par
\par
                mov     a,#data         mov     a,addr\par
                mov     a,r             mov     a,@r\par
        \par
                mov     r,#data         mov     r,addr\par
                mov     r,a\par
        \par
                mov     addr,a          mov     addr,#data\par
                mov     addr,r          mov     addr,@r\par
                mov     addr1,addr2     mov     bitaddr,c\par
        \par
                mov     @r,#data        mov     @r,addr\par
                mov     @r,a\par
        \par
                mov     c,bitaddr\par
                mov     dptr,#data\par
        \par
                movc    a,@a+dptr       movc    a,@a+pc\par
                movx    a,@dptr         movx    a,@r\par
                movx    @dptr,a         movx    @r,a\par
\par
\par
        AW.3.3  Single Operand Instructions \par
\par
                clr     a               clr     c\par
                clr     bitaddr\par
                cpl     a               cpl     c\par
                cpl     bitaddr\par
                setb    c               setb    bitaddr\par
        \par
                da      a               \par
                rr      a               rrc     a\par
                rl      a               rlc     a\par
                swap    a\par
        \par
                dec     a               dec     r\par
                dec     @r\par
                inc     a               inc     r\par
                inc     dptr            inc     @r\par
        \par
                div     ab              mul     ab\par
        \par
                pop     addr            push    addr\par
\page\par
\par
        AS8051 ASSEMBLER                                       PAGE AW-4\par
        8051 INSTRUCTION SET\par
\par
\par
        AW.3.4  Two Operand Instructions \par
\par
                add     a,#data         add     a,addr\par
                add     a,r             add     a,@r\par
                addc    a,#data         addc    a,addr\par
                addc    a,r             addc    a,@r\par
                subb    a,#data         subb    a,addr\par
                subb    a,r             subb    a,@r\par
                orl     a,#data         orl     a,addr\par
                orl     a,r             orl     a,@r\par
                orl     addr,a          orl     addr,#data\par
                orl     c,bitaddr       orl     c,/bitaddr\par
                anl     a,#data         anl     a,addr\par
                anl     a,r             anl     a,@r\par
                anl     addr,a          anl     addr,#data\par
                anl     c,bitaddr       anl     c,/bitaddr\par
                xrl     a,#data         xrl     a,addr\par
                xrl     a,r             xrl     a,@r\par
                xrl     addr,a          xrl     addr,#data\par
                xrl     c,bitaddr       xrl     c,/bitaddr\par
                xch     a,addr          xch     a,r\par
                xch     a,@r            xchd    a,@r\par
\par
\par
        AW.3.5  Call and Return Instructions \par
\par
                acall   label           lcall   label\par
                ret                     reti\par
                in      data\par
                out     data\par
                rst     data\par
\par
\par
        AW.3.6  Jump Instructions \par
\par
                ajmp    label\par
                cjne    a,#data,label   cjne    a,addr,label\par
                cjne    r,#data,label   cjne    @r,#data,label\par
                djnz    r,label         djnz    addr,label\par
                jbc     bitadr,label\par
                jb      bitadr,label    jnb     bitadr,label\par
                jc      label           jnc     label\par
                jz      label           jnz     label\par
                jmp     @a+dptr\par
                ljmp    label           sjmp    label\par
\page\par
\par
        AS8051 ASSEMBLER                                       PAGE AW-5\par
        8051 INSTRUCTION SET\par
\par
\par
        AW.3.7  Predefined Symbols:  SFR Map \par
\par
                        --------- 4 Bytes ----------\par
                        ----    ----    ----    ----\par
                FC                                          FF\par
                F8                                          FB\par
                F4                                          F7\par
                F0      B                                   F3\par
                EC                                          EF\par
                E8                                          EB\par
                E4                                          E7\par
                E0      ACC                                 E3\par
                DC                                          DF\par
                D8                                          DB\par
                D4                                          D7\par
                D0      PSW                                 D3\par
                CC   [  TL2     TH2                     ]   CF\par
                C8   [  T2CON           RCAP2L  RCAP2H  ]   CB\par
                C4                                          C7\par
                C0                                          C3\par
                BC                                          BF\par
                B8      IP                                  BB\par
                B4                                          B7\par
                B0      P3                                  B3\par
                AC                                          AF\par
                A8      IE                                  AB\par
                A4                                          A7\par
                A0      P2                                  A3\par
                9C                                          9F\par
                98      SCON    SBUF                        9B\par
                94                                          97\par
                90      P1                                  93\par
                8C      TH0     TH1                         8F\par
                88      TCON    TMOD    TL0     TL1         8B\par
                84                              PCON        87\par
                80      P0      SP      DPL     DPH         83\par
        \par
                [...] Indicates Resident in 8052, not 8051\par
                A is an allowed alternate for ACC.\par
\page\par
\par
        AS8051 ASSEMBLER                                       PAGE AW-6\par
        8051 INSTRUCTION SET\par
\par
\par
        AW.3.8  Predefined Symbols:  SFR Bit Addresses \par
\par
                        ---------- 4 BITS ----------\par
                        ----    ----    ----    ----\par
                FC                                          FF\par
                F8                                          FB\par
                F4      B.4     B.5     B.6     B.7         F7\par
                F0      B.0     B.1     B.2     B.3         F3\par
                EC                                          EF\par
                E8                                          EB\par
                E4      ACC.4   ACC.5   ACC.6   ACC.7       E7\par
                E0      ACC.0   ACC.1   ACC.2   ACC.3       E3\par
                DC                                          DF\par
                D8                                          DB\par
                D4      PSW.4   PSW.5   PSW.6   PSW.7       D7\par
                D0      PSW.0   PSW.1   PSW.2   PSW.3       D3\par
                CC   [  T2CON.4 T2CON.5 T2CON.6 T2CON.7 ]   CF\par
                C8   [  T2CON.0 T2CON.1 T2CON.2 T2CON.3 ]   CB\par
                C4                                          C7\par
                C0                                          C3\par
                BC      IP.4    IP.5    IP.6    IP.7        BF\par
                B8      IP.0    IP.1    IP.2    IP.3        BB\par
                B4      P3.4    P3.5    P3.6    P3.7        B7\par
                B0      P3.0    P3.1    P3.2    P3.3        B3\par
                AC      IE.4    IE.5    EI.6    IE.7        AF\par
                A8      IE.0    IE.1    IE.2    IE.3        AB\par
                A4      P2.4    P2.5    P2.6    P2.7        A7\par
                A0      P2.0    P2.1    P2.2    P2.3        A3\par
                9C      SCON.4  SCON.5  SCON.6  SCON.7      9F\par
                98      SCON.0  SCON.1  SCON.2  SCON.3      9B\par
                94      P1.4    P1.5    P1.6    P1.7        97\par
                90      P1.0    P1.1    P1.2    P1.3        93\par
                8C      TCON.4  TCON.5  TCON.6  TCON.7      8F\par
                88      TCON.0  TCON.1  TCON.2  TCON.3      8B\par
                84      P0.4    P0.5    P0.6    P0.7        87\par
                80      P0.0    P0.1    P0.2    P0.3        83\par
        \par
                [...] Indicates Resident in 8052, not 8051\par
                A is an allowed alternate for ACC.\par
\page\par
\par
        AS8051 ASSEMBLER                                       PAGE AW-7\par
        8051 INSTRUCTION SET\par
\par
\par
        AW.3.9  Predefined Symbols:  Control Bits \par
\par
                        ---------- 4 BITS ----------\par
                        ----    ----    ----    ----\par
                FC                                          FF\par
                F8                                          FB\par
                F4                                          F7\par
                F0                                          F3\par
                EC                                          EF\par
                E8                                          EB\par
                E4                                          E7\par
                E0                                          E3\par
                DC                                          DF\par
                D8                                          DB\par
                D4      RS1     F0      AC      CY          D7\par
                D0      P               OV      RS0         D3\par
                CC   [  TLCK    RCLK    EXF2    TF2     ]   CF\par
                C8   [  CPRL2   CT2     TR2     EXEN2   ]   CB\par
                C4                                          C7\par
                C0                                          C3\par
                BC      PS      PT2                         BF\par
                B8      PX0     PT0     PX1     PT1         BB\par
                B4                                          B7\par
                B0      RXD     TXD     INT0    INT1        B3\par
                AC      ES      ET2             EA          AF\par
                A8      EX0     ET0     EX1     ET1         AB\par
                A4                                          A7\par
                A0                                          A3\par
                9C      REN     SM2     SM1     SM0         9F\par
                98      RI      TI      RB8     TB8         9B\par
                94                                          97\par
                90                                          93\par
                8C      TR0     TF0     TR1     TF1         8F\par
                88      IT0     IE0     IT1     IE1         8B\par
                84                                          87\par
                80                                          83\par
        \par
                [...] Indicates Resident in 8052, not 8051\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX AX\cf1\par
\par
                                \cf2 AS8085 ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        AX.1  8085 REGISTER SET \par
\par
        The  following  is  a  list  of  the 8080/8085 registers used by\par
        AS8085:  \par
\par
                a,b,c,d,e,h,l   -       8-bit accumulators\par
                m               -       memory through (hl)\par
                sp              -       stack pointer\par
                psw             -       status word\par
\par
\par
        AX.2  8085 INSTRUCTION SET \par
\par
\par
           The  following tables list all 8080/8085 mnemonics recognized\par
        by the AS8085  assembler.   The  following  list  specifies  the\par
        format for each addressing mode supported by AS8085:  \par
\par
                #data           immediate data\par
                                byte or word data\par
        \par
                r,r1,r2         register or register pair\par
                                psw,a,b,c,d,e,h,l\par
                                bc,de,hl,sp,pc\par
        \par
                m               memory address using (hl)\par
        \par
                addr            direct memory addressing\par
        \par
                label           call or jump label\par
\par
        The terms data, m, addr, and label may be expressions.  \par
\par
\page\par
\par
        AS8085 ASSEMBLER                                       PAGE AX-2\par
        8085 INSTRUCTION SET\par
\par
\par
           Note  that  not all addressing modes are valid with every in-\par
        struction, refer to  the  8080/8085  technical  data  for  valid\par
        modes.  \par
\par
\par
        AX.2.1  Inherent Instructions \par
\par
                cma             cmc\par
                daa             di\par
                ei              hlt\par
                nop             pchl\par
                ral             rar\par
                ret             rim\par
                rrc             rlc\par
                sim             sphl\par
                stc             xchg\par
                xthl\par
\par
\par
        AX.2.2  Register/Memory/Immediate Instructions \par
\par
                adc     r       adc     m       aci     #data\par
                add     r       add     m       adi     #data\par
                ana     r       ana     m       ani     #data\par
                cmp     r       cmp     m       cpi     #data\par
                ora     r       ora     m       ori     #data\par
                sbb     r       sbb     m       sbi     #data\par
                sub     r       sub     m       sui     #data\par
                xra     r       xra     m       xri     #data\par
\par
\par
        AX.2.3  Call and Return Instructions \par
\par
                cc      label           rc\par
                cm      label           rm\par
                cnc     label           rnc\par
                cnz     label           rnz\par
                cp      label           rp\par
                cpe     label           rpe\par
                cpo     label           rpo\par
                cz      label           rz\par
                call    label\par
\page\par
\par
        AS8085 ASSEMBLER                                       PAGE AX-3\par
        8085 INSTRUCTION SET\par
\par
\par
        AX.2.4  Jump Instructions \par
\par
                jc      label\par
                jm      label\par
                jnc     label\par
                jnz     label\par
                jp      label\par
                jpe     label\par
                jpo     label\par
                jz      label\par
                jmp     label\par
\par
\par
        AX.2.5  Input/Output/Reset Instructions \par
\par
                in      data\par
                out     data\par
                rst     data\par
\par
\par
        AX.2.6  Move Instructions \par
\par
                mov     r1,r2\par
                mov     r,m\par
                mov     m,r\par
        \par
                mvi     r,#data\par
                mvi     m,#data\par
\par
\par
        AX.2.7  Other Instructions \par
\par
                dcr     r               dcr     m\par
                inr     r               inr     m\par
        \par
                dad     r               dcx     r\par
                inx     r               ldax    r\par
                pop     r               push    r\par
                stax    r\par
        \par
                lda     addr            lhld    addr\par
                shld    addr            sta     addr\par
        \par
                lxi     r,#data\par
\page\par
\par
        AS8085 ASSEMBLER                                       PAGE AX-4\par
        8085 INSTRUCTION SET\par
\par
\par
        AX.2.8  Unspecified Instructions \par
\par
                arhl\par
                dsub\par
        \par
                jnx5    addr\par
                jx5     addr\par
        \par
                ldhi    #data\par
                ldsi    #data\par
        \par
                lhlx\par
                rdel\par
                rstv\par
                shlx\par
\page\par
\par
        AS8085 ASSEMBLER                                       PAGE AX-5\par
        8085 INSTRUCTION SET\par
\par
\par
        AX.3  UNSPECIFIED OPCODE ARTICLE \par
\par
        Engineer's Notebook,\par
        "Electronics" magazine, 1980\par
        \par
        ----------------------------\par
        \par
        Unspecified 8085 Op Codes Enhance Programming\par
        \par
        by Wolfgang Dehnhardt and Villy M. Sorenson\par
        GSI, Dermstat, and Sorenson Software,\par
        Seeheim, West Germany\par
        \par
        ----------------------------\par
        \par
\par
\par
           Ten  operating  codes and two flag bits previously unknown to\par
        most users of the 8085 microprocessor will enable programmers to\par
        write  more efficient routines.  The new members of the instruc-\par
        tion set, which were stumbled upon  during  the  testing  of  an\par
        assembler-disassembler  module,  include  seven opcodes that in-\par
        volve the processing of register pairs, two  that  involve  jump\par
        operations  with  one  new  flag, and one that performs a condi-\par
        tional restart on the overflow indication of the other flag bit. \par
\par
\par
           The   seven  register  pair  instructions  (all  with  16-bit\par
        operands) consist of a double subtraction, a  rotate,  a  shift,\par
        indirect  loading  and  storing of a word, and two offset opera-\par
        tions.  Either BC, DE, HL, or SP  are  the  designated  register\par
        pairs used in these opcodes.  \par
\par
\par
           The  mnemonic names of the instructions have been selected to\par
        be compatible with the 8085's existing mnemonics.  In the double\par
        subtraction  (DSUB),  register  pair  BC  is subtracted from HL.\par
        This instruction thus performs the opposite task  of  DAD  B,  a\par
        well-known  instruction.   The instruction RDEL rotates register\par
        pair DE left 1 bit through the carry.   ARHL  is  an  arithmetic\par
        shift  to  the right of HL.  It serves to divide HL by 2, except\par
        in cases where HL is -1.  \par
\par
\par
           All  16  bits of register pair HL can be stored indirectly at\par
        the address contained in the DE pair by  specifying  instruction\par
        SHLX.  To load HL, LHLX must be employed.  \par
\par
\page\par
\par
        AS8085 ASSEMBLER                                       PAGE AX-6\par
        UNSPECIFIED OPCODE ARTICLE\par
\par
\par
           As  an example of how this instruction can be used to cut in-\par
        struction steps, consider the common sequence used for a routine\par
        table  jump  shown  in part (a) of the figure.  By assigning the\par
        register DE for HL and using the LHLX instruction, this sequence\par
        can  be  replaced  by  the much simpler arrangement shown at the\par
        bottom of part (a).  \par
\par
\par
           As  for  adding  the contents of register pairs with an addi-\par
        tional byte (offset), DE can be loaded with HL plus the byte  by\par
        selecting  the instruction LDHI, which simplifies array address-\par
        ing.  Usually, the architecture of the 8080-type systems dictate\par
        addressing  of  arrays  in  what  are called pages of 256 bytes.\par
        This restriction means that the starting  address  of  an  array\par
        must  be placed near the beginning of a page.  A typical call is\par
        shown in part (b) of the figure.  \par
\par
\par
           The  page  limitation  is by passed using th LDHI instruction\par
        code and constant indexes.  The starting address  of  the  array\par
        can  now  be  placed anywhere, and addressing occurs as shown at\par
        the bottom of part (b).  \par
\par
\par
           An  additional  byte can be combined with register pair SP in\par
        DE if  instruction  LDSI  is  specified.   This  instruction  is\par
        designed  for  operating system routines that transfer arguments\par
        on the stack.  An example sequence, shown in (c), stores HL into\par
        a  16-bit  word  located as the second item below the top of the\par
        stack.  \par
\par
\par
           The  jump  and  restart instructions work in conjunction with\par
        the two discoverd flag bits, X5 and V.  Op codes  JX5  and  JNX5\par
        jump depending on the state of th X5 flag.  Op code RSTV makes a\par
        restart call to hexidecimal address 40 if the  V  flag  is  set;\par
        otherwise it functions as a no-operation instruction.  \par
\par
\par
           Flag  bit V indicates a 2's complement overflow condition for\par
        8- and 16-bit arithmetic operations.  Flag bit X5 has been named\par
        for  its  position  in  the  condition code byte and not for its\par
        function.  It does not resemble any normal flag bit.   The  only\par
        use  for this bit found thus far are as an unsigned overflow in-\par
        dicator resulting from a data change of FFFF to 0000 on  execut-\par
        ing DCX.  \par
\page\par
\par
        AS8085 ASSEMBLER                                       PAGE AX-7\par
        UNSPECIFIED OPCODE ARTICLE\par
\par
\par
           The new 8085 instructions are outlined in the table.  \par
        \par
            ------------------------------------------------------|\par
            |  part (a)                                           |\par
            | |-------------------------------------------------| |\par
            | | Sourec Statement |           Comment            | |\par
            | |-------------------------------------------------| |\par
            | |    MOV   E,M     |  ;Routine ADR Low Byte       | |\par
            | |    INX   H       |  ;HL = Table ADR             | |\par
            | |    MOV   D,M     |  ;Routine ADR High Byte      | |\par
            | |    XCHG          |  ;DE = Routine ADR           | |\par
            | |    PCHL          |  ;Go to Routine ADR          | |\par
            | |----                                         ----| |\par
            |                       ||                            |\par
            |                       \\/                            |\par
            | |----                                         ----| |\par
            | |    LHLX          |  ;DE = Table ADR             | |\par
            | |    PCHL          |  ;HL = Routine ADR           | |\par
            | |-------------------------------------------------| |\par
            |  part (b)                                           |\par
            | |-------------------------------------------------| |\par
            | | Sourec Statement |           Comment            | |\par
            | |-------------------------------------------------| |\par
            | |    LXI   H,ARRAY |  ;ARRAY Base ADR             | |\par
            | |    MVI   L,INDEX |  ;8-Bit INDEX, HL=ARRAY ADR  | |\par
            | |----                                         ----| |\par
            |                       ||                            |\par
            |                       \\/                            |\par
            | |----                                         ----| |\par
            | |    LXI   H,ARRAY |  ;ARRAY Base ADR             | |\par
            | |    LDHI  L,INDEX |  ;8-Bit INDEX, HL=ARRAY ADR  | |\par
            | |-------------------------------------------------| |\par
            |  part (c)                                           |\par
            | |-------------------------------------------------| |\par
            | | Sourec Statement |           Comment            | |\par
            | |-------------------------------------------------| |\par
            | |    LDSI  2       |  ;DE = SP + 2                | |\par
            | |    SHLX          |  ;Replace 2, Item on Stack   | |\par
            | |-------------------------------------------------| |\par
            |                                                     |\par
            | Options.   Newly discovered operating codes for     |\par
            | 8085 shown in table enables the writing of more     |\par
            | efficient programs. Program for table jump (a, top) |\par
            | can be reduced significantly when new instructions  |\par
            | (a, bottom) are implemented. Array routine (b, top) |\par
            | can be rewritten (b, Bottom) so that arrays can be  |\par
            | addressed across page boundaries.  Data words can   |\par
            | be entered at any point in a stack register (c).    |\par
            ------------------------------------------------------|\par
\page\par
\par
        AS8085 ASSEMBLER                                       PAGE AX-8\par
        UNSPECIFIED OPCODE ARTICLE\par
\par
\par
        Table:\par
        \par
            -----------------------------------\par
            |    Condition  Code  Format      |\par
            -----------------------------------\par
            |  S   Z  X5  AC   O   P   V  CY  |\par
            -----------------------------------\par
        \par
            New Condition Codes:\par
        \par
            V  = Bit 1     2's complement overflow\par
            X5 = bit 5     Underflow (DCX) or Overflow (INX)\par
                           X5 = O1*O2 + O1*R + O2*R, where\par
                           * == AND, + == OR\par
                           O1 = sign of operand 1\par
                           O2 = sign of operand 2\par
                           R  = sign of result.\par
                           For subtraction and comparisons\par
                           replace O2 with ~O2.\par
        \par
        \par
        \par
          DSUB   (double subtraction)\par
        \par
            (H)(L)=(H)(L)-(B)(C)\par
            The contents of register pair B and C are subtracted\par
            from the contents of register pair H and L. The\par
            result is placed in register pair H and L. All\par
            condition flags are affected.\par
        \par
              ---------------------\par
              [  0 0 0 0 1 0 0 0  ]                (08)\par
              ---------------------\par
        \par
              cycles:          3\par
              states:         10\par
              addressing:     register\par
              flags:          Z,S,P,CY,AC,X5,V\par
\page\par
\par
        AS8085 ASSEMBLER                                       PAGE AX-9\par
        UNSPECIFIED OPCODE ARTICLE\par
\par
\par
        \par
          ARHL    (arithmetic shift of H and L to the right)\par
        \par
            (H7=H7);(Hn-1)=(Hn)\par
            (L7=H0);(Ln-1)=(Ln);(CY)=(L0)\par
            The contents of register pair H and L are shifted\par
            right one bit. The uppermost bit is duplicated and\par
            the lowest bit is shifted into the carry bit.\par
            The result is placed in register pair H and L.\par
            Note: only the CY flag is affected.\par
        \par
              ---------------------\par
              [  0 0 0 1 0 0 0 0  ]                (10)\par
              ---------------------\par
        \par
              cycles:         3\par
              states:         7\par
              addressing:     register\par
              flags:          CY\par
        \par
        \par
        \par
          RDEL    (rotate D and E left through carry)\par
        \par
            (Dn+1)=(Dn);(D0)=(E7)\par
            (CY)=(D7);(En+1)=(En);(E0)=(CY)\par
            The contents of register pair D and E are rotated\par
            left one position through the carry flag. The low\par
            order bit is set equal to the CY flag and the CY\par
            flag is set to the value shifted out of the\par
            high-order bit. Only the CY and V flags are\par
            affected.\par
        \par
               ---------------------\par
               [  0 0 0 1 1 0 0 0  ]                (18)\par
               ---------------------\par
        \par
              cycles:           3\par
              states:          10\par
              addressing:      register\par
              flags:           CY, V\par
\page\par
\par
        AS8085 ASSEMBLER                                      PAGE AX-10\par
        UNSPECIFIED OPCODE ARTICLE\par
\par
\par
        \par
          LDHI    (load D and E with H and L plus immediate byte)\par
        \par
            (D)(E)=((H)(L)+(byte 2)\par
            The contents of register pair H and L are added to\par
            the immediate byte. The result is placed in\par
            register pair D and E.\par
            Note: no condition flags are affected.\par
        \par
               ---------------------\par
               [  0 0 1 0 1 0 0 0  ]                (28)\par
               ---------------------\par
               [       data        ]\par
               ---------------------\par
        \par
              cycles:           3\par
              states:          10\par
              addressing:      immediate register\par
              flags:           none\par
        \par
        \par
        \par
          LDSI    (load D and E with SP plus immediate bytey)\par
        \par
            (D)(E);(D0)=(E7)\par
            (CY)=(D7);(SPH)(SPL)+(byte 2)\par
            The contents of register pair H and L are added to\par
            the immediate byte. The result is placed in\par
            register pair D and E.\par
            Note: no condition flags are affected.\par
        \par
               ---------------------\par
               [  0 0 1 1 1 0 0 0  ]                (38)\par
               ---------------------\par
               [       data        ]\par
               ---------------------\par
        \par
              cycles:           3\par
              states:          10\par
              addressing:      immediate register\par
              flags:           none\par
\page\par
\par
        AS8085 ASSEMBLER                                      PAGE AX-11\par
        UNSPECIFIED OPCODE ARTICLE\par
\par
\par
        \par
          RSTV    (restart on overflow)\par
        \par
            if (V):\par
               ((SP)-1))=(PCH)\par
               ((SP)-2))=(PCL)\par
               (SP)=(SP)-2\par
               (PC)=40 hex\par
            If the overflow flag V is set, the actions\par
            specified above are performed; otherwise\par
            control continues sequentially.\par
        \par
               ---------------------\par
               [  1 1 0 0 1 0 1 1  ]                (CB)\par
               ---------------------\par
        \par
              cycles:          1 or 3\par
              states:          6 or 12\par
              addressing:      register indirect\par
              flags:           none\par
        \par
        \par
        \par
          SHLX    (store H and L indirect through D and E)\par
        \par
            ((D)(E))=(L)\par
            ((D)(E)+1)=(H)\par
            The contents of register L are moved to the\par
            memory-location whose address is in register pair\par
            D and E. The contents of register H are moved to\par
            the succeeding memory location.\par
        \par
               ---------------------\par
               [  1 1 0 1 1 0 0 1  ]                (D9)\par
               ---------------------\par
        \par
              cycles:           3\par
              states:          10\par
              addressing:      register indirect\par
              flags:           none\par
\page\par
\par
        AS8085 ASSEMBLER                                      PAGE AX-12\par
        UNSPECIFIED OPCODE ARTICLE\par
\par
\par
        \par
          JNX5    (jump on not X5)\par
        \par
            if (not X5)\par
               (PC)=(byte 3)(byte 2)\par
        \par
            If the X5 flag is reset, control is transferred to\par
            the instruction whose address is specified in byte\par
            3 and byte 2 of the current instruction; otherwise\par
            control continues sequentially.\par
        \par
               ---------------------\par
               [  1 1 0 1 1 1 0 1  ]                (DD)\par
               ---------------------\par
               [  lo-order address ]\par
               ---------------------\par
               [  hi-order address ]\par
               ---------------------\par
        \par
              cycles:          2 or 3\par
              states:          7 or 10\par
              addressing:      immediate\par
              flags:           none\par
        \par
        \par
        \par
          LHLX    (load H and L indirect through D and E))\par
        \par
            (L)=((D)(E))\par
            (H)=((D)(E)+1)\par
            The content of the memory location whose address\par
            is in D and E, are moved to register L. The\par
            contents of the succeeding memory location are\par
            moved to register H.\par
        \par
               ---------------------\par
               [  1 1 1 0 1 1 0 1  ]                (ED)\par
               ---------------------\par
        \par
              cycles:           3\par
              states:          10\par
              addressing:      register indirect\par
              flags:           none\par
\page\par
\par
        AS8085 ASSEMBLER                                      PAGE AX-13\par
        UNSPECIFIED OPCODE ARTICLE\par
\par
\par
        \par
          JX5     (jump on X5)\par
        \par
            if (X5)\par
               (PC)=(byte 3)(byte 2)\par
        \par
            If the X5 flag is set, control is transferred to\par
            the instruction whose address is specified in byte\par
            3 and byte 2 of the current instruction; otherwise\par
            control continues sequentially.\par
        \par
               ---------------------\par
               [  1 1 1 1 1 1 0 1  ]                (FD)\par
               ---------------------\par
               [  lo-order address ]\par
               ---------------------\par
               [  hi-order address ]\par
               ---------------------\par
        \par
              cycles:          2 or 3\par
              states:          7 or 10\par
              addressing:      immediate\par
              flags:           none\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX AY\cf1\par
\par
                                \cf2 AS8X300 ASSEMBLER\cf1\par
\par
\par
\par
\par
           The  AS8X300 assembler supports the 8X300 and 8X305 microcon-\par
        trollers with the basic  syntax  of  the  MCCAP  Microcontroller\par
        Cross  Assembler  Program.   The  8x300 microcontroller has just\par
        eight basic instructions, MOVE, ADD, AND, XOR, XMIT,  NZT,  XEC,\par
        and  JMP.  The 8x305 has two addition instruction mnemonics, XML\par
        and XMR.  Three additional mnemonics are common to the 8X300 and\par
        8X305,  HALT, NOP, and SEL.  These five instructions are derived\par
        from the basic instructions.  \par
\par
           The  CALL and RTN functionalities are provided by macros con-\par
        tained in the s8xmcros.asm macro library.  These  functions  and\par
        others  in  the  library will be discussed in the following sec-\par
        tions.  \par
\par
\par
        AY.1  PROCESSOR SPECIFIC DIRECTIVES \par
\par
\par
\par
        AY.1.1  .8x300 Directive \par
\par
        Format:  \par
\par
                .8x300 \par
\par
        The  default microcontroller selection is the 8x300.  The .8x300\par
        directive explicitly selects  coding  for  the  8x300  microcon-\par
        troller.  \par
\page\par
\par
        AS8X300 ASSEMBLER                                      PAGE AY-2\par
        PROCESSOR SPECIFIC DIRECTIVES\par
\par
\par
        AY.1.2  .8x305 Directive \par
\par
        Format:  \par
\par
                .8x305 \par
\par
        The  default microcontroller selection is the 8x300.  The .8x305\par
        directive explicitly selects  coding  for  the  8x305  microcon-\par
        troller.  \par
\par
\par
        AY.1.3  .liv Directive \par
\par
        Format:  \par
\par
                .liv    sym     byte,bit,length \par
\par
        The .liv declaration assigns a symbolic name to a left bank data\par
        field and defines the address (byte), position (bit), and preci-\par
        sion (length) of that variable.  \par
\par
\par
        AY.1.4  .riv Directive \par
\par
        Format:  \par
\par
                .riv    sym     byte,bit,length \par
\par
        The  .riv  declaration  assigns  a symbolic name to a right bank\par
        data field and defines the address (byte), position  (bit),  and\par
        precision (length) of that variable.  \par
\par
\par
        AY.1.5  .fdef Directive \par
\par
        Format:  \par
\par
                .fdef   n(v),n(v),...  \par
\par
        The  .fdef  directive  is  used  to  specify  operand fields and\par
        default values for instruction extensions.   The  fields  define\par
        output  bit positions from MSB to LSB.  The directive may define\par
        up to 16 fields with a total length of 16 bits.  The  length  in\par
        bits  (n)  of each field is specified along with the an optional\par
        default field value (v) and an error checking flag (- preceeding\par
        n inhibits error checking).  \par
\page\par
\par
        AS8X300 ASSEMBLER                                      PAGE AY-3\par
        PROCESSOR SPECIFIC DIRECTIVES\par
\par
\par
        AY.1.6  .xtnd Directive \par
\par
        Format:  \par
\par
                .xtnd   [area] \par
\par
        The option to output instruction extension code requires the de-\par
        finition of an extension field by .fdef and  the  invocation  of\par
        .xtnd with a defined area.  The generated extension code will be\par
        placed in the extended code area with the same  address  as  the\par
        assembled  instruction.  Invoking the .xtnd directive without an\par
        area will disable the extension code output.  \par
\par
\par
        AY.1.7  .xerr Directive \par
\par
        Format:  \par
\par
                .xerr [n] \par
\par
\par
           The expanded error directive outputs alternate error messages\par
        for the <a> error at the commmand line and in the listing  files\par
        created by the assembler.  The modes are:  \par
\par
               .xerr [0]\par
        \par
                   Restores the default <a> error reporting.\par
        \par
               .xerr 1\par
        \par
                   Replaces the <a> error with the <x> error which\par
                   lists the source line containing the error on\par
                   the stdout device.\par
        \par
               .xerr 2\par
        \par
                   Replaces the <a> error with the <x> error which\par
                   lists the source line containing the error on\par
                   the stdout device and also outputs an additional\par
                   <x> error describing the detected error.\par
        \par
               .xerr 3\par
        \par
                   Replaces the <a> error with the <x> error which\par
                   lists the source line containing the error on\par
                   the stdout device and also outputs an additional\par
                   <x> error describing the detected error.  The\par
                   additional <x> error describing the detected\par
\page\par
\par
        AS8X300 ASSEMBLER                                      PAGE AY-4\par
        PROCESSOR SPECIFIC DIRECTIVES\par
\par
\par
                   error is inserted into the optional listing file.\par
\par
\par
\par
        AY.2  THE 8X300/8X305 MACRO LIBRARY \par
\par
\par
           The  macro  library,  s8xmcros.asm,  contains macros defining\par
        functionality not implemented directly into the assembler.  \par
\par
           The macros are:  \par
\par
                ORG     space, pgsize  ^/[...]/\par
        \par
                PROC    sub\par
                ENTRY   sub\par
        \par
                CALL    sub     ^/[...]/\par
                RTN     ^/[...]/\par
        \par
                CALL_TABLE      area_c, area_x  ^/[...]/\par
\par
        Where  the ^/[...]/ syntax passes the string "[...]" as an argu-\par
        ment of the macro.  \par
\par
\par
        AY.2.1  ORG \par
\par
        Format:  \par
\par
                ORG     space, pgsize   ^/[...]/ \par
\par
        The  ORG  macro changes the value of the location counter either\par
        conditionally or unconditionally.  The first  form  of  the  ORG\par
        macro:  \par
\par
                ORG     address\par
\par
        unconditionally changes the value of the location counter to the\par
        value indicated by "address" which is any  constant,  symbol  or\par
        expression which evaluates to a value between 1 and 8191.  \par
\par
           The second form of the ORG macro conditionally sets the loca-\par
        tion counter to the next page or segment boundary if  there  are\par
        insufficient locations (space) in the current page (pgsize = 32)\par
        or segment (pgsize = 256).  If there is insufficient space  then\par
        a jump instruction is inserted pointing to the next page/segment\par
        boundary.  \par
\par
\page\par
\par
        AS8X300 ASSEMBLER                                      PAGE AY-5\par
        THE 8X300/8X305 MACRO LIBRARY\par
\par
\par
                ORG     space, pgsize  ^/[...]/\par
\par
        The  optional  extended  code, [...], will be output if the jump\par
        instruction is inserted.  \par
\par
           If  "space" is equal to "pgsize", this statement is an uncon-\par
        ditional alignment to the next boundary of length "pgsize".  \par
\par
\par
        AY.2.2  PROC \par
\par
        Format:  \par
\par
                PROC    sub \par
\par
        The PROC macro creates the following code:  \par
\par
                .sbttl  sub:\par
        sub:\par
\par
\par
        AY.2.3  ENTRY \par
\par
        Format:  \par
\par
                ENTRY   sub \par
\par
        The ENTRY macro creates the following code:  \par
\par
        sub:\par
\par
\par
        AY.2.4  CALL, RTN, and CALL_TABLE \par
\par
\par
           The  macro  functions  CALL,  RTN, and CALL_TABLE implement a\par
        subroutine calling convention.  The 8X300/8X305 microcontrollers\par
        donot  have  a stack to save the return addresses for subroutine\par
        calling or subroutine returns.  The subroutine  calling  conven-\par
        tion  uses  register r11 as an index into a table of return jump\par
        addresses created by cooperation between the CALL macro and  the\par
        CALL_TABLE  macro.   The  CALL macro creates a unique return ad-\par
        dress symbol each time the macro  is  invoked.   The  CALL_TABLE\par
        macro creates the return jump table which is appended to the end\par
        of the assembled code.  \par
\par
\page\par
\par
        AS8X300 ASSEMBLER                                      PAGE AY-6\par
        THE 8X300/8X305 MACRO LIBRARY\par
\par
\par
        Format:  \par
\par
                CALL    sub     ^/[...]/ \par
\par
        The CALL macro creates the following code:  \par
\par
                xmit    n,r11   [...]\par
                jmp     sub     [...]\par
\par
        and  a  symbol, .rtn.n which points to the instruction following\par
        the inserted code, where n is 0 for the  first  CALL  invocation\par
        and  is  incremented  by  1 for each successive CALL invocation.\par
        The extended instruction code, [...], is optional.  \par
\par
        Format:  \par
\par
                RTN     ^/[...]/ \par
\par
        The RTN macro creates the following code:  \par
\par
                jmp     .tbgn.  [...]\par
\par
        where  .tbgn.   is  a label created by the macro CALL_TABLE when\par
        invoked at the end of the assembly.   The  table  return  index,\par
        r11,  will  select the proper return jump address entry from the\par
        jump table created by the CALL_TABLE macro.   The  extended  in-\par
        struction code, [...], is optional.  \par
\par
        Format:  \par
\par
                CALL_TABLE      area_c,area_x   ^/[...]/ \par
\par
        'area_c'  specifies the code area where the return jump table is\par
        to be placed.  'area_x' specifies the code area where the exten-\par
        sion  data  is  to be placed.  CALL_TABLE can be invoked with no\par
        arguments to use the current code and extension  areas  and  the\par
        default extended code.  To create an empty argument use the con-\par
        struct ^// for the argument.  \par
\par
           The CALL_TABLE macro creates an entry for each CALL macro in-\par
        voked in the assembly program and produces the following code:  \par
\par
                xec     .+1(r11) [...]\par
                jmp     .rtn.0  [...]\par
                jmp     .rtn.1  [...]\par
                jmp     .rtn.2  [...]\par
                ... repeating for the\par
                    total number of CALLs\par
\par
\page\par
\par
        AS8X300 ASSEMBLER                                      PAGE AY-7\par
        8X300 AND 8X305 REGISTER SETS\par
\par
\par
        AY.3  8X300 AND 8X305 REGISTER SETS \par
\par
        The following is a list of the 8X300 and 8X305 registers used by\par
        AS8X300:  \par
\par
            Registers Common To The 8X300 and 8X305\par
                r0,r1,r2,r3     -       8-bit registers\par
                r4,r5,r6,r7\par
                r10,r11\par
                aux (= r0)\par
                ivl (= r7)\par
                ovf (= r10)\par
                ivr (= r17)\par
        \par
            Additional Registers Of The 8X305\par
                r12,r13,r14,    -       8-bit registers\par
                r15,r16\par
        \par
            Register names containing multiple letters\par
            must be all lower case or all upper case.\par
\page\par
\par
        AS8X300 ASSEMBLER                                      PAGE AY-8\par
        8X300 AND 8X305 REGISTER SETS\par
\par
\par
        AY.4  8X300 AND 8X305 INSTRUCTION SETS \par
\par
\par
           The  following  tables  list  all  8X300  and 8X305 mnemonics\par
        recognized by the AS8X300 assembler.  The following list  speci-\par
        fies the format for each addressing mode supported by AS8X300:  \par
\par
            Instruction Argument Syntax:\par
        \par
                op      instruction mnemonic\par
        \par
                reg     8X300/8X305 registers\par
        \par
                s       source I/O data feild\par
                        register, .liv or .riv symbol, or constant\par
        \par
                d       desination I/O data feild\par
                        register, .liv or .riv symbol, or constant\par
        \par
                exp8    8-bit value\par
        \par
                exp5    5-bit value\par
        \par
                df      I/O data field (may be optional)\par
        \par
                len     I/O field length (may be optional)\par
        \par
                r       bit positions to rotate (may be optional)\par
        \par
                addr    call or jump address or label\par
        \par
                code    extension field patterns (optional)\par
\par
        The terms reg, s, r, exp8, exp5, df, len, addr, and code may all\par
        be expressions.  \par
\par
           Note  that  not  all addressing modes may be valid with every\par
        instruction.  Refer to the 8X300/8X305 technical data for  valid\par
        modes.  \par
\page\par
\par
        AS8X300 ASSEMBLER                                      PAGE AY-9\par
        8X300 AND 8X305 INSTRUCTION SETS\par
\par
\par
        AY.4.1  Instruction Listing \par
\par
          Basic 8X300 and 8X305 Instructions\par
            MOVE, ADD, AND, XOR - Data Manipulation\par
                op      s,d             [code]\par
                op      s(r),d          [code]\par
                op      s,len,d         [code]\par
        \par
            XMIT - Load Immediate\par
                XMIT    exp8,reg        [code]\par
                XMIT    exp5,df,len     [code]\par
        \par
            XDEF - Execute\par
                XEC     exp8(reg),size          [code]\par
                XEC     exp5(df,len),size       [code]\par
        \par
            NZT - Non-Zero Transfer\par
                NZT     reg,exp8        [code]\par
                NZT     df,len,exp5     [code]\par
        \par
            JMP - Unconditional Jump\par
                JMP     addr    [code]\par
        \par
          Aditional 8X305 Instructions\par
            XML, XMR - Load Immediate To Left Or Right Bank\par
                op      immed   [code]\par
        \par
          Common Derived Instructions\par
            SEL, HALT, NOP - Derived Instructions\par
                SEL     df      [code]\par
                HALT            [code]\par
                NOP             [code]\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX AZ\cf1\par
\par
                               \cf2 AS8XCXXX ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        AZ.1  ACKNOWLEDGMENTS \par
\par
\par
           Thanks to Bill McKinnon for his contributions to the AS8XCXXX\par
        cross assembler.  \par
\par
                Bill McKinnon\par
                w_mckinnon at conknet dot com\par
\par
           This  assembler  was  derived from the AS8051 cross assembler\par
        contributed by John Hartman.  \par
\par
                John L. Hartman\par
                jhartman at compuserve dot com\par
                noice at noicedebugger dot com\par
\par
\par
        AZ.2  AS8XCXXX ASSEMBLER DIRECTIVES \par
\par
\par
\par
        AZ.2.1  Processor Selection Directives \par
\par
\par
           The  AS8XCXXX  assembler  contains  directives to specify the\par
        processor core SFR (Special Function Registers) and  enable  the\par
        SFR  Bit  Register values during the assembly process.  The fol-\par
        lowing directives are supported:  \par
\par
                .DS8XCXXX               ;80C32 core\par
                .DS80C310               ;Dallas Semiconductor\par
                .DS80C320               ;Microprocessors\par
                .DS80C323\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                     PAGE AZ-2\par
        AS8XCXXX ASSEMBLER DIRECTIVES\par
\par
\par
                .DS80C390\par
                .DS83C520\par
                .DS83C530\par
                .DS83C550\par
                .DS87C520\par
                .DS87C530\par
                .DS87C550\par
\par
        The invocation of one of the processor directives creates a pro-\par
        cessor specific symbol and an SFR-Bits symbol.  For example  the\par
        directive \par
\par
                .DS80C390\par
\par
        creates  the  global  symbols '__DS80C390' and '__SFR_BITS' each\par
        with a value of 1.  If the microprocessor core selection  direc-\par
        tive  is  followed  by  an  optional  argument  then  the symbol\par
        '__SFR_BITS' is given the  value  of  the  argument.   The  file\par
        DS8XCXXX.SFR  contains  the  SFR and SFR register bit values for\par
        all the microprocessor selector directives.  This  file  may  be\par
        modified to create a new SFR for other microprocessor types.  \par
\par
           If a microprocessor selection directive is not specified then\par
        no processor symbols will be defined.  This mode allows the  SFR\par
        and SFR register bit values to be defined by the assembly source\par
        file.  \par
\par
\par
        AZ.2.2  .cpu Directive \par
\par
\par
           The  .cpu  directive  is  similar  to the processor selection\par
        directives.  This directive defines a  new  processor  type  and\par
        creates a user defined symbol:  \par
\par
                .cpu    "CP84C331"      2\par
\par
           creates  the  symbol  '__CP84C331'  with a value of 1 and the\par
        symbol '__SFR_BITS' with a value of 2.  These values can be used\par
        to  select  the  processor SFR and SFR register bits from an in-\par
        clude file.  If the optional final argument, 2, is omitted  then\par
        the value of the symbol '__SFR_BITS' is 1.  \par
\par
\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                     PAGE AZ-3\par
        AS8XCXXX ASSEMBLER DIRECTIVES\par
\par
\par
        AZ.2.3  Processor Addressing Range Directives \par
\par
\par
           If one of the .DS8...  microprocessor selection directives is\par
        not specified then the following address range assembler  direc-\par
        tives are accepted:  \par
\par
                .16bit                  ;16-Bit Addressing\par
                .24bit                  ;24-Bit Addressing\par
                .32bit                  ;32-Bit Addressing\par
\par
        These  directives specify the assembler addressing space and ef-\par
        fect the output format for the .lst, .sym, and .rel files.  \par
\par
           The  default  addressing space for defined microprocessors is\par
        16-Bit except for the DS80C390 microprocessor which is 24-Bit.  \par
\par
           The  .cpu  directive  defaults to the 16-Bit addressing range\par
        but this can be changed using these directives.  \par
\par
\par
        AZ.2.4  The .__.CPU.  Variable \par
\par
\par
           The value of the pre-defined symbol '.__.CPU.' corresponds to\par
        the selected processor type.  The default value is 0 which  cor-\par
        responds  to  the  default  processor type.  The following table\par
        lists the processor types and associated values for the AS8XCXXX\par
        assembler:  \par
\par
                Processor Type            .__.CPU. Value\par
                --------------            --------------\par
                  .cpu                           0\par
        \par
                  .DS8XCXXX                      1\par
                  .DS80C310                      2\par
                  .DS80C320                      3\par
                  .DS80C323                      4\par
                  .DS80C390                      5\par
                  .DS83C520                      6\par
                  .DS83C530                      7\par
                  .DS83C550                      8\par
                  .DS87C520                      9\par
                  .DS87C530                     10\par
                  .DS87C550                     11\par
\par
\par
           The  variable  '.__.CPU.'  is by default defined as local and\par
        will not be output to the  created  .rel  file.   The  assembler\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                     PAGE AZ-4\par
        AS8XCXXX ASSEMBLER DIRECTIVES\par
\par
\par
        command line options -g or -a will not cause the local symbol to\par
        be output to the created .rel file.  \par
\par
           The  assembler  .globl  directive  may  be used to change the\par
        variable type to global causing its definition to be  output  to\par
        the  .rel file.  The inclusion of the definition of the variable\par
        '.__.CPU.' might be a useful means of validating that seperately\par
        assembled  files have been compiled for the same processor type.\par
        The linker will report an error for variables with multiple  non\par
        equal definitions.  \par
\par
\par
        AZ.2.5  DS80C390 Addressing Mode Directive \par
\par
\par
           The  DS80C390  microprocessor  supports 16-Bit and 24-Bit ad-\par
        dressing modes.   The  .amode  assembler  directive  provides  a\par
        method  to  select  the addressing mode used by the ajmp, acall,\par
        ljmp, and lcall instructions.  These four  instructions  support\par
        16  and  24 bit addressing modes selected by bits AM0 and AM1 in\par
        the ACON register.  The assembler is 'informed'  about  the  ad-\par
        dressing mode selected by using the .amode directive:  \par
\par
                .amode  2       ;mode 2 is 24-bit addressing\par
\par
        If  a  second  argument  is specified and its value is non-zero,\par
        then a three instruction sequence is inserted at the .amode  lo-\par
        cation loading the mode bits into the ACON register:  \par
\par
                .amode  2,1     ;mode 2 is 24-bit addressing, load ACON\par
                ;mov    ta,#0xAA\par
                ;mov    ta,#0x55\par
                ;mov    acon,#amode\par
\par
\par
\par
        AZ.2.6  The .msb Directive \par
\par
\par
           The .msb directive is available in the AS8XCXXX assembler.  \par
\par
           The  assembler operator '>' selects the upper byte (MSB) when\par
        included in an assembler  instruction.   The  default  assembler\par
        mode  is  to  select bits <15:8> as the MSB.  The .msb directive\par
        allows the programmer to specify a particular byte as the  'MSB'\par
        when the address space is larger than 16-bits.  \par
\par
           The assembler directive   .msb n  configures the assembler to\par
        select a particular byte as MSB.  Given a 24-bit address of  Nmn\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                     PAGE AZ-5\par
        AS8XCXXX ASSEMBLER DIRECTIVES\par
\par
\par
        (N(2) is <23:16>, m(1) is <15:8>, and n(0) is <7:0>) the follow-\par
        ing examples show how to select a particular address byte:  \par
\par
                .msb 1          ;select byte 1 of address\par
                                ;<M(3):N(2):m(1):n(0)>\par
                LD A,>MNmn      ;byte m <15:8> ==>> A\par
                ...\par
        \par
                .msb 2          ;select byte 2 of address\par
                                ;<M(3):N(2):m(1):n(0)>\par
                LD A,>MNmn      ;byte N <23:16> ==>> A\par
                ...\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                     PAGE AZ-6\par
        AS8XCXXX ASSEMBLER DIRECTIVES\par
\par
\par
        AZ.3  DS8XCXXX REGISTER SET \par
\par
        The  AS8XCXXX  cross assembler supports the Dallas Semiconductor\par
        DS8XCXXX series of 8051-compatible devices.  These  microproces-\par
        sors  retain  instruction set and object code compatability with\par
        the 8051 microprocessor.  The DS8XCXXX family  is  updated  with\par
        several   new  peripherals  while  providing  all  the  standard\par
        features of the 80C32 microprocessor.  \par
\par
           The following is a list of the registers used by AS8XCXXX:  \par
\par
                a,b             -       8-bit accumulators\par
                r0,r1,r2,r3     -       8-bit registers\par
                r4,r5,r6,r7\par
                dptr            -       data pointer\par
                sp              -       stack pointer\par
                pc              -       program counter\par
                psw             -       status word\par
                c               -       carry (bit in status word)\par
\par
\par
        AZ.4  DS8XCXXX INSTRUCTION SET \par
\par
\par
           The  following  tables list all DS8XCXXX mnemonics recognized\par
        by the AS8XCXXX assembler.  The  following  list  specifies  the\par
        format for each addressing mode supported by AS8XCXXX:  \par
\par
                #data           immediate data\par
                                byte or word data\par
        \par
                r,r1,r2         register r0,r1,r2,r3,r4,r5,r6, or r7\par
        \par
                @r              indirect on register r0 or r1\par
                @dptr           indirect on data pointer\par
                @a+dptr         indirect on accumulator\par
                                plus data pointer\par
                @a+pc           indirect on accumulator\par
                                plus program counter\par
        \par
                addr            direct memory address\par
        \par
                bitaddr         bit address\par
        \par
                label           call or jump label\par
\par
        The terms data, addr, bitaddr, and label may all be expressions. \par
\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                     PAGE AZ-7\par
        DS8XCXXX INSTRUCTION SET\par
\par
\par
           Note  that  not all addressing modes are valid with every in-\par
        struction.  Refer to  the  DS8XCXXX  technical  data  for  valid\par
        modes.  \par
\par
\par
        AZ.4.1  Inherent Instructions \par
\par
                nop\par
\par
\par
        AZ.4.2  Move Instructions \par
\par
                mov     a,#data         mov     a,addr\par
                mov     a,r             mov     a,@r\par
        \par
                mov     r,#data         mov     r,addr\par
                mov     r,a\par
        \par
                mov     addr,a          mov     addr,#data\par
                mov     addr,r          mov     addr,@r\par
                mov     addr1,addr2     mov     bitaddr,c\par
        \par
                mov     @r,#data        mov     @r,addr\par
                mov     @r,a\par
        \par
                mov     c,bitaddr\par
                mov     dptr,#data\par
        \par
                movc    a,@a+dptr       movc    a,@a+pc\par
                movx    a,@dptr         movx    a,@r\par
                movx    @dptr,a         movx    @r,a\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                     PAGE AZ-8\par
        DS8XCXXX INSTRUCTION SET\par
\par
\par
        AZ.4.3  Single Operand Instructions \par
\par
                clr     a               clr     c\par
                clr     bitaddr\par
                cpl     a               cpl     c\par
                cpl     bitaddr\par
                setb    c               setb    bitaddr\par
        \par
                da      a               \par
                rr      a               rrc     a\par
                rl      a               rlc     a\par
                swap    a\par
        \par
                dec     a               dec     r\par
                dec     @r\par
                inc     a               inc     r\par
                inc     dptr            inc     @r\par
        \par
                div     ab              mul     ab\par
        \par
                pop     addr            push    addr\par
\par
\par
        AZ.4.4  Two Operand Instructions \par
\par
                add     a,#data         add     a,addr\par
                add     a,r             add     a,@r\par
                addc    a,#data         addc    a,addr\par
                addc    a,r             addc    a,@r\par
                subb    a,#data         subb    a,addr\par
                subb    a,r             subb    a,@r\par
                orl     a,#data         orl     a,addr\par
                orl     a,r             orl     a,@r\par
                orl     addr,a          orl     addr,#data\par
                orl     c,bitaddr       orl     c,/bitaddr\par
                anl     a,#data         anl     a,addr\par
                anl     a,r             anl     a,@r\par
                anl     addr,a          anl     addr,#data\par
                anl     c,bitaddr       anl     c,/bitaddr\par
                xrl     a,#data         xrl     a,addr\par
                xrl     a,r             xrl     a,@r\par
                xrl     addr,a          xrl     addr,#data\par
                xrl     c,bitaddr       xrl     c,/bitaddr\par
                xch     a,addr          xch     a,r\par
                xch     a,@r            xchd    a,@r\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                     PAGE AZ-9\par
        DS8XCXXX INSTRUCTION SET\par
\par
\par
        AZ.4.5  Call and Return Instructions \par
\par
                acall   label           lcall   label\par
                ret                     reti\par
                in      data\par
                out     data\par
                rst     data\par
\par
\par
        AZ.4.6  Jump Instructions \par
\par
                ajmp    label\par
                cjne    a,#data,label   cjne    a,addr,label\par
                cjne    r,#data,label   cjne    @r,#data,label\par
                djnz    r,label         djnz    addr,label\par
                jbc     bitadr,label\par
                jb      bitadr,label    jnb     bitadr,label\par
                jc      label           jnc     label\par
                jz      label           jnz     label\par
                jmp     @a+dptr\par
                ljmp    label           sjmp    label\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-10\par
        DS8XCXXX INSTRUCTION SET\par
\par
\par
        AZ.5  DS8XCXXX SPECIAL FUNCTION REGISTERS \par
\par
\par
           The  80C32 core Special Function Registers are selected using\par
        the .DS8XCXXX assembler directive.  \par
\par
\par
        AZ.5.1  SFR Map \par
\par
                        --------- 4 Bytes ----------\par
                        ----    ----    ----    ----\par
                80              SP      DPL     DPH         83\par
                84                              PCON        87\par
                88      TCON    TMOD    TL0     TL1         8B\par
                8C      TH0     TH1                         8F\par
                90      P1                                  93\par
                94                                          97\par
                98      SCON    SBUF                        9B\par
                9C                                          9F\par
                A0      P2                                  A3\par
                A4                                          A7\par
                A8      IE      SADDR0                      AB\par
                AC                                          AF\par
                B0      P3                                  B3\par
                B4                                          B7\par
                B8      IP      SADEN0                      BB\par
                BC                                          BF\par
                C0                                          C3\par
                C4              STATUS                      C7\par
                C8      T2CON   T2MOD   RCAP2L  RCAP2H      CB\par
                CC      TL2     TH2                         CF\par
                D0      PSW                                 D3\par
                D4                                          D7\par
                D8                                          DB\par
                DC                                          DF\par
                E0      ACC                                 E3\par
                E4                                          E7\par
                E8                                          EB\par
                EC                                          EF\par
                F0      B                                   F3\par
                F4                                          F7\par
                F8                                          FB\par
                FC                                          FF\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-11\par
        DS8XCXXX SPECIAL FUNCTION REGISTERS\par
\par
\par
        AZ.5.2  Bit Addressable Registers:  Generic \par
\par
                        ---------- 4 BITS ----------\par
                        ----    ----    ----    ----\par
                80                                          83\par
                84                                          87\par
        TCON    88      TCON.0  TCON.1  TCON.2  TCON.3      8B\par
                8C      TCON.4  TCON.5  TCON.6  TCON.7      8F\par
        P1      90      P1.0    P1.1    P1.2    P1.3        93\par
                94      P1.4    P1.5    P1.6    P1.7        97\par
        SCON    98      SCON.0  SCON.1  SCON.2  SCON.3      9B\par
                9C      SCON.4  SCON.5  SCON.6  SCON.7      9F\par
        P2      A0      P2.0    P2.1    P2.2    P2.3        A3\par
                A4      P2.4    P2.5    P2.6    P2.7        A7\par
        IE      A8      IE.0    IE.1    IE.2    IE.3        AB\par
                AC      IE.4    IE.5    EI.6    IE.7        AF\par
        P3      B0      P3.0    P3.1    P3.2    P3.3        B3\par
                B4      P3.4    P3.5    P3.6    P3.7        B7\par
        IP      B8      IP.0    IP.1    IP.2    IP.3        BB\par
                BC      IP.4    IP.5    IP.6    IP.7        BF\par
                C0                                          C3\par
                C4                                          C7\par
        T2CON   C8      T2CON.0 T2CON.1 T2CON.2 T2CON.3     CB\par
                CC      T2CON.4 T2CON.5 T2CON.6 T2CON.7     CF\par
        PSW     D0      PSW.0   PSW.1   PSW.2   PSW.3       D3\par
                D4      PSW.4   PSW.5   PSW.6   PSW.7       D7\par
                D8                                          DB\par
                DC                                          DF\par
        ACC     E0      ACC.0   ACC.1   ACC.2   ACC.3       E3\par
                E4      ACC.4   ACC.5   ACC.6   ACC.7       E7\par
                E8                                          EB\par
                EC                                          EF\par
        B       F0      B.0     B.1     B.2     B.3         F3\par
                F4      B.4     B.5     B.6     B.7         F7\par
                F8                                          FB\par
                FC                                          FF\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-12\par
        DS8XCXXX SPECIAL FUNCTION REGISTERS\par
\par
\par
        AZ.5.3  Bit Addressable Registers:  Specific \par
\par
                        ---------- 4 BITS ----------\par
                        ----    ----    ----    ----\par
                80                                          83\par
                84                                          87\par
        TCON    88      IT0     IE0     IT1     IE1         8B\par
                8C      TR0     TF0     TR1     TF1         8F\par
                90                                          93\par
                94                                          97\par
        SCON    98      RI      TI      RB8     TB8         9B\par
                9C      REN     SM2     SM1     SMO         9F\par
                A0                                          A3\par
                A4                                          A7\par
        IE      A8      EX0     ET0     EX1     ET1         AB\par
                AC      ES0     ET2             EA          AF\par
                B0                                          B3\par
                B4                                          B7\par
        IP      B8      PX0     PT0     PX1     PT1         BB\par
                BC      PS0     PT2                         BF\par
                C0                                          C3\par
                C4                                          C7\par
        T2CON   C8      CPRL2   CT2     TR2     EXEN2       CB\par
                CC      TCLK    RCLK    EXF2    TF2         CF\par
        PSW     D0      P       FL      OV      RS0         D3\par
                D4      RS1     F0      AC      CY          D7\par
                D8                                          DB\par
                DC                                          DF\par
                E0                                          E3\par
                E4                                          E7\par
                E8                                          EB\par
                EC                                          EF\par
                F0                                          F3\par
                F4                                          F7\par
                F8                                          FB\par
                FC                                          FF\par
        \par
                Alternates:\par
        \par
        SCON    98                                          9B\par
                9C                              FE          9F\par
        T2CON   C8      CP_RL2  C_T2                        CB\par
                CC                                          CF\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-13\par
        DS8XCXXX SPECIAL FUNCTION REGISTERS\par
\par
\par
        AZ.5.4  Optional Symbols:  Control Bits \par
\par
                        ---------- 4 BITS ----------\par
                        ----    ----    ----    ----\par
                        0x80    0x40    0x20    0x10\par
                        0x08    0x04    0x02    0x10\par
                        ----    ----    ----    ----\par
        PCON    0x80    SMOD    SMOD0                       0x10\par
                0x08    GF1     GF0     STOP    IDLE        0x01\par
        TMOD    0x80    T1GATE  T1C_T   T1M1    T1M0        0x10\par
                0x08    T0GATE  T0C_T   T0M1    T0M0        0x01\par
        STATUS  0x80            HIP     LIP                 0x10\par
                0x08                                        0x01\par
        T2MOD   0x80                                        0x10\par
                0x08                    T2OE    DCEN        0x01\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-14\par
        DS8XCXXX SPECIAL FUNCTION REGISTERS\par
\par
\par
        AZ.6  DS80C310 SPECIAL FUNCTION REGISTERS \par
\par
\par
           The  DS80C310  Special  Function Registers are selected using\par
        the .DS80C310 assembler directive.  \par
\par
\par
        AZ.6.1  SFR Map \par
\par
                        --------- 4 Bytes ----------\par
                        ----    ----    ----    ----\par
                80              SP      DPL     DPH         83\par
                84      DPL1    DPH1    DPS     PCON        87\par
                88      TCON    TMOD    TL0     TL1         8B\par
                8C      TH0     TH1     CKCON               8F\par
                90      P1      EXIF                        93\par
                94                                          97\par
                98      SCON    SBUF                        9B\par
                9C                                          9F\par
                A0      P2                                  A3\par
                A4                                          A7\par
                A8      IE      SADDR0                      AB\par
                AC                                          AF\par
                B0      P3                                  B3\par
                B4                                          B7\par
                B8      IP      SADEN0                      BB\par
                BC                                          BF\par
                C0                                          C3\par
                C4              STATUS                      C7\par
                C8      T2CON   T2MOD   RCAP2L  RCAP2H      CB\par
                CC      TL2     TH2                         CF\par
                D0      PSW                                 D3\par
                D4                                          D7\par
                D8      WDCON                               DB\par
                DC                                          DF\par
                E0      ACC                                 E3\par
                E4                                          E7\par
                E8      EIE                                 EB\par
                EC                                          EF\par
                F0      B                                   F3\par
                F4                                          F7\par
                F8      EIP                                 FB\par
                FC                                          FF\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-15\par
        DS80C310 SPECIAL FUNCTION REGISTERS\par
\par
\par
        AZ.6.2  Bit Addressable Registers:  Generic \par
\par
                        ---------- 4 BITS ----------\par
                        ----    ----    ----    ----\par
                80                                          83\par
                84                                          87\par
        TCON    88      TCON.0  TCON.1  TCON.2  TCON.3      8B\par
                8C      TCON.4  TCON.5  TCON.6  TCON.7      8F\par
        P1      90      P1.0    P1.1    P1.2    P1.3        93\par
                94      P1.4    P1.5    P1.6    P1.7        97\par
        SCON    98      SCON.0  SCON.1  SCON.2  SCON.3      9B\par
                9C      SCON.4  SCON.5  SCON.6  SCON.7      9F\par
        P2      A0      P2.0    P2.1    P2.2    P2.3        A3\par
                A4      P2.4    P2.5    P2.6    P2.7        A7\par
        IE      A8      IE.0    IE.1    IE.2    IE.3        AB\par
                AC      IE.4    IE.5    EI.6    IE.7        AF\par
        P3      B0      P3.0    P3.1    P3.2    P3.3        B3\par
                B4      P3.4    P3.5    P3.6    P3.7        B7\par
        IP      B8      IP.0    IP.1    IP.2    IP.3        BB\par
                BC      IP.4    IP.5    IP.6    IP.7        BF\par
                C0                                          C3\par
                C4                                          C7\par
        T2CON   C8      T2CON.0 T2CON.1 T2CON.2 T2CON.3     CB\par
                CC      T2CON.4 T2CON.5 T2CON.6 T2CON.7     CF\par
        PSW     D0      PSW.0   PSW.1   PSW.2   PSW.3       D3\par
                D4      PSW.4   PSW.5   PSW.6   PSW.7       D7\par
        WDCON   D8      WDCON.0 WDCON.1 WDCON.2 WDCON.3     DB\par
                DC      WDCON.4 WDCON.5 WDCON.6 WDCON.7     DF\par
        ACC     E0      ACC.0   ACC.1   ACC.2   ACC.3       E3\par
                E4      ACC.4   ACC.5   ACC.6   ACC.7       E7\par
        EIE     E8      EIE.0   EIE.1   EIE.2   EIE.3       EB\par
                EC      EIE.4   EIE.5   EIE.6   EIE.7       EF\par
        B       F0      B.0     B.1     B.2     B.3         F3\par
                F4      B.4     B.5     B.6     B.7         F7\par
        EIP     F8      EIP.0   EIP.1   EIP.2   EIP.3       FB\par
                FC      EIP.4   EIP.5   EIP.6   EIP.7       FF\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-16\par
        DS80C310 SPECIAL FUNCTION REGISTERS\par
\par
\par
        AZ.6.3  Bit Addressable Registers:  Specific \par
\par
                        ---------- 4 BITS ----------\par
                        ----    ----    ----    ----\par
                80                                          83\par
                84                                          87\par
        TCON    88      IT0     IE0     IT1     IE1         8B\par
                8C      TR0     TF0     TR1     TF1         8F\par
                90                                          93\par
                94                                          97\par
        SCON    98      RI      TI      RB8     TB8         9B\par
                9C      REN     SM2     SM1     SMO         9F\par
                A0                                          A3\par
                A4                                          A7\par
        IE      A8      EX0     ET0     EX1     ET1         AB\par
                AC      ES0     ET2             EA          AF\par
                B0                                          B3\par
                B4                                          B7\par
        IP      B8      PX0     PT0     PX1     PT1         BB\par
                BC      PS0     PT2                         BF\par
                C0                                          C3\par
                C4                                          C7\par
        T2CON   C8      CPRL2   CT2     TR2     EXEN2       CB\par
                CC      TCLK    RCLK    EXF2    TF2         CF\par
        PSW     D0      P       FL      OV      RS0         D3\par
                D4      RS1     F0      AC      CY          D7\par
        WDCON   D8                                          DB\par
                DC                      POR                 DF\par
                E0                                          E3\par
                E4                                          E7\par
        EIE     E8      EX2     EX3     EX4     EX5         EB\par
                EC                                          EF\par
                F0                                          F3\par
                F4                                          F7\par
        EIP     F8      PX2     PX3     PX4     PX5         FB\par
                FC                                          FF\par
        \par
                Alternates:\par
        \par
        SCON    98                                          9B\par
                9C                              FE          9F\par
        T2CON   C8      CP_RL2  C_T2                        CB\par
                CC                                          CF\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-17\par
        DS80C310 SPECIAL FUNCTION REGISTERS\par
\par
\par
        AZ.6.4  Optional Symbols:  Control Bits \par
\par
                        ---------- 4 BITS ----------\par
                        ----    ----    ----    ----\par
                        0x80    0x40    0x20    0x10\par
                        0x08    0x04    0x02    0x10\par
                        ----    ----    ----    ----\par
        DPS     0x80                                        0x10\par
                0x08                            SEL         0x01\par
        PCON    0x80    SMOD    SMOD0                       0x10\par
                0x08    GF1     GF0     STOP    IDLE        0x01\par
        TMOD    0x80    T1GATE  T1C_T   T1M1    T1M0        0x10\par
                0x08    T0GATE  T0C_T   T0M1    T0M0        0x01\par
        CKCON   0x80                    T2M     T1M         0x10\par
                0x08    T0M     MD2     MD1     MD0         0x01\par
        EXIF    0x80    IE5     IE4     IE3     IE2         0x10\par
                0x08                                        0x01\par
        STATUS  0x80            HIP     LIP                 0x10\par
                0x08                                        0x01\par
        T2MOD   0x80                                        0x10\par
                0x08                    T2OE    DCEN        0x01\par
        \par
                Alternates:\par
        \par
        PCON    0x80    SMOD_0                              0x10\par
                0x08                                        0x01\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-18\par
        DS80C310 SPECIAL FUNCTION REGISTERS\par
\par
\par
        AZ.7  DS80C320/DS80C323 SPECIAL FUNCTION REGISTERS \par
\par
\par
           The DS80C320/DS80C323 Special Function Registers are selected\par
        using the .DS80C320 or DS80C323 assembler directives.  \par
\par
\par
        AZ.7.1  SFR Map \par
\par
                        --------- 4 Bytes ----------\par
                        ----    ----    ----    ----\par
                80              SP      DPL     DPH         83\par
                84      DPL1    DPH1    DPS     PCON        87\par
                88      TCON    TMOD    TL0     TL1         8B\par
                8C      TH0     TH1     CKCON               8F\par
                90      P1      EXIF                        93\par
                94                                          97\par
                98      SCON0   SBUF0                       9B\par
                9C                                          9F\par
                A0      P2                                  A3\par
                A4                                          A7\par
                A8      IE      SADDR0                      AB\par
                AC                                          AF\par
                B0      P3                                  B3\par
                B4                                          B7\par
                B8      IP      SADEN0                      BB\par
                BC                                          BF\par
                C0      SCON1   SBUF1                       C3\par
                C4              STATUS          TA          C7\par
                C8      T2CON   T2MOD   RCAP2L  RCAP2H      CB\par
                CC      TL2     TH2                         CF\par
                D0      PSW                                 D3\par
                D4                                          D7\par
                D8      WDCON                               DB\par
                DC                                          DF\par
                E0      ACC                                 E3\par
                E4                                          E7\par
                E8      EIE                                 EB\par
                EC                                          EF\par
                F0      B                                   F3\par
                F4                                          F7\par
                F8      EIP                                 FB\par
                FC                                          FF\par
        \par
                Alternates:\par
        \par
                98      SCON    SBUF                        9B\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-19\par
        DS80C320/DS80C323 SPECIAL FUNCTION REGISTERS\par
\par
\par
        AZ.7.2  Bit Addressable Registers:  Generic \par
\par
                        ---------- 4 BITS ----------\par
                        ----    ----    ----    ----\par
                80                                          83\par
                84                                          87\par
        TCON    88      TCON.0  TCON.1  TCON.2  TCON.3      8B\par
                8C      TCON.4  TCON.5  TCON.6  TCON.7      8F\par
        P1      90      P1.0    P1.1    P1.2    P1.3        93\par
                94      P1.4    P1.5    P1.6    P1.7        97\par
        SCON0   98      SCON0.0 SCON0.1 SCON0.2 SCON0.3     9B\par
                9C      SCON0.4 SCON0.5 SCON0.6 SCON0.7     9F\par
        P2      A0      P2.0    P2.1    P2.2    P2.3        A3\par
                A4      P2.4    P2.5    P2.6    P2.7        A7\par
        IE      A8      IE.0    IE.1    IE.2    IE.3        AB\par
                AC      IE.4    IE.5    EI.6    IE.7        AF\par
        P3      B0      P3.0    P3.1    P3.2    P3.3        B3\par
                B4      P3.4    P3.5    P3.6    P3.7        B7\par
        IP      B8      IP.0    IP.1    IP.2    IP.3        BB\par
                BC      IP.4    IP.5    IP.6    IP.7        BF\par
        SCON1   C0      SCON1.0 SCON1.1 SCON1.2 SCON1.3     C3\par
                C4      SCON1.4 SCON1.5 SCON1.6 SCON1.7     C7\par
        T2CON   C8      T2CON.0 T2CON.1 T2CON.2 T2CON.3     CB\par
                CC      T2CON.4 T2CON.5 T2CON.6 T2CON.7     CF\par
        PSW     D0      PSW.0   PSW.1   PSW.2   PSW.3       D3\par
                D4      PSW.4   PSW.5   PSW.6   PSW.7       D7\par
        WDCON   D8      WDCON.0 WDCON.1 WDCON.2 WDCON.3     DB\par
                DC      WDCON.4 WDCON.5 WDCON.6 WDCON.7     DF\par
        ACC     E0      ACC.0   ACC.1   ACC.2   ACC.3       E3\par
                E4      ACC.4   ACC.5   ACC.6   ACC.7       E7\par
        EIE     E8      EIE.0   EIE.1   EIE.2   EIE.3       EB\par
                EC      EIE.4   EIE.5   EIE.6   EIE.7       EF\par
        B       F0      B.0     B.1     B.2     B.3         F3\par
                F4      B.4     B.5     B.6     B.7         F7\par
        EIP     F8      EIP.0   EIP.1   EIP.2   EIP.3       FB\par
                FC      EIP.4   EIP.5   EIP.6   EIP.7       FF\par
        \par
                        Alternates:\par
        \par
        SCON    98      SCON.0  SCON.1  SCON.2  SCON.3      9B\par
                9C      SCON.4  SCON.5  SCON.6  SCON.7      9F\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-20\par
        DS80C320/DS80C323 SPECIAL FUNCTION REGISTERS\par
\par
\par
        AZ.7.3  Bit Addressable Registers:  Specific \par
\par
                        ---------- 4 BITS ----------\par
                        ----    ----    ----    ----\par
                80                                          83\par
                84                                          87\par
        TCON    88      IT0     IE0     IT1     IE1         8B\par
                8C      TR0     TF0     TR1     TF1         8F\par
                90                                          93\par
                94                                          97\par
        SCON0   98      RI_0    TI_0    RB8_0   TB8_0       9B\par
                9C      REN_0   SM2_0   SM1_0   SMO_0       9F\par
                A0                                          A3\par
                A4                                          A7\par
        IE      A8      EX0     ET0     EX1     ET1         AB\par
                AC      ES0     ET2             EA          AF\par
                B0                                          B3\par
                B4                                          B7\par
        IP      B8      PX0     PT0     PX1     PT1         BB\par
                BC      PS0     PT2                         BF\par
        SCON1   C0      RI_1    TI_1    RB8_1   TB8_1       C3\par
                C4      REN_1   SM2_1   SM1_1   SMO_1       C7\par
        T2CON   C8      CPRL2   CT2     TR2     EXEN2       CB\par
                CC      TCLK    RCLK    EXF2    TF2         CF\par
        PSW     D0      P       FL      OV      RS0         D3\par
                D4      RS1     F0      AC      CY          D7\par
        WDCON   D8      RWT     EWT     WTRF    WDIF        DB\par
                DC      PFI     EPFI    POR     SMOD_1      DF\par
                E0                                          E3\par
                E4                                          E7\par
        EIE     E8      EX2     EX3     EX4     EX5         EB\par
                EC      EWDI                                EF\par
                F0                                          F3\par
                F4                                          F7\par
        EIP     F8      PX2     PX3     PX4     PX5         FB\par
                FC      PWDI                                FF\par
        \par
                Alternates:\par
        \par
        SCON    98      RI      TI      RB8     TB8         9B\par
                9C      REN     SM2     SM1     SMO         9F\par
        SCON    98                                          9B\par
                9C                              FE          9F\par
        SCON0   98                                          9B\par
                9C                              FE_0        9F\par
        SCON1   C0                                          C3\par
                C4                              FE_1        C7\par
        T2CON   C8      CP_RL2  C_T2                        CB\par
                CC                                          CF\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-21\par
        DS80C320/DS80C323 SPECIAL FUNCTION REGISTERS\par
\par
\par
        AZ.7.4  Optional Symbols:  Control Bits \par
\par
                        ---------- 4 BITS ----------\par
                        ----    ----    ----    ----\par
                        0x80    0x40    0x20    0x10\par
                        0x08    0x04    0x02    0x10\par
                        ----    ----    ----    ----\par
        DPS     0x80                                        0x10\par
                0x08                            SEL         0x01\par
        PCON    0x80    SMOD_0  SMOD0                       0x10\par
                0x08    GF1     GF0     STOP    IDLE        0x01\par
        TMOD    0x80    T1GATE  T1C_T   T1M1    T1M0        0x10\par
                0x08    T0GATE  T0C_T   T0M1    T0M0        0x01\par
        CKCON   0x80    WD1     WD0     T2M     T1M         0x10\par
                0x08    T0M     MD2     MD1     MD0         0x01\par
        EXIF    0x80    IE5     IE4     IE3     IE2         0x10\par
                0x08            RGMD    RGSL    BGS         0x01\par
        STATUS  0x80    PIP     HIP     LIP                 0x10\par
                0x08                                        0x01\par
        T2MOD   0x80                                        0x10\par
                0x08                    T2OE    DCEN        0x01\par
        \par
                Alternates:\par
        \par
        PCON    0x80    SMOD                                0x10\par
                0x08                                        0x01\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-22\par
        DS80C320/DS80C323 SPECIAL FUNCTION REGISTERS\par
\par
\par
        AZ.8  DS80C390 SPECIAL FUNCTION REGISTERS \par
\par
\par
           The  DS80C390  Special  Function Registers are selected using\par
        the .DS80C390 assembler directive.  \par
\par
\par
        AZ.8.1  SFR Map \par
\par
                        --------- 4 Bytes ----------\par
                        ----    ----    ----    ----\par
                80      P4      SP      DPL     DPH         83\par
                84      DPL1    DPH1    DPS     PCON        87\par
                88      TCON    TMOD    TL0     TL1         8B\par
                8C      TH0     TH1     CKCON               8F\par
                90      P1      EXIF    P4CNT   DPX         93\par
                94              DPX1    C0RMS0  C0RMS1      97\par
                98      SCON0   SBUF0           ESP         9B\par
                9C      AP      ACON    C0TMA0  C0TMA1      9F\par
                A0      P2      P5      P5CNT   C0C         A3\par
                A4      C0S     C0IR    C0TE    C0RE        A7\par
                A8      IE      SADDR0  SADDR1  C0M1C       AB\par
                AC      C0M2C   C0M3C   C0M4C   C0M5C       AF\par
                B0      P3                      C0M6C       B3\par
                B4      C0M7C   C0M8C   C0M9C   C0M10C      B7\par
                B8      IP      SADEN0  SADEN1  C0M11C      BB\par
                BC      C0M12C  C0M13C  C0M14C  C0M15C      BF\par
                C0      SCON1   SBUF1                       C3\par
                C4      PMR     STATUS  MCON    TA          C7\par
                C8      T2CON   T2MOD   RCAP2L  RCAP2H      CB\par
                CC      TL2     TH2     COR                 CF\par
                D0      PSW     MCNT0   MCNT1   MA          D3\par
                D4      MB      MC      C1RMS0  C1RMS1      D7\par
                D8      WDCON                               DB\par
                DC                      C1TMA0  C1TMA1      DF\par
                E0      ACC                     C1C         E3\par
                E4      C1S     C1IR    C1TE    C1RE        E7\par
                E8      EIE             MXAX    C1M1C       EB\par
                EC      C1M2C   C1M3C   C1M4C   C1M5C       EF\par
                F0      B                       C1M6C       F3\par
                F4      C1M7C   C1M8C   C1M9C   C1M10C      F7\par
                F8      EIP                     C1M11C      FB\par
                FC      C1M12C  C1M13C  C1M14C  C1M15C      FF\par
        \par
                Alternates:\par
        \par
                98      SCON    SBUF                        9B\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-23\par
        DS80C390 SPECIAL FUNCTION REGISTERS\par
\par
\par
        AZ.8.2  Bit Addressable Registers:  Generic \par
\par
                        ---------- 4 BITS ----------\par
                        ----    ----    ----    ----\par
        P4      80      P4.0    P4.1    P4.2    P4.3        83\par
                84      P4.4    P4.5    P4.6    P4.7        87\par
        TCON    88      TCON.0  TCON.1  TCON.2  TCON.3      8B\par
                8C      TCON.4  TCON.5  TCON.6  TCON.7      8F\par
        P1      90      P1.0    P1.1    P1.2    P1.3        93\par
                94      P1.4    P1.5    P1.6    P1.7        97\par
        SCON0   98      SCON0.0 SCON0.1 SCON0.2 SCON0.3     9B\par
                9C      SCON0.4 SCON0.5 SCON0.6 SCON0.7     9F\par
        P2      A0      P2.0    P2.1    P2.2    P2.3        A3\par
                A4      P2.4    P2.5    P2.6    P2.7        A7\par
        IE      A8      IE.0    IE.1    IE.2    IE.3        AB\par
                AC      IE.4    IE.5    EI.6    IE.7        AF\par
        P3      B0      P3.0    P3.1    P3.2    P3.3        B3\par
                B4      P3.4    P3.5    P3.6    P3.7        B7\par
        IP      B8      IP.0    IP.1    IP.2    IP.3        BB\par
                BC      IP.4    IP.5    IP.6    IP.7        BF\par
        SCON1   C0      SCON1.0 SCON1.1 SCON1.2 SCON1.3     C3\par
                C4      SCON1.4 SCON1.5 SCON1.6 SCON1.7     C7\par
        T2CON   C8      T2CON.0 T2CON.1 T2CON.2 T2CON.3     CB\par
                CC      T2CON.4 T2CON.5 T2CON.6 T2CON.7     CF\par
        PSW     D0      PSW.0   PSW.1   PSW.2   PSW.3       D3\par
                D4      PSW.4   PSW.5   PSW.6   PSW.7       D7\par
        WDCON   D8      WDCON.0 WDCON.1 WDCON.2 WDCON.3     DB\par
                DC      WDCON.4 WDCON.5 WDCON.6 WDCON.7     DF\par
        ACC     E0      ACC.0   ACC.1   ACC.2   ACC.3       E3\par
                E4      ACC.4   ACC.5   ACC.6   ACC.7       E7\par
        EIE     E8      EIE.0   EIE.1   EIE.2   EIE.3       EB\par
                EC      EIE.4   EIE.5   EIE.6   EIE.7       EF\par
        B       F0      B.0     B.1     B.2     B.3         F3\par
                F4      B.4     B.5     B.6     B.7         F7\par
        EIP     F8      EIP.0   EIP.1   EIP.2   EIP.3       FB\par
                FC      EIP.4   EIP.5   EIP.6   EIP.7       FF\par
        \par
                        Alternates:\par
        \par
        SCON    98      SCON.0  SCON.1  SCON.2  SCON.3      9B\par
                9C      SCON.4  SCON.5  SCON.6  SCON.7      9F\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-24\par
        DS80C390 SPECIAL FUNCTION REGISTERS\par
\par
\par
        AZ.8.3  Bit Addressable Registers:  Specific \par
\par
                        ---------- 4 BITS ----------\par
                        ----    ----    ----    ----\par
                80                                          83\par
                84                                          87\par
        TCON    88      IT0     IE0     IT1     IE1         8B\par
                8C      TR0     TF0     TR1     TF1         8F\par
        P1      90      T2      T2EX    RXD1    TXD1        93\par
                94      INT2    INT3    INT4    INT5        97\par
        SCON0   98      RI_0    TI_0    RB8_0   TB8_0       9B\par
                9C      REN_0   SM2_0   SM1_0   SMO_0       9F\par
                A0                                          A3\par
                A4                                          A7\par
        IE      A8      EX0     ET0     EX1     ET1         AB\par
                AC      ES0     ET2     ES1     EA          AF\par
        P3      B0      RXD0    TXD0    INT0    INT1        B3\par
                B4      T0      T1                          B7\par
        IP      B8      PX0     PT0     PX1     PT1         BB\par
                BC      PS0     PT2     PS1                 BF\par
        SCON1   C0      RI_1    TI_1    RB8_1   TB8_1       C3\par
                C4      REN_1   SM2_1   SM1_1   SMO_1       C7\par
        T2CON   C8      CPRL2   CT2     TR2     EXEN2       CB\par
                CC      TCLK    RCLK    EXF2    TF2         CF\par
        PSW     D0      P       FL      OV      RS0         D3\par
                D4      RS1     F0      AC      CY          D7\par
        WDCON   D8      RWT     EWT     WTRF    WDIF        DB\par
                DC      PFI     EPFI    POR     SMOD_1      DF\par
                E0                                          E3\par
                E4                                          E7\par
        EIE     E8      EX2     EX3     EX4     EX5         EB\par
                EC      EWDI    C1IE    C0IE    CANBIE      EF\par
                F0                                          F3\par
                F4                                          F7\par
        EIP     F8      PX2     PX3     PX4     PX5         FB\par
                FC      PWDI    C1IP    C0IP    CANBIP      FF\par
        \par
                Alternates:\par
        \par
        SCON    98      RI      TI      RB8     TB8         9B\par
                9C      REN     SM2     SM1     SMO         9F\par
        SCON    98                                          9B\par
                9C                              FE          9F\par
        SCON0   98                                          9B\par
                9C                              FE_0        9F\par
        SCON1   C0                                          C3\par
                C4                              FE_1        C7\par
        T2CON   C8      CP_RL2  C_T2                        CB\par
                CC                                          CF\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-25\par
        DS80C390 SPECIAL FUNCTION REGISTERS\par
\par
\par
        AZ.8.4  Optional Symbols:  Control Bits \par
\par
                        ---------- 4 BITS ----------\par
                        ----    ----    ----    ----\par
                        0x80    0x40    0x20    0x10\par
                        0x08    0x04    0x02    0x10\par
                        ----    ----    ----    ----\par
        DPS     0x80    ID1     ID0     TSL                 0x10\par
                0x08                            SEL         0x01\par
        PCON    0x80    SMOD_0  SMOD0   OFDF    OFDE        0x10\par
                0x08    GF1     GF0     STOP    IDLE        0x01\par
        TMOD    0x80    T1GATE  T1C_T   T1M1    T1M0        0x10\par
                0x08    T0GATE  T0C_T   T0M1    T0M0        0x01\par
        CKCON   0x80    WD1     WD0     T2M     T1M         0x10\par
                0x08    T0M     MD2     MD1     MD0         0x01\par
        EXIF    0x80    IE5     IE4     IE3     IE2         0x10\par
                0x08    CKRY    RGMD    RGSL    BGS         0x01\par
        P4CNT   0x80            SBCAN                       0x10\par
                0x08                                        0x01\par
        ESP     0x80                                        0x10\par
                0x08                    ESP.1   ESP.0       0x01\par
        ACON    0x80                                        0x10\par
                0x08            SA      AM1     AM0         0x01\par
        P5      0x80    P5.7    P5.6    P5.5    P5.4        0x10\par
                0x08    P5.3    P5.2    P5.1    P5.0        0x01\par
        P5CNT   0x80    CAN1BA  CAN0BA  SP1EC   C1_IO       0x10\par
                0x08    C0_IO   P5CNT.2 P5CNT.1 P5CNT.0     0x01\par
        CxC     0x80    ERIE    STIE    PDE     SIESTA      0x10\par
                0x08    CRST    AUTOB   ERCS    SWINT       0x01\par
        CxS     0x80    BSS   EC96_128  WKS     RXS         0x10\par
                0x08    TXS     ER2     ER1     ER0         0x01\par
        CxIR    0x80    INTIN7  INTIN6  INTIN5  INTIN4      0x10\par
                0x08    INTIN3  INTIN2  INTIN1  INTIN0      0x01\par
        CxCxxC  0x80    MSRDY   ET1     ER1     INTRQ       0x10\par
                0x08    EXTRQ   MTRQ    ROW_TIH DTUP        0x01\par
        PMR     0x80    CD1     CD0     SWB     CTM         0x10\par
                0x08    4X_2X   ALEOFF                      0x01\par
        STATUS  0x80    PIP     HIP     LIP                 0x10\par
                0x08    SPTA1   SPRA1   SPTA0   SPRA0       0x01\par
        MCON    0x80    IDM1    IDM0    CMA                 0x10\par
                0x08    PDCE3   PDCE2   PDCE1   PDCE0       0x01\par
        T2MOD   0x80                            D13T1       0x10\par
                0x08    D13T2           T2OE    DCEN        0x01\par
        COR     0x80    IRDACK  C1BPR7  C1BPR6  C0BPR7      0x10\par
                0x08    C0BPR6  COD1    COD0    CLKOE       0x01\par
        MCNT0   0x80    _LSHIFT CSE     SCB     MAS4        0x10\par
                0x08    MAS3    MAS2    MAS1    MAS0        0x01\par
        MCNT1   0x80    MST     MOF             CLM         0x10\par
                0x08                                        0x01\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-26\par
        DS80C390 SPECIAL FUNCTION REGISTERS\par
\par
\par
        \par
                Alternates:\par
        \par
        PCON    0x80    SMOD                                0x10\par
                0x08                                        0x01\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-27\par
        DS80C390 SPECIAL FUNCTION REGISTERS\par
\par
\par
        AZ.9  DS83C520/DS87C520 SPECIAL FUNCTION REGISTERS \par
\par
\par
           The DS83C520/DS87C520 Special Function Registers are selected\par
        using the .DS83C520 or DS87C520 assembler directives.  \par
\par
\par
        AZ.9.1  SFR Map \par
\par
                        --------- 4 Bytes ----------\par
                        ----    ----    ----    ----\par
                80      P0      SP      DPL     DPH         83\par
                84      DPL1    DPH1    DPS     PCON        87\par
                88      TCON    TMOD    TL0     TL1         8B\par
                8C      TH0     TH1     CKCON               8F\par
                90      PORT1   EXIF                        93\par
                94                                          97\par
                98      SCON0   SBUF0                       9B\par
                9C                                          9F\par
                A0      P2                                  A3\par
                A4                                          A7\par
                A8      IE      SADDR0  SADDR1              AB\par
                AC                                          AF\par
                B0      P3                                  B3\par
                B4                                          B7\par
                B8      IP      SADEN0  SADEN1              BB\par
                BC                                          BF\par
                C0      SCON1   SBUF1   ROMSIZE             C3\par
                C4      PMR     STATUS          TA          C7\par
                C8      T2CON   T2MOD   RCAP2L  RCAP2H      CB\par
                CC      TL2     TH2                         CF\par
                D0      PSW                                 D3\par
                D4                                          D7\par
                D8      WDCON                               DB\par
                DC                                          DF\par
                E0      ACC                                 E3\par
                E4                                          E7\par
                E8      EIE                                 EB\par
                EC                                          EF\par
                F0      B                                   F3\par
                F4                                          F7\par
                F8      EIP                                 FB\par
                FC                                          FF\par
        \par
                Alternates:\par
        \par
                98      SCON    SBUF                        9B\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-28\par
        DS83C520/DS87C520 SPECIAL FUNCTION REGISTERS\par
\par
\par
        AZ.9.2  Bit Addressable Registers:  Generic \par
\par
                        ---------- 4 BITS ----------\par
                        ----    ----    ----    ----\par
        P0      80      P0.7    P0.6    P0.5    P0.4        83\par
                84      P0.3    P0.2    P0.1    P0.0        87\par
        TCON    88      TCON.0  TCON.1  TCON.2  TCON.3      8B\par
                8C      TCON.4  TCON.5  TCON.6  TCON.7      8F\par
        PORT1   90      P1.0    P1.1    P1.2    P1.3        93\par
                94      P1.4    P1.5    P1.6    P1.7        97\par
        SCON0   98      SCON0.0 SCON0.1 SCON0.2 SCON0.3     9B\par
                9C      SCON0.4 SCON0.5 SCON0.6 SCON0.7     9F\par
        P2      A0      P2.0    P2.1    P2.2    P2.3        A3\par
                A4      P2.4    P2.5    P2.6    P2.7        A7\par
        IE      A8      IE.0    IE.1    IE.2    IE.3        AB\par
                AC      IE.4    IE.5    EI.6    IE.7        AF\par
        P3      B0      P3.0    P3.1    P3.2    P3.3        B3\par
                B4      P3.4    P3.5    P3.6    P3.7        B7\par
        IP      B8      IP.0    IP.1    IP.2    IP.3        BB\par
                BC      IP.4    IP.5    IP.6    IP.7        BF\par
        SCON1   C0      SCON1.0 SCON1.1 SCON1.2 SCON1.3     C3\par
                C4      SCON1.4 SCON1.5 SCON1.6 SCON1.7     C7\par
        T2CON   C8      T2CON.0 T2CON.1 T2CON.2 T2CON.3     CB\par
                CC      T2CON.4 T2CON.5 T2CON.6 T2CON.7     CF\par
        PSW     D0      PSW.0   PSW.1   PSW.2   PSW.3       D3\par
                D4      PSW.4   PSW.5   PSW.6   PSW.7       D7\par
        WDCON   D8      WDCON.0 WDCON.1 WDCON.2 WDCON.3     DB\par
                DC      WDCON.4 WDCON.5 WDCON.6 WDCON.7     DF\par
        ACC     E0      ACC.0   ACC.1   ACC.2   ACC.3       E3\par
                E4      ACC.4   ACC.5   ACC.6   ACC.7       E7\par
        EIE     E8      EIE.0   EIE.1   EIE.2   EIE.3       EB\par
                EC      EIE.4   EIE.5   EIE.6   EIE.7       EF\par
        B       F0      B.0     B.1     B.2     B.3         F3\par
                F4      B.4     B.5     B.6     B.7         F7\par
        EIP     F8      EIP.0   EIP.1   EIP.2   EIP.3       FB\par
                FC      EIP.4   EIP.5   EIP.6   EIP.7       FF\par
        \par
                        Alternates:\par
        \par
        PORT1   90      PORT1.0 PORT1.1 PORT1.2 PORT1.3     93\par
                94      PORT1.4 PORT1.5 PORT1.6 PORT1.7     97\par
        SCON    98      SCON.0  SCON.1  SCON.2  SCON.3      9B\par
                9C      SCON.4  SCON.5  SCON.6  SCON.7      9F\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-29\par
        DS83C520/DS87C520 SPECIAL FUNCTION REGISTERS\par
\par
\par
        AZ.9.3  Bit Addressable Registers:  Specific \par
\par
                        ---------- 4 BITS ----------\par
                        ----    ----    ----    ----\par
                80                                          83\par
                84                                          87\par
        TCON    88      IT0     IE0     IT1     IE1         8B\par
                8C      TR0     TF0     TR1     TF1         8F\par
                90                                          93\par
                94                                          97\par
        SCON0   98      RI_0    TI_0    RB8_0   TB8_0       9B\par
                9C      REN_0   SM2_0   SM1_0   SMO_0       9F\par
                A0                                          A3\par
                A4                                          A7\par
        IE      A8      EX0     ET0     EX1     ET1         AB\par
                AC      ES0     ET2     ES1     EA          AF\par
                B0                                          B3\par
                B4                                          B7\par
        IP      B8      PX0     PT0     PX1     PT1         BB\par
                BC      PS0     PT2     PS1                 BF\par
        SCON1   C0      RI_1    TI_1    RB8_1   TB8_1       C3\par
                C4      REN_1   SM2_1   SM1_1   SMO_1       C7\par
        T2CON   C8      CPRL2   CT2     TR2     EXEN2       CB\par
                CC      TCLK    RCLK    EXF2    TF2         CF\par
        PSW     D0      P       FL      OV      RS0         D3\par
                D4      RS1     F0      AC      CY          D7\par
        WDCON   D8      RWT     EWT     WTRF    WDIF        DB\par
                DC      PFI     EPFI    POR     SMOD_1      DF\par
                E0                                          E3\par
                E4                                          E7\par
        EIE     E8      EX2     EX3     EX4     EX5         EB\par
                EC      EWDI                                EF\par
                F0                                          F3\par
                F4                                          F7\par
        EIP     F8      PX2     PX3     PX4     PX5         FB\par
                FC      PWDI                                FF\par
        \par
                Alternates:\par
        \par
        SCON    98      RI      TI      RB8     TB8         9B\par
                9C      REN     SM2     SM1     SMO         9F\par
        SCON    98                                          9B\par
                9C                              FE          9F\par
        SCON0   98                                          9B\par
                9C                              FE_0        9F\par
        SCON1   C0                                          C3\par
                C4                              FE_1        C7\par
        T2CON   C8      CP_RL2  C_T2                        CB\par
                CC                                          CF\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-30\par
        DS83C520/DS87C520 SPECIAL FUNCTION REGISTERS\par
\par
\par
        AZ.9.4  Optional Symbols:  Control Bits \par
\par
                        ---------- 4 BITS ----------\par
                        ----    ----    ----    ----\par
                        0x80    0x40    0x20    0x10\par
                        0x08    0x04    0x02    0x10\par
                        ----    ----    ----    ----\par
        DPS     0x80                                        0x10\par
                0x08                            SEL         0x01\par
        PCON    0x80    SMOD_0  SMOD0                       0x10\par
                0x08    GF1     GF0     STOP    IDLE        0x01\par
        TMOD    0x80    T1GATE  T1C_T   T1M1    T1M0        0x10\par
                0x08    T0GATE  T0C_T   T0M1    T0M0        0x01\par
        CKCON   0x80    WD1     WD0     T2M     T1M         0x10\par
                0x08    T0M     MD2     MD1     MD0         0x01\par
        EXIF    0x80    IE5     IE4     IE3     IE          0x10\par
                0x08    XT_RG   RGMD    RGSL    BGS         0x01\par
        SBUF1   0x80    SB7     SB6     SB5     SB4         0x10\par
                0x08    SB3     SB2     SB1     SB0         0x01\par
        ROMSIZE 0x80                                        0x10\par
                0x08            RMS2    RMS1    RMS0        0x01\par
        PMR     0x80    CD1     CD0     SWB                 0x10\par
                0x08    XTOFF   ALEOFF  DME1    DME0        0x01\par
        STATUS  0x80    PIP     HIP     LIP     XTUP        0x10\par
                0x08    SPTA1   SPRA1   SPTA0   SPRA0       0x01\par
        T2MOD   0x80                                        0x10\par
                0x08                    T2OE    DCEN        0x01\par
        \par
                Alternates:\par
        \par
        PCON    0x80    SMOD                                0x10\par
                0x08                                        0x01\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-31\par
        DS83C520/DS87C520 SPECIAL FUNCTION REGISTERS\par
\par
\par
        AZ.10  DS83C530/DS87C530 SPECIAL FUNCTION REGISTERS \par
\par
\par
           The DS83C530/DS87C530 Special Function Registers are selected\par
        using the .DS83C530 or DS87C530 assembler directives.  \par
\par
\par
        AZ.10.1  SFR Map \par
\par
                        --------- 4 Bytes ----------\par
                        ----    ----    ----    ----\par
                80      P0      SP      DPL     DPH         83\par
                84      DPL1    DPH1    DPS     PCON        87\par
                88      TCON    TMOD    TL0     TL1         8B\par
                8C      TH0     TH1     CKCON               8F\par
                90      P1      EXIF                        93\par
                94                      TRIM                97\par
                98      SCON0   SBUF0                       9B\par
                9C                                          9F\par
                A0      P2                                  A3\par
                A4                                          A7\par
                A8      IE      SADDR0  SADDR1              AB\par
                AC                                          AF\par
                B0      P3                                  B3\par
                B4                                          B7\par
                B8      IP      SADEN0  SADEN1              BB\par
                BC                                          BF\par
                C0      SCON1   SBUF1   ROMSIZE             C3\par
                C4      PMR     STATUS          TA          C7\par
                C8      T2CON   T2MOD   RCAP2L  RCAP2H      CB\par
                CC      TL2     TH2                         CF\par
                D0      PSW                                 D3\par
                D4                                          D7\par
                D8      WDCON                               DB\par
                DC                                          DF\par
                E0      ACC                                 E3\par
                E4                                          E7\par
                E8      EIE                                 EB\par
                EC                                          EF\par
                F0      B               RTASS   RTAS        F3\par
                F4      RTAM    RTAH                        F7\par
                F8      EIP     RTCC    RTCSS   RTCS        FB\par
                FC      RTCM    RTCH    RTCD0   RTCD1       FF\par
        \par
                Alternates:\par
        \par
                98      SCON    SBUF                        9B\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-32\par
        DS83C530/DS87C530 SPECIAL FUNCTION REGISTERS\par
\par
\par
        AZ.10.2  Bit Addressable Registers:  Generic \par
\par
                        ---------- 4 BITS ----------\par
                        ----    ----    ----    ----\par
        P0      80      P0.7    P0.6    P0.5    P0.4        83\par
                84      P0.3    P0.2    P0.1    P0.0        87\par
        TCON    88      TCON.0  TCON.1  TCON.2  TCON.3      8B\par
                8C      TCON.4  TCON.5  TCON.6  TCON.7      8F\par
        P1      90      P1.0    P1.1    P1.2    P1.3        93\par
                94      P1.4    P1.5    P1.6    P1.7        97\par
        SCON0   98      SCON0.0 SCON0.1 SCON0.2 SCON0.3     9B\par
                9C      SCON0.4 SCON0.5 SCON0.6 SCON0.7     9F\par
        P2      A0      P2.0    P2.1    P2.2    P2.3        A3\par
                A4      P2.4    P2.5    P2.6    P2.7        A7\par
        IE      A8      IE.0    IE.1    IE.2    IE.3        AB\par
                AC      IE.4    IE.5    EI.6    IE.7        AF\par
        P3      B0      P3.0    P3.1    P3.2    P3.3        B3\par
                B4      P3.4    P3.5    P3.6    P3.7        B7\par
        IP      B8      IP.0    IP.1    IP.2    IP.3        BB\par
                BC      IP.4    IP.5    IP.6    IP.7        BF\par
        SCON1   C0      SCON1.0 SCON1.1 SCON1.2 SCON1.3     C3\par
                C4      SCON1.4 SCON1.5 SCON1.6 SCON1.7     C7\par
        T2CON   C8      T2CON.0 T2CON.1 T2CON.2 T2CON.3     CB\par
                CC      T2CON.4 T2CON.5 T2CON.6 T2CON.7     CF\par
        PSW     D0      PSW.0   PSW.1   PSW.2   PSW.3       D3\par
                D4      PSW.4   PSW.5   PSW.6   PSW.7       D7\par
        WDCON   D8      WDCON.0 WDCON.1 WDCON.2 WDCON.3     DB\par
                DC      WDCON.4 WDCON.5 WDCON.6 WDCON.7     DF\par
        ACC     E0      ACC.0   ACC.1   ACC.2   ACC.3       E3\par
                E4      ACC.4   ACC.5   ACC.6   ACC.7       E7\par
        EIE     E8      EIE.0   EIE.1   EIE.2   EIE.3       EB\par
                EC      EIE.4   EIE.5   EIE.6   EIE.7       EF\par
        B       F0      B.0     B.1     B.2     B.3         F3\par
                F4      B.4     B.5     B.6     B.7         F7\par
        EIP     F8      EIP.0   EIP.1   EIP.2   EIP.3       FB\par
                FC      EIP.4   EIP.5   EIP.6   EIP.7       FF\par
        \par
                        Alternates:\par
        \par
        SCON    98      SCON.0  SCON.1  SCON.2  SCON.3      9B\par
                9C      SCON.4  SCON.5  SCON.6  SCON.7      9F\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-33\par
        DS83C530/DS87C530 SPECIAL FUNCTION REGISTERS\par
\par
\par
        AZ.10.3  Bit Addressable Registers:  Specific \par
\par
                        ---------- 4 BITS ----------\par
                        ----    ----    ----    ----\par
                80                                          83\par
                84                                          87\par
        TCON    88      IT0     IE0     IT1     IE1         8B\par
                8C      TR0     TF0     TR1     TF1         8F\par
                90                                          93\par
                94                                          97\par
        SCON0   98      RI_0    TI_0    RB8_0   TB8_0       9B\par
                9C      REN_0   SM2_0   SM1_0   SMO_0       9F\par
                A0                                          A3\par
                A4                                          A7\par
        IE      A8      EX0     ET0     EX1     ET1         AB\par
                AC      ES0     ET2     ES1     EA          AF\par
                B0                                          B3\par
                B4                                          B7\par
        IP      B8      PX0     PT0     PX1     PT1         BB\par
                BC      PS0     PT2     PS1                 BF\par
        SCON1   C0      RI_1    TI_1    RB8_1   TB8_1       C3\par
                C4      REN_1   SM2_1   SM1_1   SMO_1       C7\par
        T2CON   C8      CPRL2   CT2     TR2     EXEN2       CB\par
                CC      TCLK    RCLK    EXF2    TF2         CF\par
        PSW     D0      P       FL      OV      RS0         D3\par
                D4      RS1     F0      AC      CY          D7\par
        WDCON   D8      RWT     EWT     WTRF    WDIF        DB\par
                DC      PFI     EPFI    POR     SMOD_1      DF\par
                E0                                          E3\par
                E4                                          E7\par
        EIE     E8      EX2     EX3     EX4     EX5         EB\par
                EC      EWDI    ERTCI                       EF\par
                F0                                          F3\par
                F4                                          F7\par
        EIP     F8      PX2     PX3     PX4     PX5         FB\par
                FC      PWDI    PRTCI                       FF\par
        \par
                Alternates:\par
        \par
        SCON    98      RI      TI      RB8     TB8         9B\par
                9C      REN     SM2     SM1     SMO         9F\par
        SCON    98                                          9B\par
                9C                              FE          9F\par
        SCON0   98                                          9B\par
                9C                              FE_0        9F\par
        SCON1   C0                                          C3\par
                C4                              FE_1        C7\par
        T2CON   C8      CP_RL2  C_T2                        CB\par
                CC                                          CF\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-34\par
        DS83C530/DS87C530 SPECIAL FUNCTION REGISTERS\par
\par
\par
        AZ.10.4  Optional Symbols:  Control Bits \par
\par
                        ---------- 4 BITS ----------\par
                        ----    ----    ----    ----\par
                        0x80    0x40    0x20    0x10\par
                        0x08    0x04    0x02    0x10\par
                        ----    ----    ----    ----\par
        DPS     0x80                                        0x10\par
                0x08                            SEL         0x01\par
        PCON    0x80    SMOD_0  SMOD0                       0x10\par
                0x08    GF1     GF0     STOP    IDLE        0x01\par
        TMOD    0x80    T1GATE  T1C_T   T1M1    T1M0        0x10\par
                0x08    T0GATE  T0C_T   T0M1    T0M0        0x01\par
        CKCON   0x80    WD1     WD0     T2M     T1M         0x10\par
                0x08    T0M     MD2     MD1     MD0         0x01\par
        EXIF    0x80    IE5     IE4     IE3     IE          0x10\par
                0x08    XT_RG   RGMD    RGSL    BGS         0x01\par
        TRIM    0x80    E4K     X12_6   TRM2    _TRM2       0x10\par
                0x08    TRM1    _TRM1   TRM0    _TRM0       0x01\par
        SBUF1   0x80    SB7     SB6     SB5     SB4         0x10\par
                0x08    SB3     SB2     SB1     SB0         0x01\par
        ROMSIZE 0x80                                        0x10\par
                0x08            RMS2    RMS1    RMS0        0x01\par
        PMR     0x80    CD1     CD0     SWB                 0x10\par
                0x08    XTOFF   ALEOFF  DME1    DME0        0x01\par
        STATUS  0x80    PIP     HIP     LIP     XTUP        0x10\par
                0x08    SPTA1   SPRA1   SPTA0   SPRA0       0x01\par
        T2MOD   0x80                                        0x10\par
                0x08                    T2OE    DCEN        0x01\par
        RTCC    0x80    SSCE    SCE     MCE     HCE         0x10\par
                0x08    RTCRE   RTCWE   RTCIF   RTCE        0x01\par
        \par
                Alternates:\par
        \par
        PCON    0x80    SMOD                                0x10\par
                0x08                                        0x01\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-35\par
        DS83C530/DS87C530 SPECIAL FUNCTION REGISTERS\par
\par
\par
        AZ.11  DS83C550/DS87C550 SPECIAL FUNCTION REGISTERS \par
\par
\par
           The DS83C550/DS87C550 Special Function Registers are selected\par
        using the .DS83C550 or DS87C550 assembler directives.  \par
\par
\par
        AZ.11.1  SFR Map \par
\par
                        --------- 4 Bytes ----------\par
                        ----    ----    ----    ----\par
                80      PORT0   SP      DPL     DPH         83\par
                84      DPL1    DPH1    DPS     PCON        87\par
                88      TCON    TMOD    TL0     TL1         8B\par
                8C      TH0     TH1     CKCON               8F\par
                90      PORT1   RCON                        93\par
                94                                          97\par
                98      SCON0   SBUF0                       9B\par
                9C                              PMR         9F\par
                A0      PORT2   SADDR0  SADDR1              A3\par
                A4                                          A7\par
                A8      IE      CMPL0   CMPL1   CMPL2       AB\par
                AC      CPTL0   CPTL1   CPTL2   CPTL3       AF\par
                B0      PORT3           ADCON1  ADCON2      B3\par
                B4      ADMSB   ADLSD   WINHI   WINLO       B7\par
                B8      IP      SADEN0  SADEN1              BB\par
                BC                      T2CON   T2MOD       BF\par
                C0      PORT4           ROMSIZE             C3\par
                C4      PORT5   STATUS          TA          C7\par
                C8      T2IR    CMPH0   CMPH1   CMPH2       CB\par
                CC      CPTH0   CPTH1   CPTH2   CPTH3       CF\par
                D0      PSW             PW0FG   PW1FG       D3\par
                D4      PW2FG   PW3FG   PWMADR              D7\par
                D8      SCON1   SBUF1                       DB\par
                DC      PWM0    PWM1    PWM2    PWM3        DF\par
                E0      ACC     PW01CS  PW23CS  PW01CON     E3\par
                E4      PW23CON         RLOADL  RLOADH      E7\par
                E8      EIE             T2SEL   CTCON       EB\par
                EC      TL2     TH2     SETR    RSTR        EF\par
                F0      B       PORT6                       F3\par
                F4                                          F7\par
                F8      EIP                                 FB\par
                FC                              WDCON       FF\par
        \par
                Alternates:\par
        \par
                80      P0                                  83\par
                90      P1                                  93\par
                98      SCON    SBUF                        9B\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-36\par
        DS83C550/DS87C550 SPECIAL FUNCTION REGISTERS\par
\par
\par
                A0      P2                                  A3\par
                B0      P3                                  B3\par
                C0      P4                                  C3\par
                C4      P5                                  C7\par
                F0              PORT6                       F3\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-37\par
        DS83C550/DS87C550 SPECIAL FUNCTION REGISTERS\par
\par
\par
        AZ.11.2  Bit Addressable Registers:  Generic \par
\par
                        ---------- 4 BITS ----------\par
                        ----    ----    ----    ----\par
        PORT0   80      P0.7    P0.6    P0.5    P0.4        83\par
                84      P0.3    P0.2    P0.1    P0.0        87\par
        TCON    88      TCON.0  TCON.1  TCON.2  TCON.3      8B\par
                8C      TCON.4  TCON.5  TCON.6  TCON.7      8F\par
        PORT1   90      P1.0    P1.1    P1.2    P1.3        93\par
                94      P1.4    P1.5    P1.6    P1.7        97\par
        SCON0   98      SCON0.0 SCON0.1 SCON0.2 SCON0.3     9B\par
                9C      SCON0.4 SCON0.5 SCON0.6 SCON0.7     9F\par
        PORT2   A0      P2.0    P2.1    P2.2    P2.3        A3\par
                A4      P2.4    P2.5    P2.6    P2.7        A7\par
        IE      A8      IE.0    IE.1    IE.2    IE.3        AB\par
                AC      IE.4    IE.5    EI.6    IE.7        AF\par
        PORT3   B0      P3.0    P3.1    P3.2    P3.3        B3\par
                B4      P3.4    P3.5    P3.6    P3.7        B7\par
        IP      B8      IP.0    IP.1    IP.2    IP.3        BB\par
                BC      IP.4    IP.5    IP.6    IP.7        BF\par
        PORT4   C0      P4.0    P4.1    P4.2    P4.3        C3\par
                C4      P4.4    P4.5    P4.6    P4.7        C7\par
        T2IR    C8      T2IR.0  T2IR.1  T2IR.2  T2IR.3      CB\par
                CC      T2IR.4  T2IR.5  T2IR.6  T2IR.7      CF\par
        PSW     D0      PSW.0   PSW.1   PSW.2   PSW.3       D3\par
                D4      PSW.4   PSW.5   PSW.6   PSW.7       D7\par
        SCON1   D8      SCON1.0 SCON1.1 SCON1.2 SCON1.3     DB\par
                DC      SCON1.4 SCON1.5 SCON1.6 SCON1.7     DF\par
        ACC     E0      ACC.0   ACC.1   ACC.2   ACC.3       E3\par
                E4      ACC.4   ACC.5   ACC.6   ACC.7       E7\par
        EIE     E8      EIE.0   EIE.1   EIE.2   EIE.3       EB\par
                EC      EIE.4   EIE.5   EIE.6   EIE.7       EF\par
        B       F0      B.0     B.1     B.2     B.3         F3\par
                F4      B.4     B.5     B.6     B.7         F7\par
        EIP     F8      EIP.0   EIP.1   EIP.2   EIP.3       FB\par
                FC      EIP.4   EIP.5   EIP.6   EIP.7       FF\par
        \par
                        Alternates:\par
        \par
        PORT0   80      PORT0.7 PORT0.6 PORT0.5 PORT0.4     83\par
                84      PORT0.3 PORT0.2 PORT0.1 PORT0.0     87\par
        PORT1   90      PORT1.0 PORT1.1 PORT1.2 PORT1.3     93\par
                94      PORT1.4 PORT1.5 PORT1.6 PORT1.7     97\par
        SCON    98      SCON.0  SCON.1  SCON.2  SCON.3      9B\par
                9C      SCON.4  SCON.5  SCON.6  SCON.7      9F\par
        PORT2   A0      PORT2.0 PORT2.1 PORT2.2 PORT2.3     A3\par
                A4      PORT2.4 PORT2.5 PORT2.6 PORT2.7     A7\par
        PORT3   B0      PORT3.0 PORT3.1 PORT3.2 PORT3.3     B3\par
                B4      PORT3.4 PORT3.5 PORT3.6 PORT3.7     B7\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-38\par
        DS83C550/DS87C550 SPECIAL FUNCTION REGISTERS\par
\par
\par
        PORT4   C0      PORT4.0 PORT4.1 PORT4.2 PORT4.3     C3\par
                C4      PORT4.4 PORT4.5 PORT4.6 PORT4.7     C7\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-39\par
        DS83C550/DS87C550 SPECIAL FUNCTION REGISTERS\par
\par
\par
        AZ.11.3  Bit Addressable Registers:  Specific \par
\par
                        ---------- 4 BITS ----------\par
                        ----    ----    ----    ----\par
                80                                          83\par
                84                                          87\par
        TCON    88      IT0     IE0     IT1     IE1         8B\par
                8C      TR0     TF0     TR1     TF1         8F\par
                90                                          93\par
                94                                          97\par
        SCON0   98      RI_0    TI_0    RB8_0   TB8_0       9B\par
                9C      REN_0   SM2_0   SM1_0   SMO_0       9F\par
                A0                                          A3\par
                A4                                          A7\par
        IE      A8      EX0     ET0     EX1     ET1         AB\par
                AC      ES0     ET2     ES1     EA          AF\par
                B0                                          B3\par
                B4                                          B7\par
        IP      B8      PX0     PT0     PX1     PT1         BB\par
                BC      PS0     PS1     PAD                 BF\par
        PORT4   C0      CMSR0   CMSR1   CMSR2   CMSR3       C3\par
                C4      CMSR4   CMSR5   CMT0    CMT1        C7\par
        T2IR    C8      CF0     CF1     CF2     CF3         CB\par
                CC      CM0F    CM1F    CM2F                CF\par
        PSW     D0      P       FL      OV      RS0         D3\par
                D4      RS1     F0      AC      CY          D7\par
        SCON1   D8      RI_1    TI_1    RB8_1   TB8_1       DB\par
                DC      REN_1   SM2_1   SM1_1   SMO_1       DF\par
                E0                                          E3\par
                E4                                          E7\par
        EIE     E8      EX2     EX3     EX4     EX5         EB\par
                EC      ECM0    ECM1    ECM2    ET2         EF\par
                F0                                          F3\par
                F4                                          F7\par
        EIP     F8      PX2     PX3     PX4     PX5         FB\par
                FC      PCM0    PCM1    PCM2    PT2         FF\par
        \par
                Alternates:\par
        \par
        SCON    98      RI      TI      RB8     TB8         9B\par
                9C      REN     SM2     SM1     SMO         9F\par
        SCON    98                                          9B\par
                9C                              FE          9F\par
        SCON0   98                                          9B\par
                9C                              FE_0        9F\par
        T2IR    C8      IE2     IE3     IE4     IE5         CB\par
                CC                                          CF\par
        SCON1   D8                                          DB\par
                DC                              FE_1        DF\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-40\par
        DS83C550/DS87C550 SPECIAL FUNCTION REGISTERS\par
\par
\par
        EIE     E8      EC0     EC1     EC2     EC3         EB\par
                EC                                          EF\par
        EIP     F8      PC0     PC1     PC2     PC3         FB\par
                FC                                          FF\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-41\par
        DS83C550/DS87C550 SPECIAL FUNCTION REGISTERS\par
\par
\par
        AZ.11.4  Optional Symbols:  Control Bits \par
\par
                        ---------- 4 BITS ----------\par
                        ----    ----    ----    ----\par
                        0x80    0x40    0x20    0x10\par
                        0x08    0x04    0x02    0x10\par
                        ----    ----    ----    ----\par
        DPS     0x80    ID1     ID0     TSL                 0x10\par
                0x08                            SEL         0x01\par
        PCON    0x80    SMOD_0  SMOD0                       0x10\par
                0x08    GF1     GF0     STOP    IDLE        0x01\par
        TMOD    0x80    T1GATE  T1C_T   T1M1    T1M0        0x10\par
                0x08    T0GATE  T0C_T   T0M1    T0M0        0x01\par
        CKCON   0x80    WD1     WD0     T2M     T1M         0x10\par
                0x08    T0M     MD2     MD1     MD0         0x01\par
        RCON    0x80                                        0x10\par
                0x08    CKRDY   RGMD    RGSL    BGS         0x01\par
        PMR     0x80    CD1     CD0     SWB     CTM         0x10\par
                0x08    4X_2X   ALEOFF  DEM1    DEM0        0x01\par
        ADCON1  0x80   STRT_BSY EOC     CONT_SS ADEX        0x10\par
                0x08    WCQ     WCM     ADON    WCIO        0x01\par
        ADCON2  0x80    OUTCF   MUX2    MUX1    MUX0        0x10\par
                0x08    APS3    APS2    APS1    APS0        0x01\par
        T2CON   0x80    TF2     EXF2    RCLK    TCLK        0x10\par
                0x08    EXEN2   TR2     CT2     CPRL2       0x01\par
        T2MOD   0x80                                        0x10\par
                0x08                    T2OE    DCEN        0x01\par
        PORT5   0x80    ADC7    ADC6    ADC5    ADC4        0x10\par
                0x08    ADC3    ADC2    ADC1    ADC0        0x01\par
        ROMSIZE 0x80                                        0x10\par
                0x08            RMS2    RMS1    RMS0        0x01\par
        STATUS  0x80    PIP     HIP     LIP     XTUP        0x10\par
                0x08    SPTA1   SPRA1   SPTA0   SPRA0       0x01\par
        PWMADR  0x80    ADRS                                0x10\par
                0x08                    PWE1    PWE0        0x01\par
        PW01CS  0x80    PW0S2   PW0S1   PW0S0   PW0EN       0x10\par
                0x08    PW1S2   PW1S1   PW1S0   PW1EN       0x01\par
        PW23CS  0x80    PW2S2   PW2S1   PW2S0   PW2EN       0x10\par
                0x08    PW3S2   PW3S1   PW3S0   PW3EN       0x01\par
        PW01CON 0x80    PW0F    PW0DC   PW0OE   PW0T_C      0x10\par
                0x08    PW1F    PW1DC   PW1OE   PW1T_C      0x01\par
        PW23CON 0x80    PW2F    PW2DC   PW2OE   PW2T_C      0x10\par
                0x08    PW3F    PW3DC   PW3OE   PW3T_C      0x01\par
        T2SEL   0x80    TF2S    TF2BS           TF2B        0x10\par
                0x08                    T2P1    T2P0        0x01\par
        CTCON   0x80    _CT3    CT3     _CT2    CT2         0x10\par
                0x08    _CT1    CT1     _CT0    CT0         0x01\par
        SETR    0x80    TGFF1   TGFF0   CMS5    CMS4       0x10\par
                0x08    CMS3    CMS2    CMS1    CMS0        0x01\par
\page\par
\par
        AS8XCXXX ASSEMBLER                                    PAGE AZ-42\par
        DS83C550/DS87C550 SPECIAL FUNCTION REGISTERS\par
\par
\par
        RSTR    0x80    CMTE1   CMTE0   CMR5    CMR4        0x10\par
                0x08    CMR3    CMR2    CMR1    CMR0        0x01\par
        PORT6   0x80    STADC           PWMC1   PWMC0       0x10\par
                0x08    PWMO3   PWMO2   PWMO1   PWMO0       0x01\par
        WDCON   0x80    SMOD_1  POR     EPF1    PF1         0x10\par
                0x08    WDIF    WTRF    EWT     RWT         0x01\par
        \par
                Alternates:\par
        \par
        PCON    0x80    SMOD                                0x10\par
                0x08                                        0x01\par
        T2CON   0x80                                        0x10\par
                0x08                    C_T2    _RL2        0x01\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX BA\cf1\par
\par
                                 \cf2 ASAVR ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        BA.1  AVR ASSEMBLER NOTES \par
\par
        The  AVR  series  of  processors  uses  a non unified addressing\par
        scheme:  the instruction addressing is 1 per  instruction  word,\par
        each  instruction uses 2 bytes of memory.  The processor data is\par
        addressed as 1 per byte of data.  To properly address  the  pro-\par
        gram/data spaces you, the programmer, must seperate your program\par
        and data into seperate code and data areas.  The  data  area  is\par
        addressed  as 1 per byte and the code area is addressed as 1 per\par
        word.  \par
\par
           The  assembler/linker  processes the instruction code so that\par
        the linker will output 2 bytes for each instruction  word.   The\par
        instruction  word  address  will  be  the  file  encoded address\par
        divided by 2.  \par
\par
           The  default  address  space  is assumed to be 64K (16-bits).\par
        The larger address space (ATmega...) processors must specify the\par
        32-Bit  addressing assembler directive '.32bit' in order to pro-\par
        cess the JMP instruction.  \par
\par
\par
\page\par
\par
        ASAVR ASSEMBLER                                        PAGE BA-2\par
        AVR ASSEMBLER NOTES\par
\par
\par
        BA.1.1  Processor Specific Directives \par
\par
\par
           The  normal PC relative addressing is -2047 to +2048 relative\par
        to the current PC.  For a processor with less than 4K  words  of\par
        program space the AVR relative jump/call can access any location\par
        due to address wrap around.  \par
\par
           The  ASAVR cross assembler has one (1) processor specific as-\par
        sembler directive which tells the assembler that the AVR has  4K\par
        words or less of program space.  \par
\par
                .avr_4k   0     Normal PC Relative addressing\par
                .avr_4k   1     AVR with <= 4K of Memory\par
\par
           The  remaining  processor specific directives specify the AVR\par
        processor type.  \par
\par
                .AT90SXXXX\par
                .AT90S1200\par
                .AT90S2313\par
                .AT90S2323\par
                .AT90S2343\par
                .AT90S2333\par
                .AT90S4433\par
                .AT90S4414\par
                .AT90S4434\par
                .AT90S8515\par
                .AT90C8534\par
                .AT90S8535\par
                .ATmega103\par
                .ATmega603\par
                .ATmega161\par
                .ATmega163\par
                .ATtiny10\par
                .ATtiny11\par
                .ATtiny12\par
                .ATtiny15\par
                .ATtiny22\par
                .ATtiny28\par
\par
           A  file, avr.sfr, contains definitions for the Spepcial Func-\par
        tion Registers for all the defined processors.  Edit the file to\par
        make  your  selection of processor and then .include the file at\par
        the beginning of your assembler file.  \par
\par
\par
\page\par
\par
        ASAVR ASSEMBLER                                        PAGE BA-3\par
        AVR ASSEMBLER NOTES\par
\par
\par
        BA.1.2  The .__.CPU.  Variable \par
\par
\par
           The value of the pre-defined symbol '.__.CPU.' corresponds to\par
        the selected processor type.  The default value is 0 which  cor-\par
        responds  to  the  default  processor type.  The following table\par
        lists the processor types and associated values  for  the  ASAVR\par
        assembler:  \par
\par
                Processor Type            .__.CPU. Value\par
                --------------            --------------\par
                 Undefined                       0\par
                 AT90SXXXX (User Defined)        1\par
                 AT90S1200                       2\par
                 AT90S2313                       3\par
                 AT90S2323                       4\par
                 AT90S2343                       5\par
                 AT90S2333                       6\par
                 AT90S4433                       7\par
                 AT90S4414                       8\par
                 AT90S4434                       9\par
                 AT90S8515                      10\par
                 AT90C8534                      11\par
                 AT90S8535                      12\par
                 ATmega103                      13\par
                 ATmega603                      14\par
                 ATmega161                      15\par
                 ATmega163                      16\par
                 ATtiny10                       17\par
                 ATtiny11                       18\par
                 ATtiny12                       19\par
                 ATtiny15                       20\par
                 ATtiny22                       21\par
                 ATtiny28                       22\par
\par
\par
           The  variable  '.__.CPU.'  is by default defined as local and\par
        will not be output to the created .rel file.  The assembler com-\par
        mand line options -g or -a will not cause the local symbol to be\par
        output to the created .rel file.  \par
\par
           The  assembler  .globl  directive  may  be used to change the\par
        variable type to global causing its definition to be  output  to\par
        the  .rel file.  The inclusion of the definition of the variable\par
        '.__.CPU.' might be a useful means of validating that seperately\par
        assembled  files have been compiled for the same processor type.\par
        The linker will report an error for variables with multiple  non\par
        equal definitions.  \par
\par
\page\par
\par
        ASAVR ASSEMBLER                                        PAGE BA-4\par
        AVR REGISTER SET\par
\par
\par
        BA.2  AVR REGISTER SET \par
\par
        The following is a list of the AVR registers used by ASAVR:  \par
\par
                r0-r31  -       8-bit registers\par
                x       -       index register (x = r27:r26)\par
                y       -       index register (y = r29:r28)\par
                z       -       index register (z = r31:r30)\par
\par
\par
        BA.3  AVR INSTRUCTION SET \par
\par
\par
           The following tables list all AVR mnemonics recognized by the\par
        ASAVR assembler.  The designation [] refers to  a  required  ad-\par
        dressing mode argument.  The following list specifies the format\par
        for each addressing mode supported by ASAVR:  \par
\par
                #data           immediate data\par
        \par
                expr            expression\par
        \par
                Rd              destination register (0-31)\par
        \par
                Rd,Rs           destination register (0-31)\par
                                source register (0-31)\par
        \par
                Rd,#data        destination register (0-31)\par
                                immediate data\par
        \par
                addr            address\par
        \par
                addr,Rs         destination address\par
                                source register\par
        \par
                Rd,addr         destination register\par
                                source address\par
        \par
                Rs,b            source register\par
                                bit position\par
        \par
                Rd,b            destination register\par
                                bit position\par
        \par
                A               an I/O register (0-31)\par
        \par
                A,b             an I/O register (0-31)\par
                                bit position\par
        \par
\page\par
\par
        ASAVR ASSEMBLER                                        PAGE BA-5\par
        AVR INSTRUCTION SET\par
\par
\par
                A,Rs            source register to\par
                                output register\par
        \par
                Rd,A            input register to\par
                                destination register\par
        \par
                Rd,X            load indirect\par
                Rd,Y\par
                Rd,Z\par
        \par
                Rd,-X           load indirect pre-decrement\par
                Rd,-Y\par
                Rd,-Z\par
        \par
                Rd,X+           load indirect post-increment\par
                Rd,Y+\par
                Rd,Z+\par
        \par
                Rd,Z+Q          load indirect with displacement\par
        \par
                X,Rs            store indirect\par
                Y,Rs\par
                Z,Rs\par
        \par
                -X,Rs           store indirect pre-decrement\par
                -Y,Rs\par
                -Z,Rs\par
        \par
                X+,Rs           store indirect post increment\par
                Y+,Rs\par
                Z+,Rs\par
        \par
                Z+Q,Rs          store indirect with displacement\par
        \par
                label           branch label\par
\par
        The  terms  data, expr, displacement, bit position, A, and label\par
        may be expressions.  \par
\par
           Note  that not all instructions are available with every pro-\par
        cessor type.  Not all addressing modes are valid with every  in-\par
        struction,   refer   to   the   AVR  technical  data  for  valid\par
        instructions and modes.  \par
\page\par
\par
        ASAVR ASSEMBLER                                        PAGE BA-6\par
        AVR INSTRUCTION SET\par
\par
\par
        BA.3.1  AVR Arithmetic and Logical Instructions \par
\par
                add     Rd,Rs           adc     Rd,Rs\par
                adiw    Rd,#data        sub     Rd,Rs\par
                subi    Rd,#data        sbc     Rd,Rs\par
                sbci    Rd,#data        sbiw    Rd,#data\par
                and     Rd,Rs           andi    Rd,#data\par
                or      Rd,Rs           ori     Rd,#data\par
                cp      Rd,Rs           eor     Rd,Rs\par
                cpi     Rd,#data        cpc     Rd,Rs\par
                cbr     Rd,#data        sbr     Rd,#data\par
                clr     Rd              com     Rd\par
                dec     Rd              inc     Rd\par
                neg     Rd              ser     Rd\par
                tst     Rd\par
                mul     Rd,Rs           fmul    Rd,Rs\par
                muls    Rd,Rs           fmuls   Rd,Rs\par
                mulsu   Rd,Rs           fmulsu  Rd,Rs\par
\par
\par
        BA.3.2  AVR Bit and Bit-Test Instructions \par
\par
                lsl     Rd              lsr     Rd\par
                rol     Rd              ror     Rd\par
                asr     Rd              swap    Rd\par
                bset    b               bclr    b\par
                sbi     A,b             cbi     A,b\par
                bst     Rs,b            bld     Rd,b\par
                sec                     sez\par
                sen                     sev\par
                ses                     seh\par
                set                     sei\par
                clc                     clz\par
                cln                     clv\par
                cls                     clh\par
                clt                     cli\par
                nop                     sleep\par
                wdr\par
\par
\par
\page\par
\par
        ASAVR ASSEMBLER                                        PAGE BA-7\par
        AVR INSTRUCTION SET\par
\par
\par
        BA.3.3  AVR Skip on Test Instructions \par
\par
                cpse    Rd,Rs\par
                sbrc    Rs,b            sbrs    Rs,b\par
                sbic    A,b             sbis    A,b\par
\par
\par
        BA.3.4  AVR Jump/Call/Return Instructions \par
\par
                jmp     addr            rjmp    addr\par
                ijmp                    eijmp\par
                call    addr            rcall   addr\par
                icall                   eicall\par
                ret                     reti\par
\par
\par
        BA.3.5  AVR Short Branch Instructions \par
\par
                brcc    label           brcs    label\par
                breq    label           brge    label\par
                brhc    label           brhs    label\par
                brid    label           brie    label\par
                brlo    label           brlt    label\par
                brmi    label           brne    label\par
                brpl    label           brsh    label\par
                brtc    label           brts    label\par
                brvc    label           brvs    label\par
\par
\par
        BA.3.6  AVR Short Branch Instructions with Bit Test \par
\par
                brbc    b,label         brbs    b,label\par
\par
\par
        BA.3.7  AVR Data Transfer Instructions \par
\par
                mov     Rd,Rs           movw    Rd,Rs\par
                ldi     Rd,#data\par
                ld      []              st      []\par
                ldd     []              std     []\par
                lds     Rd,addr         sts     addr,Rs\par
                lpm     []              elpm    []\par
                spm\par
                push    Rs              pop     Rd\par
                in      Rd,A            out     A,Rs\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX BB\cf1\par
\par
                                \cf2 ASEZ80 ASSEMBLER\cf1  \par
\par
\par
\par
\par
\par
        BB.1  ACKNOWLEDGMENT \par
\par
        Thanks  to Patrick Head for his contribution of the ASEZ80 cross\par
        assembler.  \par
\par
           Patrick Head\par
        \par
                patrick at phead dot net\par
\par
\par
\par
\par
        BB.2  PROCESSOR SPECIFIC DIRECTIVES \par
\par
\par
           The  ASEZ80 assembler is a port of the ASZ80 assembler.  This\par
        assembler can process EZ80 code in Z80 and ADL modes in any com-\par
        bination  within  the  source  file.   The  following  processor\par
        specific assembler directives specify which mode  the  assembler\par
        is  to  process  the assembler source code.  The default mode of\par
        the assembler is Z80.  \par
\par
\par
\page\par
\par
        ASEZ80 ASSEMBLER                                       PAGE BB-2\par
        PROCESSOR SPECIFIC DIRECTIVES \par
\par
\par
        BB.2.1  .z80 Directive \par
\par
        Format:  \par
\par
                .z80    (value) \par
\par
        The  .z80  directive  without an argument selects the 16-bit Z80\par
        compatible mode of the EZ80 processor.  The .z80 directive  with\par
        the  optional argument may be used to select the Z80 16-Bit mode\par
        (value != 0) or the EZ80 24-bit  mode  (value == 0).   Mnemonics\par
        not allowed in the selected mode will generate <m> (mode) and/or\par
        <a> (addressing) errors.  \par
\par
\par
        BB.2.2  .adl Directive \par
\par
        Format:  \par
\par
                .adl    (value) \par
\par
        The  .adl  directive without an argument selects the 24-bit EZ80\par
        mode of the EZ80 processor.  The .adl  directive  with  the  op-\par
        tional  argument  may  be  used  to  select the EZ80 24-Bit mode\par
        (value != 0) or the Z80 16-bit mode (value == 0).  Mnemonics not\par
        allowed in the selected mode will generate <m> (mode) and/or <a>\par
        (addressing) errors.  \par
\par
\par
        BB.2.3  .msb Directive \par
\par
        Format:  \par
\par
                .msb    n \par
\par
\par
           The  assembler operator '>' selects the upper byte (MSB) when\par
        included in an assembler instruction.  The normal assembler mode\par
        is  to select bits <15:8> as the MSB.  The .msb directive allows\par
        the programmer to specify a particular byte as  the  'MSB'  when\par
        the address space is larger than 16-bits.  \par
\par
           For a 24-bit EZ80 address the assembler directive .msb n con-\par
        figures the assembler to select a particular byte as MSB.  Given\par
        a  24-bit  address  of  Mmn (M is <23:16>, m is <15:8>, and n is\par
        <7:0>) the following examples show how to  select  a  particular\par
        address byte:  \par
\par
                .msb 1          ;select byte 1 of address\par
        <M(2):m(1):n(0)>\par
\page\par
\par
        ASEZ80 ASSEMBLER                                       PAGE BB-3\par
        PROCESSOR SPECIFIC DIRECTIVES \par
\par
\par
                LD A,>Mmn       ;byte m <15:8> ==>> A\par
                ...\par
        \par
                .msb 2          ;select byte 2 of address\par
        <M(2):m(1):n(0)>\par
                LD A,>Mmn       ;byte M <23:16> ==>> A\par
                LD MB,A         ;place in MBASE register\par
\page\par
\par
        ASEZ80 ASSEMBLER                                       PAGE BB-4\par
        PROCESSOR SPECIFIC DIRECTIVES \par
\par
\par
        BB.3  EZ80 ADDRESSING AND INSTRUCTIONS \par
\par
\par
\par
        BB.3.1  Instruction Symbols \par
\par
\par
        b          Bit select\par
                        (000 = bit 0, 001 = bit 1,\par
                         010 = bit 2, 011 = bit 3,\par
                         100 = bit 4, 101 = bit 5,\par
                         110 = bit 6, 111 = bit 7)\par
        cc         condition code C, NC, Z, NZ, P, M, PE, PO\par
                   test of single bit in FLAGS register\par
        cc'        condition code C, NC, Z, NZ\par
                   test of single bit in FLAGS register\par
        d          an 8-bit two's complement displacement with\par
                   value from -128 to 127.\par
        I          Interrupt Page Address Register\par
        ir or ir'  8-bit CPU register IXH(IX:[15:8]),\par
                   IXL (IX:[7:0], IYH (IY:[15:8]), IYL (IY:[7:0])\par
        IX/Y       CPU register IX or IY\par
        (IX/Y+d)   A location in memory with address formed by the\par
                   sum of the contents of the Index Register, IX\par
                   or IY, and the two's complement displacement d.\par
        MB         Z80 Memory Mode Base Address Register\par
        Mmn        A 24-bit immediate data value\par
        (Mmn)      A 24-bit value indicating a location in\par
                   memory at this address.\par
        mn         A 16-bit immediate data value\par
        (mn)       A 16-bit value indicating a location in\par
                   memory at this address.\par
        n          8-bit immediate data value\par
        R          Refresh Counter Register\par
        r or r'    8-bit CPU register A, B, C, D, E, H, L\par
        rr         16 or 24-bit CPU register BC, DE, HL\par
        rxy        16 or 24-bit CPU register BC, DE, HL, IX, IY\par
        SP         Stack Pointer, Can indicate either the\par
                   StackPointer Short register (SPS) or the\par
                   StackPointer Long register (SPL).\par
\page\par
\par
        ASEZ80 ASSEMBLER                                       PAGE BB-5\par
        EZ80 ADDRESSING AND INSTRUCTIONS \par
\par
\par
                C  -    carry bit set\par
                NC -    carry bit clear\par
                Z  -    zero bit set\par
                NZ -    zero bit clear\par
                M  -    sign bit set\par
                P  -    sign bit clear\par
                PE -    parity even\par
                PO -    parity odd\par
\par
\par
        The terms b, d, Mmn, mn, n, and ss may all be expressions.  \par
\page\par
\par
        ASEZ80 ASSEMBLER                                       PAGE BB-6\par
        EZ80 ADDRESSING AND INSTRUCTIONS \par
\par
\par
        BB.3.2  EZ80 Instructions \par
\par
\par
           The  following list of instructions (with explicit addressing\par
        modes) are available for the EZ80.  \par
\par
        ADC A,(HL)              DEC (HL)                INI\par
        ADC A,ir                DEC ir                  INI2\par
        ADC A,(IX/Y+d)          DEC IX/Y                INI2R\par
        ADC A,n                 DEC (IX/Y+d)\par
        ADC A,r                 DEC r                   INIM\par
        ADC HL,rr               DEC rr                  INIMR\par
        ADC HL,SP               DEC SP\par
                                                        INIR\par
        ADD A,(HL)              DI                      INIRX\par
        ADD A,ir\par
        ADD A,(IX/Y+d)          DJNZ d                  JP cc,Mmn\par
        ADD A,n                                         JP HL\par
        ADD A,r                 EI                      JP IX/Y\par
        ADD HL,rr                                       JP Mmn\par
        ADD HL,SP               EX AF,AF'\par
        ADD IX/Y,rxy            EX DE,HL                JR cc',d\par
        ADD IX/Y,SP             EX (SP),HL              JR d\par
                                EX (SP),IX/Y\par
        AND A,HL                                        LD A,I\par
        AND A,ir                EXX                     LD A,(IX/Y+d)\par
        AND A,(IX/Y+d)                                  LD A,MB\par
        AND A,n                 HALT                    LD A,(Mmn)\par
        AND A,r                                         LD A,R\par
                                IM n                    LD A,(rr)\par
        BIT b,(HL)              IM A,(n)                LD (HL),IX/Y\par
        BIT b, (IX/Y+d)         IN r,(BC)               LD (HL),n\par
        BIT b,r                                         LD (HL),r\par
                                IN0 r,(n)               LD (HL),rr\par
        CALL cc,Mmn                                     LD IY,(SP+n)\par
        CALL mn                 INC (HL)                LD I,HL\par
                                INC ir                  LD I,A\par
        CP A,(HL)               INC IX/Y                LD ir,ir'\par
        CP A,ir                 INC (IX/Y+d)            LD ir,n\par
        CP A,(IX/Y+d)           INC r                   LD ir,r\par
        CP A,r                  INC SP                  LD IX/Y,(HL)\par
                                                        LD IX/Y,(IX/Y+d)\par
        CPD                     IND                     LD IX/Y,Mmn\par
        CPDR                    IND2                    LD IX/Y,(Mmn)\par
                                IND2R                   LD (IX/Y+d),IX/Y\par
        CPI                                             LD (IX/Y+d),n\par
        CPIR                    INDM                    LD (IX/Y+d),r\par
                                INDMR                   LD (IX/Y+d),rr\par
        CPL                                             LD MB,A\par
\page\par
\par
        ASEZ80 ASSEMBLER                                       PAGE BB-7\par
        EZ80 ADDRESSING AND INSTRUCTIONS \par
\par
\par
                                INDR                    LD (Mmn),A\par
        DAA                     INDRX                   LD (Mmn),IX/Y\par
\page\par
\par
        ASEZ80 ASSEMBLER                                       PAGE BB-8\par
        EZ80 ADDRESSING AND INSTRUCTIONS \par
\par
\par
        LD (Mmn),rr             OTDR                    RL r\par
        LD (Mmn),SP             OTDRX\par
        LD R,A                                          RLA\par
        LD r,(HL)               OTI2R\par
        LD r,ir                                         RLC (HL)\par
        LD r,(IX/Y+d)           OTIM                    RLC (IX/Y+d)\par
        LD r,n                  OTIMR                   RLC r\par
        LD r,r'\par
        LD rr,(HL)              OTIR                    RLCA\par
        LD rr,(IX/Y+d)          OTIRX\par
        LD rr,Mmn                                       RLD\par
        LD rr,(Mmn)             OUT (BC),r\par
        LD (rr),A               OUT (C),r               RR (HL)\par
        LD SP,HL                OUT (n),A               RR (IX/Y+d)\par
        LD SP,IX/Y                                      RR r\par
        LD SP,Mmn               OUTD\par
        LD SP,(Mmn)             OUTD2                   RRA\par
        \par
        LDD                     OUTI                    RRC (HL)\par
        LDDR                    OUTI2                   RRC (IX/Y+d)\par
                                RL (IX+d)               RRC r\par
        LDI                     RL (IY+d\par
        LDIR                                            RRCA\par
                                PEA IX+d\par
        LEA IX/Y,IX+d           PEA IY+d                RRD\par
        LEA IX/Y,IY+d\par
        LEA rr,IX+d             POP AF                  RSMIX\par
        LEA rr,IY+d             POP IX/Y\par
                                POP rr                  RST n\par
        MLT rr\par
        MLT SP                  PUSH AF                 SBC A,(HL)\par
                                PUSH IX/Y               SBC A,ir\par
        NEG                     PUSH rr                 SBC A,(IX/Y+d)\par
                                                        SBC A,n\par
        NOP                     RES b,(IX/Y+d)          SBC A,r\par
                                RES b,r                 SBC HL,rr\par
        OR A,(HL)                                       SBC HL,SP\par
        OR A,ir                 RET\par
        OR A,(IX/Y+d)           RET cc                  SCF\par
        OR A,n\par
        OR A,r                  RETI                    SET b,(HL)\par
                                                        SET b,(IX/Y+d)\par
        OTD2R                   RETN                    SET b,r\par
        \par
        OTDM                    RL (HL)                 SLA (HL)\par
        OTDMR                   RL (IX/Y+d)             SLA (IX/Y+d)\par
\page\par
\par
        ASEZ80 ASSEMBLER                                       PAGE BB-9\par
        EZ80 ADDRESSING AND INSTRUCTIONS \par
\par
\par
        SLA r                   STMIX                   TSTIO n\par
        \par
        SLP                     SUB A,(HL)              XOR A,(HL)\par
                                SUB A,ir                XOR A,ir\par
        SRA (HL)                SUB A,(IX/Y+d)          XOR A,(IX/Y+d)\par
        SRA (IX/Y+d)            SUB A,n                 XOR A,n\par
        SRA r                   SUB A,r                 XOR A,r\par
        \par
        SRL (HL)                TST A,(HL)\par
        SRL (IX/Y+d)            TST A,n\par
        SRL r                   TST A,r\par
\par
\par
           The  accumulator  'A' argument is optional in all of the fol-\par
        lowing instructions:  \par
\par
        ADC A,...               CP A,...                SUB A,...\par
        ADD A,...               OR A,...                TST A,...\par
        AND A,...               SBC A,...               XOR A,...\par
\par
           The  following  tables,  organized by instruction type, lists\par
        all possible EZ80/Z80  mnemonic  extensions  recognized  by  the\par
        ASEZ80  assembler.   The designation [] refers to a required ad-\par
        dressing mode argument shown in the table  above.   The  allowed\par
        mnemonic  suffixes  are  denoted within the enclosing delimiters\par
        ().  Mnemonics specified with illegal  or  unrecognized  suffixs\par
        will be flagged with <q> or <a> errors.  \par
\par
\par
        BB.3.3  Arithmetic Instructions \par
\par
                adc (.l, .s)    [],[]\par
                add (.l, .s)    [],[]\par
                cp  (.l, .s)    [],[]\par
                daa\par
                dec (.l, .s)    []\par
                inc (.l, .s)    []\par
                mlt (.l, .s)    []\par
                neg\par
                sbc (.l, .s)    [],[]\par
                sub (.l, .s)    [],[]\par
\par
\par
\page\par
\par
        ASEZ80 ASSEMBLER                                      PAGE BB-10\par
        EZ80 ADDRESSING AND INSTRUCTIONS \par
\par
\par
        BB.3.4  Bit Manipulation Instructions \par
\par
                bit (.l, .s)    [],[]\par
                res (.l, .s)    [],[]\par
                set (.l, .s)    [],[]\par
\par
\par
        BB.3.5  Block Transfer and Compare Instructions \par
\par
                cpd (.l, .s)            cpdr (.l, .s)\par
                cpi (.l, .s)            cpir (.l, .s)\par
                ldd (.l, .s)            lddr (.l, .s)\par
                ldi (.l, .s)            ldir (.l, .s)\par
\par
\par
        BB.3.6  Exchange Instructions \par
\par
                ex (.l, .s)     [],[]\par
                exx\par
\par
\par
        BB.3.7  Input/Output Instructions \par
\par
                in      [],[]           in0     [],[]\par
                ind   (.l, .s)          indr  (.l, .s)\par
                indx  (.l, .s)\par
                ind2  (.l, .s)          ind2r (.l, .s)\par
                indm  (.l, .s)          indmr (.l, .s)\par
                ini   (.l, .s)          inir  (.l, .s)\par
                inim  (.l, .s)          inimr (.l, .s)\par
                otdm  (.l, .s)          otdmr (.l, .s)\par
                otdrx (.l, .s)\par
                otim  (.l, .s)          otimr (.l, .s)\par
                otirx (.l, .s)\par
                out   (.l, .s)  [],[]\par
                out0  (.l, .s)  [],[]\par
                outd  (.l, .s)          otdr  (.l, .s)\par
                outd2 (.l, .s)          otdr2 (.l, .s)\par
                outi  (.l, .s)          otir  (.l, .s)\par
                outi2 (.l, .s)          oti2r (.l, .s)\par
                tstio   []\par
\par
\par
\page\par
\par
        ASEZ80 ASSEMBLER                                      PAGE BB-11\par
        EZ80 ADDRESSING AND INSTRUCTIONS \par
\par
\par
        BB.3.8  Load Instructions \par
\par
                ld   (.l, .s, .il, .is, .lil, .sis)     [],[]\par
                lea  (.l, .s)   []      pea  (.l, .s)   []\par
                pop  (.l, .s)   []      push (.l, .s)   []\par
\par
\par
        BB.3.9  Logical Instructions \par
\par
                and (.l, .s)    [],[]\par
                cpl (.l, .s)\par
                or  (.l, .s)    [],[]\par
                tst (.l, .s)    [],[]\par
                xor (.l, .s)    [],[]\par
\par
\par
        BB.3.10  Processor Control Instructions \par
\par
                ccf             di              ei\par
                halt            im              nop\par
                rsmix           stmix\par
                scf             slp\par
\par
\par
        BB.3.11  Program Flow Instructions \par
\par
                call (.il, .is)         []\par
                call (.il, .is)         CC,[]\par
                djnz    []\par
                jp   (.l, .s, .lil, .sis)       []\par
                jp   (.l, .s, .lil, .sis)       CC,[]\par
                jr      []\par
                jr      CC,[]\par
                ret  (.l)\par
                ret  (.l)       CC\par
                reti (.l)\par
                retn (.l)\par
                rst  (.l, .s)   []\par
\par
\par
\page\par
\par
        ASEZ80 ASSEMBLER                                      PAGE BB-12\par
        EZ80 ADDRESSING AND INSTRUCTIONS \par
\par
\par
        BB.3.12  Shift and Rotate Instructions \par
\par
                rl  (.l, .s)    []      rla\par
                rlc (.l, .s)    []      rlca\par
                rld                     rrd\par
                rr  (.l, .s)    []      rra\par
                rrc (.1, .s)    []      rrca\par
                sla (.l, .s)    []\par
                sra (.l, .s)    []\par
                srl (.l, .s)    []\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX BC\cf1\par
\par
                                \cf2 ASF2MC8 ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        BC.1  PROCESSOR SPECIFIC DIRECTIVES \par
\par
\par
           The ASF2MC8 assembler supports the F2MC8L and F2MC8FX proces-\par
        sor cores.  \par
\par
\par
        BC.1.1  .F2MC8L Directive \par
\par
        Format:  \par
\par
                .F2MC8L \par
\par
        The  .F2MC8L directive selects the F2MC8L processor cycle counts\par
        to be listed.  This is the default  selection  if  no  processor\par
        directive is specified in the source assembly file.  \par
\par
\par
        BC.1.2  .F2MC8FX Directive \par
\par
        Format:  \par
\par
                .F2MC8FX \par
\par
        The  .F2MC8FX  directive  selects  the  F2MC8FX  processor cycle\par
        counts to be listed.  .F2MC8L is the  default  selection  if  no\par
        processor directive is specified in the source assembly file.  \par
\par
\par
\page\par
\par
        ASF2MC8 ASSEMBLER                                      PAGE BC-2\par
        PROCESSOR SPECIFIC DIRECTIVES\par
\par
\par
        BC.1.3  The .__.CPU.  Variable \par
\par
\par
           The value of the pre-defined symbol '.__.CPU.' corresponds to\par
        the selected processor type.  The default value is 0 which  cor-\par
        responds  to  the  default  processor type.  The following table\par
        lists the processor types and associated values for the  ASF2MC8\par
        assembler:  \par
\par
                Processor Type            .__.CPU. Value\par
                --------------            --------------\par
                   .F2MC8L                       0\par
                   .F2MC8FX                      1\par
\par
\par
           The  variable  '.__.CPU.'  is by default defined as local and\par
        will not be output to the created .rel file.  The assembler com-\par
        mand line options -g or -a will not cause the local symbol to be\par
        output to the created .rel file.  \par
\par
           The  assembler  .globl  directive  may  be used to change the\par
        variable type to global causing its definition to be  output  to\par
        the  .rel file.  The inclusion of the definition of the variable\par
        '.__.CPU.' might be a useful means of validating that seperately\par
        assembled  files have been compiled for the same processor type.\par
        The linker will report an error for variables with multiple  non\par
        equal definitions.  \par
\par
\par
        BC.2  F2MC8L/F2MC8FX REGISTERS \par
\par
\par
           The  following  is a list of register designations recognized\par
        by the ASF2MC8 assembler:  \par
\page\par
\par
        ASF2MC8 ASSEMBLER                                      PAGE BC-3\par
        F2MC8L/F2MC8FX REGISTERS\par
\par
\par
                pc              -       Program Counter\par
        \par
                a               -       Accumulator\par
        \par
                t               -       Temporary Accumulator\par
        \par
                ix              -       Index Register\par
        \par
                ep              -       Extra Pointer\par
        \par
                sp              -       Stack Pointer\par
        \par
                ps              -       Program Status\par
        \par
                r0,r1,r2,r3,    -       Memory Registers\par
                r4,r5,r6,r7             32 banks of\par
                                        8 registers each\par
\par
\par
        BC.3  F2MC8L/F2MC8FX INSTRUCTION SET \par
\par
\par
           The  following  list specifies the format for each addressing\par
        mode supported by ASF2MC8:  \par
\page\par
\par
        ASF2MC8 ASSEMBLER                                      PAGE BC-4\par
        F2MC8L/F2MC8FX INSTRUCTION SET\par
\par
\par
                #data           immediate data\par
                                byte or word data\par
        \par
                *dir            direct page addressing\par
        \par
                *dir:b          bit addressing to a\par
                                direct page address\par
        \par
                ext             extended addressing\par
        \par
                a,t             register addressing\par
                pc,sp,ix,ep\par
        \par
                @a              accumulator indexed\par
        \par
                @ix+d           indexed addressing\par
                                plus offset\par
        \par
                @ix             indexed addressing\par
                                with a zero offset\par
        \par
                @ep             pointer addressing\par
        \par
                r               General-purpose registers\par
        \par
                label           call/jmp/branch label\par
\par
        The  terms  data,  dir,  ext, b, d, and label may all be expres-\par
        sions.  \par
\par
           Note  that  not all addressing modes are valid with every in-\par
        struction, refer to the F2MC8L/F2MC8FX technical data for  valid\par
        modes.  \par
\par
           The following tables list all F2MC8L/F2MC8FX mnemonics recog-\par
        nized by the ASF2MC8 assembler.  The designation [] refers to  a\par
        required addressing mode argument.  \par
\par
\par
\page\par
\par
        ASF2MC8 ASSEMBLER                                      PAGE BC-5\par
        F2MC8L/F2MC8FX INSTRUCTION SET\par
\par
\par
        BC.3.1  Transfer Instructions \par
\par
                mov     [],[]           movw    [],[]\par
                xch     [],[]           xchw    [],[]\par
                clrb    []              setb    []\par
                swap    []\par
\par
\par
        BC.3.2  Operation Instructions \par
\par
                addc    a(,[])          addcw   a\par
                subc    a(,[])          subcw   a\par
                inc     r               incw    []\par
                dec     r               decw    []\par
                mulu    a               divu    a\par
                and     a(,[])          andw    a\par
                cmp     a(,[])          cmpw    a\par
                or      a(,[])          orw     a\par
                xor     a(,[])          xorw    a\par
                rolc    a               rorc    a\par
                daa                     das\par
\par
\par
        BC.3.3  Branch/Jump/Call Instructions \par
\par
                bz      label           bew     label\par
                bnz     label           bne     label\par
                bc      label           blo     label\par
                bnc     label           bhs     label\par
                bn      label           bp      label\par
                blt     label           bge     label\par
                bbc     *dir:b,label    bbs     *dir:b,label\par
                jmp     []              call    label\par
                callv   #data           xchw    a,pc\par
                ret                     reti\par
\par
\par
        BC.3.4  Other Instructions \par
\par
                pushw   []              popw    []\par
                nop\par
                clrc                    setc\par
                clri                    seti\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX BD\cf1\par
\par
                                 \cf2 ASF8 ASSEMBLER\cf1\par
\par
\par
\par
\par
           The AS8 assembler supports the F8 and 3870 processor cores.  \par
\page\par
\par
        ASF8 ASSEMBLER                                         Page BD-2\par
        \par
\par
\par
        BD.1  F8 REGISTERS \par
\par
\par
           The  following  is a list of register designations recognized\par
        by the ASF8 assembler:  \par
\page\par
\par
        ASF8 ASSEMBLER                                         PAGE BD-3\par
        F8 REGISTERS\par
\par
\par
                r0-r11  -       Registers\par
        \par
                j       -       Scratch Pad Register r9\par
        \par
                hu      -       MSB of register H the\par
                                  Data Counter Buffer Register\par
                                  Scratch Pad Register r10\par
                hl      -       LSB of register H the\par
                                  Data Counter Buffer Register\par
                                  Scratch Pad Register r11\par
        \par
                ku      -       MSB of register K the\par
                                  Stack Buffer Register\par
                kl      -       LSB of register K the\par
                                  Stack Buffer Register\par
        \par
                qu      -       MSB of register Q a\par
                                  Buffer Register for the\par
                                  Data Counter or Program Counter\par
                ql      -       LSB of register Q a\par
                                  Buffer Register for the\par
                                  Data Counter or Program Counter\par
        \par
                a       -       Accumulator\par
        \par
                is      -       Scratch Pad Address Register (ISAR)\par
        \par
                w       -       Status Register\par
        \par
                s       -       Register Addressed\par
                                by is (unchanged)\par
        \par
                i       -       Register Addressed\par
                                by is (incremented)\par
        \par
                d       -       Register Addressed\par
                                by is (decremented)\par
        \par
                pc0     -       Program Counter\par
                or p0, pc\par
        \par
                pc1     -       Program Counter Buffer or\par
                or p1, p        Stack Register\par
        \par
                dc0     -       Data Counter\par
                or d0, dc\par
        \par
\par
\par
\page\par
\par
        ASF8 ASSEMBLER                                         PAGE BD-4\par
        F8 INSTRUCTION SET\par
\par
\par
        BD.2  F8 INSTRUCTION SET \par
\par
\par
           The  following  list specifies the format for each addressing\par
        mode supported by ASF8:  \par
\par
                #nibble         immediate  4-Bit data\par
                #byte           immediate  8-Bit data\par
                #word           immediate 16-Bit data\par
        \par
                #t3             3-Bit test condition\par
                                [Zero Carry Sign]\par
        \par
                #t4             4-Bit test condition\par
                                [Overflow Zero Carry Sign]\par
        \par
                r               register r0-r11 addressing and\par
                                indirect addressing s, i, and d\par
                                j is equivalent to r9\par
                                hu (MSB of h) is equivalent to r10\par
                                hl (LSB of h) is equivalent to r11\par
        \par
                ku and kl       MSB and LSB of k register\par
        \par
                qu and ql       MSB and LSB of q register\par
        \par
                h, k, or q      16-Bit registers\par
                p0, pc0, or pc\par
                p1 or p\par
                d0, dc0, or dc\par
        \par
                w               status register\par
        \par
                is              Indirect Scratchpad Address Register\par
        \par
                label           call/jmp/branch label\par
\par
        The  terms  nibble, byte, word, t3, t4, and label may all be ex-\par
        pressions.  \par
\par
           The  following tables list all F8 mnemonics recognized by the\par
        ASF8 assembler.  \par
\page\par
\par
        ASF8 ASSEMBLER                                         PAGE BD-5\par
        F8 INSTRUCTION SET\par
\par
\par
        BD.2.1  Accumulator Group Instructions \par
\par
                lnk                     ai      #byte\par
                ni      #byte           clr\par
                ci      #byte           com\par
                xi      #byte           inc\par
                li      #byte           lis     #nibble\par
                oi      #byte           sl      1\par
                sl      4               sr      1\par
                sr      4\par
\par
\par
        BD.2.2  Branch Instructions \par
\par
                bc      label           bp      label\par
                bz      label           bt      #t3,label\par
                bm      label           bnc     label\par
                bno     label           bnz     label\par
                bf      #t4,label       br7     label\par
                br      label           jmp     label\par
\par
\par
        BD.2.3  Memory Reference Instructions \par
\par
                am                      amd\par
                nm                      cm\par
                xm                      lm\par
                om                      st\par
\par
\par
        BD.2.4  Address Register Instructions \par
\par
                adc                     pk\par
                pi      #word           xdc\par
                lr      dc,q            lr      dc,h\par
                dci     #word           lr      p0,q\par
                lr      p,k             pop\par
                lr      q,dc            lr      h,dc\par
                lr      k,p\par
\page\par
\par
        ASF8 ASSEMBLER                                         PAGE BD-6\par
        F8 INSTRUCTION SET\par
\par
\par
        BD.2.5  Scratchpad Register Instructions \par
\par
                as      r               asd     r\par
                ds      r\par
                lr      a,r\par
                lr      a,ku            lr      a,kl\par
                lr      a,qu            lr      a,ql\par
                lr      r,a\par
                lr      ku,a            lr      kl,a\par
                lr      qu,a            lr      ql,a\par
                ns      r               xs      r\par
\par
\par
        BD.2.6  Miscellaneous Instructions \par
\par
                di                      ei\par
                in      #byte           ins     #nibble\par
                out     #byte           outs    #nibble\par
                lr      is,a            lr      a,is\par
                lr      w,j             lr      j,w\par
                lisl    #0-#7           lisu    #0-#7\par
                nop\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX BE\cf1\par
\par
                                 \cf2 ASGB ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        BE.1  ACKNOWLEDGEMENT \par
\par
\par
           Thanks  to  Roger Ivie for his contribution of the ASGB cross\par
        assembler.  \par
\par
                Roger Ivie\par
                ivie at cc dot usu dot edu\par
\par
\par
        BE.2  INTRODUCTION \par
\par
\par
           The  Gameboy uses an 8-bit processor which is closely related\par
        to the 8080.  It is usually described as a modified Z80, but may\par
        be more closely understood as an enhanced 8080;  it has the 8080\par
        register set and many, but not all, enhanced  Z80  instructions.\par
        However,  even  this is not accurate, for the Gameboy also lacks\par
        some basic 8080 instructions (most annoyingly  SHLD  and  LHLD).\par
        ASGB is based on ASZ80 and therefore uses the Z80 mnemonic set. \par
\par
\par
\page\par
\par
        ASGB ASSEMBLER                                         PAGE BE-2\par
        GAMEBOY REGISTER SET AND CONDITIONS\par
\par
\par
        BE.3  GAMEBOY REGISTER SET AND CONDITIONS \par
\par
\par
           The following is a complete list of register designations and\par
        condition mnemonics:  \par
\par
                byte registers - a,b,c,d,e,h,l\par
                register pairs - af, bc, de, hl\par
                word registers - pc, sp\par
        \par
                C  - carry bit set\par
                NC - carry bit clear\par
                NZ - zero bit clear\par
                Z  - zero bit set\par
\par
\par
        BE.4  GAMEBOY INSTRUCTION SET \par
\par
\par
           The following tables list all Gameboy mnemnoics recognized by\par
        the ASGB assembler.  The designation [] refers to a required ad-\par
        dressing mode argument.  The following list specifies the format\par
        for each addressing mode supported by ASGB:  \par
\par
                #data           immediate data\par
                                byte or word data\par
        \par
                n               byte value\par
        \par
                rg              a byte register\par
                                a,b,c,d,e,h,l\par
        \par
                rp              a register pair or 16-bit register\par
                                bc,de,hl\par
        \par
                (hl)            implied addressing or\par
                                register indirect addressing\par
        \par
                (label)         direct addressing\par
        \par
                label           call/jmp/jr label\par
\par
\par
           The terms data, dir, and ext may all be expression.  The term\par
        dir is not allowed to be an external reference.  \par
\par
           Note  that  not all addressing modes are valid with every in-\par
        struction.  Although official information is not, as  far  as  I\par
\page\par
\par
        ASGB ASSEMBLER                                         PAGE BE-3\par
        GAMEBOY INSTRUCTION SET\par
\par
\par
        know,  publically  available  for  the  Gameboy  processor, many\par
        unofficial sources are available on the internet.  \par
\par
\par
        BE.4.1  .tile Directive \par
\par
\par
        Format:  \par
\par
                        .tile  /string/         or \par
\par
                        .tile ^/string/ \par
\par
\par
\par
        where:  string  is  a  string of ascii characters taken from the\par
                        set ' ', '.', '+', '*', '0', '1', '2', and  '3'.\par
                        The   string   must   be  a  multiple  of  eight\par
                        characters long.  \par
\par
                /  /     represent  the  delimiting  characters.   These\par
                        delimiters   may   be   any   paired    printing\par
                        characters,  as  long  as the characters are not\par
                        contained within  the  string  itself.   If  the\par
                        delimiting  characters  do  not match, the .tile\par
                        directive will give the <q> error.  \par
\par
             The Gameboy displays information on the screen using a pro-\par
        grammable character set (referred to as  "tiles"  among  Gameboy\par
        developers).   The ASGB cross assembler has a processor-specific\par
        assembler directive  to  aid  in  the  creation  of  the  game's\par
        character set.  \par
\par
             Each  character is created from an 8x8 grid of pixels, each\par
        pixel of which is composed of two bits.  The .tile directive ac-\par
        cepts  a single string argument which is processed to create the\par
        byte  values  corresponding  to  the  lines  of  pixels  in  the\par
        character.   The  string  argument  must  be  some multiple of 8\par
        characters long, and be one of these characters:  \par
\par
                ' ' or '0' - for the pixel value 00\par
                '.' or '1' - for the pixel value 01\par
                '+' or '2' - for the pixel value 10\par
                '*' or '3' - for the pixel value 11\par
\par
             The .tile directive processes each 8-character group of its\par
        string argument to create the two-byte  value  corresponding  to\par
        that  line  of  pixels.   The  example  in  the  popular  extant\par
        literature could be done using ASGB like this:  \par
\page\par
\par
        ASGB ASSEMBLER                                         PAGE BE-4\par
        GAMEBOY INSTRUCTION SET\par
\par
\par
\par
           0000 7C 7C                 1         .tile " *****  "\par
           0002 00 C6                 2         .tile "++   ++ "\par
           0004 C6 00                 3         .tile "..   .. "\par
           0006 00 FE                 4         .tile "+++++++ "\par
           0008 C6 C6                 5         .tile "**   ** "\par
           000A 00 C6                 6         .tile "++   ++ "\par
           000C C6 00                 7         .tile "..   .. "\par
           000E 00 00                 8         .tile "        "\par
\par
             Or, using the synonym character set, as:  \par
\par
           0010 7C 7C                10         .tile "03333300"\par
           0012 00 C6                11         .tile "22000220"\par
           0014 C6 00                12         .tile "11000110"\par
           0016 00 FE                13         .tile "22222220"\par
           0018 C6 C6                14         .tile "33000330"\par
           001A 00 C6                15         .tile "22000220"\par
           001C C6 00                16         .tile "11000110"\par
           001E 00 00                17         .tile "00000000"\par
\par
             Since .tile is perfectly willing to assemble multiple lines\par
        of a character at once (as long as it is given complete rows  of\par
        pixels), it could even be done as:  \par
\par
                .tile " *****  ++   ++ ..   .. +++++++ "\par
                .tile "**   ** ++   ++ ..   ..         "\par
\par
\par
        BE.4.2  Potentially Controversial Mnemonic Selection \par
\par
\par
             Although the Gameboy processor is based on the Z80, it does\par
        include some features which are not present in the Z80.  The Z80\par
        mnemonic  set  is  not  sufficient  to describe these additional\par
        operations;  mnemonics must be created for the  new  operations.\par
        The  mnemonics ASGB uses are not the same as those used by other\par
        publically-available Gameboy assemblers.  \par
\par
\par
\page\par
\par
        ASGB ASSEMBLER                                         PAGE BE-5\par
        GAMEBOY INSTRUCTION SET\par
\par
\par
        BE.4.2.1  Auto-Indexing Loads  - \par
\par
             The  Gameboy provides instructions to load or store the ac-\par
        cumulator indirectly via HL and then subsequently  increment  or\par
        decrement HL.  ASGB uses the mnemonic 'ldd' for the instructions\par
        which decrement HL and 'ldi' for the instructions  which  incre-\par
        ment  HL.   Because the Gameboy lacks the Z80's block moves, the\par
        mnemonics are not otherwise needed by ASGB.  \par
\par
                ldd a,(hl)      ldd (hl),a\par
                ldi a,(hl)      ldi (hl),a\par
\par
\par
        BE.4.2.2  Input and Output Operations  - \par
\par
             The  Gameboy  replaces the Z80's separate address space for\par
        I/O with a mechanism similar to the zero page addressing of pro-\par
        cessors  such  as  the  6800  or 6502.  All I/O registers in the\par
        Gameboy reside in the address range between 0xff00  and  0xffff.\par
        The  Gameboy adds special instructions to load and store the ac-\par
        cumulator from and into this page of memory.   The  instructions\par
        are  analogous to the Z80's in and out instructions and ASGB re-\par
        tains the 'in' and 'out' mnemonics for them.  \par
\par
                in a,(n)        out (n),a\par
                in a,(c)        out (c),a\par
\par
             From  ASGB's  perspective,  the  RAM  available from 0xff80\par
        through 0xffff is composed of unused I/O locations  rather  than\par
        direct-page RAM.  \par
\par
\par
        BE.4.2.3  The 'stop' Instruction  - \par
\par
             The  publically-available  documentation  for  the  Gameboy\par
        lists the 'stop' instruction as the two-byte instruction 10  00,\par
        and the other freely-available Gameboy assemblers assemble it in\par
        that manner.  As far as I can tell, the only rationale for  this\par
        is  that  the  corresponding Z80 instruction ('djnz label') is a\par
        two-byte instruction.  ASGB assembles 'stop' as the one-byte in-\par
        struction 10.  \par
\par
\par
\page\par
\par
        ASGB ASSEMBLER                                         PAGE BE-6\par
        GAMEBOY INSTRUCTION SET\par
\par
\par
        BE.4.3  Inherent Instructions \par
\par
\par
                ccf             cpl\par
                daa             di\par
                ei              nop\par
                halt            rla\par
                rlca            rra\par
                rrca            scf\par
                reti            stop\par
                swap\par
\par
\par
        BE.4.4  Implicit Operand Instructions \par
\par
\par
                adc a,[]        adc []\par
                add a,[]        add []\par
                and a,[]        and []\par
                cp a,[]         cp []\par
                dec a,[]        dec []\par
                inc a,[]        inc []\par
                or a,[]         or []\par
                rl a,[]         rl []\par
                rlc a,[]        rlc []\par
                rr a,[]         rr []\par
                rrc a,[]        rrc []\par
                sbc a,[]        sbc []\par
                sla a,[]        sla []\par
                sra a,[]        sra []\par
                srl a,[]        srl []\par
                sub a,[]        sub []\par
                xor a,[]        xor []\par
\par
\par
        BE.4.5  Load Instructions \par
\par
\par
                ld rg,[]        ld [],rg\par
                ld (bc),a       ld a,(bc)\par
                ld (de),a       ld a,(de)\par
                ld (label),a    ld a,(label)\par
                ld (label),sp   ld rp,#data\par
                ld sp,hl        ld hl,sp\par
        \par
                ldd a,(hl)      ldd (hl),a\par
                ldi a,(hl)      ldi (hl),a\par
\par
\par
\page\par
\par
        ASGB ASSEMBLER                                         PAGE BE-7\par
        GAMEBOY INSTRUCTION SET\par
\par
\par
        BE.4.6  Call/Return Instructions \par
\par
\par
                call C,label    ret C\par
                call NC,label   ret NC\par
                call Z,label    ret Z\par
                call NZ,label   ret NZ\par
                call label      ret\par
        \par
                rst n\par
\par
\par
        BE.4.7  Jump Instructions \par
\par
\par
                jp C,label      jp NC,label\par
                jp Z,label      jp NZ,label\par
        \par
                jp (hl)         jp label\par
        \par
                jr C,label      jr NC,label\par
                jr Z,label      jr NZ,label\par
                jr label\par
\par
\par
        BE.4.8  Bit Manipulation Instructions \par
\par
\par
                bit n,[]\par
                res n,[]\par
                set n,[]\par
\par
\par
        BE.4.9  Input and Output Instructions \par
\par
\par
                in a,(n)        in a,(c)\par
                out (n),a       out (c),a\par
\par
\par
\page\par
\par
        ASGB ASSEMBLER                                         PAGE BE-8\par
        GAMEBOY INSTRUCTION SET\par
\par
\par
        BE.4.10  Register Pair Instructions \par
\par
\par
                add hl,rp       add hl,sp\par
                add sp,#data\par
        \par
                push rp         pop rp\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX BF\cf1\par
\par
                                 \cf2 ASH8 ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        BF.1  H8/3XX REGISTER SET \par
\par
        The following is a list of the H8 registers used by ASH8:  \par
\par
                r0  -  r7,sp            16-bit accumulators\par
                r0L -  r7L,spL          8-bit accumulators\par
                r0H -  r7H,spH          8-bit accumulators\par
                spL,spH,sp              stack pointers\par
                ccr                     condition code\par
\par
\par
        BF.2  H8/3XX INSTRUCTION SET \par
\par
\par
             The  following  tables list all H8/3xx mnemonics recognized\par
        by the ASH8 assembler.  The designation [] refers to a  required\par
        addressing  mode  argument.   The  following  list specifies the\par
        format for each addressing mode supported by ASH8:  \par
\par
                #xx:3           immediate data (3  bit)\par
                #xx:8           immediate data (8  bit)\par
                #xx:16          immediate data (16 bit)\par
        \par
                *dir            direct page addressing\par
                                (see .setdp directive)\par
                                0xFF00 <= dir <= 0xFFFF\par
        \par
                label           branch label\par
        \par
        \par
                rn              registers (16 bit)\par
                                r0-r7,sp\par
        \par
\page\par
\par
        ASH8 ASSEMBLER                                         PAGE BF-2\par
        H8/3XX INSTRUCTION SET\par
\par
\par
                rnB             registers (8 bit)\par
                                r0H-r7H,r0L-r7L,spH,spL\par
        \par
                ccr             condition code register\par
        \par
                @rn             register indirect\par
        \par
                @-rn            register indirect (auto pre-decrement)\par
        \par
                @rn+            register indirect (auto post-increment)\par
        \par
                @[offset,rn]    register indirect, 16-bit displacement\par
        \par
                @@offset        memory indirect, (8-bit address)\par
        \par
                ext             extended addressing (16-bit)\par
\par
        The  terms  data, dir, label, offset, and ext may all be expres-\par
        sions.  \par
\par
             Note that not all addressing modes are valid with every in-\par
        struction, refer to the H8/3xx technical data for valid modes.  \par
\par
\par
        BF.2.1  Inherent Instructions \par
\par
                eepmov\par
                nop\par
                sleep\par
                rte\par
                rts\par
\page\par
\par
        ASH8 ASSEMBLER                                         PAGE BF-3\par
        H8/3XX INSTRUCTION SET\par
\par
\par
        BF.2.2  Branch Instructions \par
\par
                bcc     label                   bcs     label\par
                beq     label                   bf      label\par
                bge     label                   bgt     label\par
                bhi     label                   bhis    label\par
                bhs     label                   ble     label\par
                blo     label                   blos    label\par
                bls     label                   blt     label\par
                bmi     label                   bne     label\par
                bpl     label                   bra     label\par
                brn     label                   bt      label\par
                bvc     label                   bvs     label\par
                bsr     label\par
\page\par
\par
        ASH8 ASSEMBLER                                         PAGE BF-4\par
        H8/3XX INSTRUCTION SET\par
\par
\par
        BF.2.3  Single Operand Instructions \par
\par
                Free Form\par
        \par
                daa     rnB                     das     rnB\par
        \par
                dec     rnB                     inc     rnB\par
        \par
                neg     rnB                     not     rnB\par
        \par
                rotxl   rnB                     rotxr   rnB\par
        \par
                rotl    rnB                     rotr    rnB\par
        \par
                shal    rnB                     shar    rnB\par
        \par
                shll    rnB                     shlr    rnB\par
        \par
                push    rn                      pop     rn\par
        \par
        \par
                Byte / Word Form\par
        \par
                daa.b   rnB                     das.b   rnB\par
        \par
                dec.b   rnB                     inc.b   rnB\par
        \par
                neg.b   rnB                     not.b   rnB\par
        \par
                rotxl.b rnB                     rotxr.b rnB\par
        \par
                rotl.b  rnB                     rotr.b  rnB\par
        \par
                shal.b  rnB                     shar.b  rnB\par
        \par
                shll.b  rnB                     shlr.b  rnB\par
        \par
                push.w  rn                      pop.w   rn\par
\page\par
\par
        ASH8 ASSEMBLER                                         PAGE BF-5\par
        H8/3XX INSTRUCTION SET\par
\par
\par
        BF.2.4  Double Operand Instructions \par
\par
                Free Form\par
        \par
                add     rnB,rnB                 add     #xx:8,rnB\par
                add     rn,rn\par
                adds    #1,rn                   adds    #2,rn\par
                addx    rnB,rnB                 addx    #xx:8,rnB\par
        \par
                cmp     rnB,rnB                 cmp     #xx:8,rnB\par
                cmp     rn,rn\par
        \par
                sub     rnB,rnB\par
                sub     rn,rn\par
                subs    #1,rn                   subs    #2,rn\par
                subx    rnB,rnB                 subx    #xx:8,rnB\par
        \par
                and     rnB,rnB                 and     #xx:8,rnB\par
                                                and     #xx:8,ccr\par
        \par
                or      rnB,rnB                 or      #xx:8,rnB\par
                                                or      #xx:8,ccr\par
        \par
                xor     rnB,rnB                 xor     #xx:8,rnB\par
                                                xor     #xx:8,ccr\par
        \par
        \par
                Byte / Word Form\par
        \par
                add.b   rnB,rnB                 add.b   #xx:8,rnB\par
                add.w   rn,rn\par
        \par
                cmp.b   rnB,rnB                 cmp.b   #xx:8,rnB\par
                cmp.w   rn,rn\par
        \par
                sub.b   rnB,rnB\par
                sub.w   rn,rn\par
        \par
                addx.b  rnB,rnB                 addx.b  #xx:8,rnB\par
        \par
                and.b   rnB,rnB                 and.b   #xx:8,rnB\par
                                                and.b   #xx:8,ccr\par
        \par
                or.b    rnB,rnB                 or.b    #xx:8,rnB\par
                                                or.b    #xx:8,ccr\par
        \par
                subx.b  rnB,rnB                 subx.b  #xx:8,rnB\par
        \par
                xor.b   rnB,rnB                 xor.b   #xx:8,rnB\par
\page\par
\par
        ASH8 ASSEMBLER                                         PAGE BF-6\par
        H8/3XX INSTRUCTION SET\par
\par
\par
                                                xor.b   #xx:8,ccr\par
\page\par
\par
        ASH8 ASSEMBLER                                         PAGE BF-7\par
        H8/3XX INSTRUCTION SET\par
\par
\par
        BF.2.5  Mov Instructions \par
\par
                Free Form\par
        \par
                mov     rnB,rnB                 mov     rn,rn\par
                mov     #xx:8,rnB               mov     #xx:16,rn\par
                mov     @rn,rnB                 mov     @rn,rn\par
                mov     @[offset,rn],rnB        mov     @[offset,rn],rn\par
                mov     @rn+,rnB                mov     @rn+,rn\par
                mov     @dir,rnB\par
                mov     dir,rnB\par
                mov     *@dir,rnB\par
                mov     *dir,rnB\par
                mov     @label,rnB              mov     @label,rn\par
                mov     label,rnB               mov     label,rn\par
                mov     rnB,@rn                 mov     rn,@rn\par
                mov     rnB,@[offset,rn]        mov     rn,@[offset,rn]\par
                mov     rnB,@-rn                mov     rn,@-rn\par
                mov     rnB,@dir\par
                mov     rnB,dir\par
                mov     rnB,*@dir\par
                mov     rnB,*dir\par
                mov     rnB,@label              mov     rn,@label\par
                mov     rnB,label               mov     rn,label\par
        \par
        \par
                Byte / Word Form\par
        \par
                mov.b   rnB,rnB                 mov.w   rn,rn\par
                mov.b   #xx:8,rnB               mov.w   #xx:16,rn\par
                mov.b   @rn,rnB                 mov.w   @rn,rn\par
                mov.b   @[offset,rn],rnB        mov.w   @[offset,rn],rn\par
                mov.b   @rn+,rnB                mov.w   @rn+,rn\par
                mov.b   @dir,rnB\par
                mov.b   dir,rnB\par
                mov.b   *@dir,rnB\par
                mov.b   *dir,rnB\par
                mov.b   @label,rnB              mov.w   @label,rn\par
                mov.b   label,rnB               mov.w   label,rn\par
                mov.b   rnB,@rn                 mov.w   rn,@rn\par
                mov.b   rnB,@[offset,rn]        mov.w   rn,@[offset,rn]\par
                mov.b   rnB,@-rn                mov.w   rn,@-rn\par
                mov.b   rnB,@dir\par
                mov.b   rnB,dir\par
                mov.b   rnB,*@dir\par
                mov.b   rnB,*dir\par
                mov.b   rnB,@label              mov.w   rn,@label\par
                mov.b   rnB,label               mov.w   rn,label\par
\page\par
\par
        ASH8 ASSEMBLER                                         PAGE BF-8\par
        H8/3XX INSTRUCTION SET\par
\par
\par
        BF.2.6  Bit Manipulation Instructions \par
\par
                bld     #xx:3,rnB               bld     #xx:3,@rn\par
                bld     #xx:3,@dir              bld     #xx:3,dir\par
                bld     #xx:3,*@dir             bld     #xx:3,*dir\par
        \par
                bild    #xx:3,rnB               bild    #xx:3,@rn\par
                bild    #xx:3,@dir              bild    #xx:3,dir\par
                bild    #xx:3,*@dir             bild    #xx:3,*dir\par
        \par
                bst     #xx:3,rnB               bst     #xx:3,@rn\par
                bst     #xx:3,@dir              bst     #xx:3,dir\par
                bst     #xx:3,*@dir             bst     #xx:3,*dir\par
        \par
                bist    #xx:3,rnB               bist    #xx:3,@rn\par
                bist    #xx:3,@dir              bist    #xx:3,dir\par
                bist    #xx:3,*@dir             bist    #xx:3,*dir\par
        \par
                band    #xx:3,rnB               band    #xx:3,@rn\par
                band    #xx:3,@dir              band    #xx:3,dir\par
                band    #xx:3,*@dir             band    #xx:3,*dir\par
        \par
                biand   #xx:3,rnB               biand   #xx:3,@rn\par
                biand   #xx:3,@dir              biand   #xx:3,dir\par
                biand   #xx:3,*@dir             biand   #xx:3,*dir\par
        \par
                bor     #xx:3,rnB               bor     #xx:3,@rn\par
                bor     #xx:3,@dir              bor     #xx:3,dir\par
                bor     #xx:3,*@dir             bor     #xx:3,*dir\par
        \par
                bior    #xx:3,rnB               bior    #xx:3,@rn\par
                bior    #xx:3,@dir              bior    #xx:3,dir\par
                bior    #xx:3,*@dir             bior    #xx:3,*dir\par
        \par
                bxor    #xx:3,rnB               bxor    #xx:3,@rn\par
                bxor    #xx:3,@dir              bxor    #xx:3,dir\par
                bxor    #xx:3,*@dir             bxor    #xx:3,*dir\par
        \par
                bixor   #xx:3,rnB               bixor   #xx:3,@rn\par
                bixor   #xx:3,@dir              bixor   #xx:3,dir\par
                bixor   #xx:3,*@dir             bixor   #xx:3,*dir\par
\page\par
\par
        ASH8 ASSEMBLER                                         PAGE BF-9\par
        H8/3XX INSTRUCTION SET\par
\par
\par
        BF.2.7  Extended Bit Manipulation Instructions \par
\par
                bset    #xx:3,rnB               bset    #xx:3,@rn\par
                bset    #xx:3,@dir              bset    #xx:3,dir\par
                bset    #xx:3,*@dir             bset    #xx:3,*dir\par
                bset    rnB,rnB                 bset    rnB,@rn\par
                bset    rnB,@dir                bset    rnB,dir\par
                bset    rnB,*@dir               bset    rnB,*dir\par
        \par
                bclr    #xx:3,rnB               bclr    #xx:3,@rn\par
                bclr    #xx:3,@dir              bclr    #xx:3,dir\par
                bclr    #xx:3,*@dir             bclr    #xx:3,*dir\par
                bclr    rnB,rnB                 bclr    rnB,@rn\par
                bclr    rnB,@dir                bclr    rnB,dir\par
                bclr    rnB,*@dir               bclr    rnB,*dir\par
        \par
                bnot    #xx:3,rnB               bnot    #xx:3,@rn\par
                bnot    #xx:3,@dir              bnot    #xx:3,dir\par
                bnot    #xx:3,*@dir             bnot    #xx:3,*dir\par
                bnot    rnB,rnB                 bnot    rnB,@rn\par
                bnot    rnB,@dir                bnot    rnB,dir\par
                bnot    rnB,*@dir               bnot    rnB,*dir\par
        \par
                btst    #xx:3,rnB               btst    #xx:3,@rn\par
                btst    #xx:3,@dir              btst    #xx:3,dir\par
                btst    #xx:3,*@dir             btst    #xx:3,*dir\par
                btst    rnB,rnB                 btst    rnB,@rn\par
                btst    rnB,@dir                btst    rnB,dir\par
                btst    rnB,*@dir               btst    rnB,*dir\par
\par
\par
        BF.2.8  Condition Code Instructions \par
\par
                andc    #xx:8,ccr               andc    #xx:8\par
                and     #xx:8,ccr               and.b   #xx:8,ccr\par
        \par
                ldc     #xx:8,ccr               ldc     #xx:8\par
                ldc     rnB,ccr                 ldc     rnB\par
        \par
                orc     #xx:8,ccr               orc     #xx:8\par
                or      #xx:8,ccr               or.b    #xx:8,ccr\par
        \par
                xorc    #xx:8,ccr               xorc    #xx:8\par
                xor     #xx:8,ccr               xor.b   #xx:8,ccr\par
        \par
                stc     ccr,rnB                 stc     rnB\par
\page\par
\par
        ASH8 ASSEMBLER                                        PAGE BF-10\par
        H8/3XX INSTRUCTION SET\par
\par
\par
        BF.2.9  Other Instructions \par
\par
                divxu   rnB,rn                  divxu.b rnB,rn\par
        \par
                mulxu   rnB,rn                  mulxu.b rnB,rn\par
        \par
                movfpe  @label,rnB              movfpe  label,rnB\par
                movfpe.b  @label,rnB            movfpe.b  label,rnB\par
        \par
                movtpe  @label,rnB              movtpe  label,rnB\par
                movtpe.b  @label,rnB            movtpe.b  label,rnB\par
\par
\par
        BF.2.10  Jump and Jump to Subroutine Instructions \par
\par
                jmp     @rn                     jmp     @@dir\par
                jmp     @label                  jmp     label\par
        \par
                jsr     @rn                     jsr     @@dir\par
                jsr     @label                  jsr     label\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX BG\cf1\par
\par
                                 \cf2 ASM8C ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        BG.1  M8C REGISTER SET \par
\par
        The following is a list of the M8C registers used by ASM8C:  \par
\par
                A       -   Accumulator\par
                X       -   Index\par
                SP      -   Stack Pointer\par
                F       -   Flags\par
\par
\par
        BG.2  M8C ADDRESSING MODES \par
\par
\par
             The  M8C  instructions  may have none, one, or two operands\par
        selected from the registers listed above or an  addressing  mode\par
        from the following list:  \par
\par
                expr         -  immediate argument\par
                             -  In the lcall, ljmp, index,\par
                                and pc relative branching\par
                                instructions expr is an\par
                                address expression.\par
                #expr        -  immediate argument\par
                [expr]       -  argument at location expr\par
                [x+expr]     -  argument at location x + expr\par
                reg[expr]    -  argument at location expr\par
                                in register space\par
                reg[x+expr]  -  argument at location x + expr\par
                                in register space\par
                [[expr]++]   -  The value in memory at address\par
                                expr (the indirect address)\par
                                points to a memory location in\par
                                RAM. The value in memory at\par
\page\par
\par
        ASM8C ASSEMBLER                                        PAGE BG-2\par
        M8C ADDRESSING MODES\par
\par
\par
                                address expr is then incremented.\par
                                This addressing mode is used only\par
                                by the mvi instruction and\par
                                allows the short form [expr]\par
                                for this addressing mode.\par
\par
\par
\par
        BG.3  M8C INSTRUCTION SET \par
\par
\par
             The  following tables list all M8C mnemonics and addressing\par
        modes recognized by the ASM8C assembler.  \par
\par
\par
        BG.3.1  Double Operand Arithmetic Instructions \par
\par
                adc  a,expr\par
                adc  a,[expr]           adc  [expr],a\par
                adc  a,[x+expr]         adc  [x+expr],a\par
                adc  [expr],expr        adc  [x+expr],expr\par
        \par
                add  a,expr\par
                add  a,[expr]           add  [expr],a\par
                add  a,[x+expr]         add  [x+expr],a\par
                add  [expr],expr        add  [x+expr],expr\par
                add  sp,expr\par
        \par
                cmp  a,expr\par
                cmp  a,[expr]\par
                cmp  a,[x+expr]\par
                cmp  [expr],expr        cmp  [x+expr],expr\par
        \par
                sbb  a,expr\par
                sbb  a,[expr]           sbb  [expr],a\par
                sbb  a,[x+expr]         sbb  [x+expr],a\par
                sbb  [expr],expr        sbb  [x+expr],expr\par
        \par
                sub  a,expr\par
                sub  a,[expr]           sub  [expr],a\par
                sub  a,[x+expr]         sub  [x+expr],a\par
                sub  [expr],expr        sub  [x+expr],expr\par
\page\par
\par
        ASM8C ASSEMBLER                                        PAGE BG-3\par
        M8C INSTRUCTION SET\par
\par
\par
        BG.3.2  Double Operand Logic Instructions \par
\par
                and  a,expr             and  f,expr\par
                and  a,[expr]           and  [expr],a\par
                and  a,[x+expr]         and  [x+expr],a\par
                and  [expr],expr        and  [x+expr],expr\par
                and  reg[expr],expr     and  reg[x+expr],expr\par
        \par
                or   a,expr             or   f,expr\par
                or   a,[expr]           or   [expr],a\par
                or   a,[x+expr]         or   [x+expr],a\par
                or   [expr],expr        or   [x+expr],expr\par
                or   reg[expr],expr     or   reg[x+expr],expr\par
        \par
                xor  a,expr             xor  f,expr\par
                xor  a,[expr]           xor  [expr],a\par
                xor  a,[x+expr]         xor  [x+expr],a\par
                xor  [expr],expr        xor  [x+expr],expr\par
                xor  reg[expr],expr     xor  reg[x+expr],expr\par
\par
\par
        BG.3.3  Miscellaneous Double Operand Instructions \par
\par
                swap a,x                swap a,sp\par
                swap a,[expr]           swap a,[x+expr]\par
        \par
                tst  [expr]             tst  [x+expr]\par
                tst  reg[expr]          tst  reg[x+expr]\par
\par
\par
        BG.3.4  Single Operand Shift/Rotate Instructions \par
\par
                asl  a\par
                asl  [expr]             asl  [x+expr]\par
        \par
                asr  a\par
                asr  [expr]             asr  [x+expr]\par
        \par
                rlc  a\par
                rlc  [expr]             rlc  [x+expr]\par
        \par
                rrc  a\par
                rrc  [expr]             rrc  [x+expr]\par
\page\par
\par
        ASM8C ASSEMBLER                                        PAGE BG-4\par
        M8C INSTRUCTION SET\par
\par
\par
        BG.3.5  Miscellaneous Single Operand Instructions \par
\par
                cpl  a\par
        \par
                dec  a                  dec  x\par
                dec  [expr]             dec  [x+expr]\par
        \par
                inc  a                  inc  x\par
                inc  [expr]             inc  [x+expr]\par
        \par
                pop  a                  pop  x\par
                push a                  push x\par
        \par
                tst  [expr]             tst  [x+expr]\par
                tst  reg[expr]          tst  reg[x+expr]\par
\par
\par
        BG.3.6  Move Instructions \par
\par
                mov  a,x\par
                mov  a,expr\par
                mov  a,[expr]           mov  [expr],a\par
                mov  a[x+expr]          mov  [x+expr],a\par
        \par
                mov  x,a                mov  x,sp\par
                mov  x,expr\par
                mov  x,[expr]           mov  [expr],x\par
                mov  x,[x+expr]\par
        \par
                mov  [expr],expr        mov  [x+expr],expr\par
        \par
                mov  [expr],[expr]\par
        \par
                mov  a,reg[expr]        mov  a,reg[x+expr]\par
                mov  reg[expr],a        mov  reg[x+expr],a\par
        \par
                mov  reg[expr],expr     mov  reg[x+expr],expr\par
        \par
                mvi  a,[expr]      ==   mvi  a,[[expr]++]\par
                mvi  [expr],a      ==   mvi  [[expr]++],a\par
\par
\par
\page\par
\par
        ASM8C ASSEMBLER                                        PAGE BG-5\par
        M8C INSTRUCTION SET\par
\par
\par
        BG.3.7  Inherent Instructions \par
\par
                halt                    nop\par
                romx                    ssc\par
                ret                     reti\par
\par
\par
        BG.3.8  Branching Instructions \par
\par
                lcall expr              ljmp  expr\par
                jz    expr              jnz   expr\par
                jc    expr              jnc   expr\par
                jacc  expr\par
\par
\par
        BG.3.9  Relative Table Read Instruction \par
\par
                index expr\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX BH\cf1\par
\par
                                 \cf2 ASPIC ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        BH.1  PIC ASSEMBLER NOTES \par
\par
        The  PIC  series  of  processors  uses  a non unified addressing\par
        scheme:  the instruction addressing is 1 per  instruction  word,\par
        each  instruction  uses  a  word of memory varying from 12 to 16\par
        bits in length.  The processor data is addressed as 1  per  byte\par
        of  data.   To properly address the program/data spaces you, the\par
        programmer, must seperate your program and  data  into  seperate\par
        code  and  data areas.  The data area is addressed as 1 per byte\par
        and the code area is addressed as 1 per instruction.  \par
\par
             The assembler/linker processes the instruction code so that\par
        the linker will output 2 bytes for each instruction  word.   The\par
        instruction  word  address  will  be  the  file  encoded address\par
        divided by 2.  \par
\par
\par
        BH.2  PROCESSOR SPECIFIC DIRECTIVES \par
\par
\par
             The  ASPIC  assembler has several processor specific assem-\par
        bler directives.  These directives  specify  a  processor  name,\par
        select  a  PIC processor family type, define the maximum ram ad-\par
        dress, specify ram addresses that should not  be  accessed,  and\par
        define the register file address page.  \par
\par
\par
\page\par
\par
        ASPIC ASSEMBLER                                        PAGE BH-2\par
        PROCESSOR SPECIFIC DIRECTIVES\par
\par
\par
        BH.2.1  .pic Directive \par
\par
        Format:  \par
\par
                .pic     /string/               or \par
\par
                .pic    ^/string/ \par
\par
\par
        where:  string  represents a text string.  The string is the pic\par
                        processor type.  \par
\par
                /  /    represent   the  delimiting  characters.   These\par
                        delimiters   may   be   any   paired    printing\par
                        characters,  as  long  as the characters are not\par
                        contained within  the  string  itself.   If  the\par
                        delimiting  characters  do  not  match, the .pic\par
                        directive will give the <q> error.  \par
\par
             The assembler uses the delimited string to define a proces-\par
        sor  specific  symbol.   e.g:   "p12c508"  produces  the  symbol\par
        __12c508  having  a value of 1.  This symbol can then be used in\par
        an .ifdef/.else/.endif construct.  \par
\par
             The  assembler should be configured by including directives\par
        similiar to the folowing at the beginning of your assembly file: \par
\par
                .pic            "p12c508"       ; Set PIC Name\par
                .pic12bit                       ; Select PIC Type\par
\par
             The  ASPIC  assembler  will  then be configured for the PIC\par
        processor type "p12c508".  The .pic directive must  precede  the\par
        PIC  type  directive.  The PIC type directive configures the as-\par
        sembler based on the processor name and type selection.  \par
\par
             An  alternate method to configure the ASPIC assembler is as\par
        follows:  \par
\par
                .pic            "p12c508"       ; Set PIC Name\par
                .include        "piccpu.def"    ; Selects PIC Type\par
\par
             To  define the special function register names, bit values,\par
        and memory constraints for  a  specific  processor  include  the\par
        appropriate definition file:  \par
\par
                .include        "p12c508.def"   ; Definitions\par
\par
\par
\page\par
\par
        ASPIC ASSEMBLER                                        PAGE BH-3\par
        PROCESSOR SPECIFIC DIRECTIVES\par
\par
\par
        BH.2.2  .picnopic Directive \par
\par
        Format:  \par
\par
                .picnopic \par
\par
             This directive deselects all processor specific mnemonics. \par
\par
\par
        BH.2.3  .pic12bit Directive \par
\par
        Format:  \par
\par
                .pic12bit \par
\par
             This  directive selects the 12-bit instruction word mnemon-\par
        ics and opcode values to be used during the assembly process.  \par
\par
\par
        BH.2.4  .pic14bit Directive \par
\par
        Format:  \par
\par
                .pic14bit \par
\par
             This  directive selects the 14-bit instruction word mnemon-\par
        ics and opcode values to be used during the assembly process.  \par
\par
\par
        BH.2.5  .pic16bit Directive \par
\par
        Format:  \par
\par
                .pic16bit \par
\par
             This  directive selects the 16-bit instruction word mnemon-\par
        ics and opcode values to be used during the assembly process.  \par
\par
\par
\page\par
\par
        ASPIC ASSEMBLER                                        PAGE BH-4\par
        PROCESSOR SPECIFIC DIRECTIVES\par
\par
\par
        BH.2.6  .pic20bit Directive \par
\par
        Format:  \par
\par
                .pic20bit \par
\par
             This directive selects 20-bit addressing and the 16-bit in-\par
        struction word mnemonics and opcode values to be used during the\par
        assembly process.  \par
\par
\par
        BH.2.7  The .__.CPU.  Variable \par
\par
\par
             The  value of the pre-defined symbol '.__.CPU.' corresponds\par
        to the selected processor type.  The default value  is  0  which\par
        corresponds  to the default processor type.  The following table\par
        lists the processor types and associated values  for  the  ASPIC\par
        assembler:  \par
\par
                Processor Type            .__.CPU. Value\par
                --------------            --------------\par
                  .picnopic                      0\par
                  .pic12bit                      1\par
                  .pic14bit                      2\par
                  .pic16bit                      3\par
                  .pic20bit                      4\par
\par
\par
             The  variable '.__.CPU.' is by default defined as local and\par
        will not be output to the created .rel file.  The assembler com-\par
        mand line options -g or -a will not cause the local symbol to be\par
        output to the created .rel file.  \par
\par
             The  assembler  .globl  directive may be used to change the\par
        variable type to global causing its definition to be  output  to\par
        the  .rel file.  The inclusion of the definition of the variable\par
        '.__.CPU.' might be a useful means of validating that seperately\par
        assembled  files have been compiled for the same processor type.\par
        The linker will report an error for variables with multiple  non\par
        equal definitions.  \par
\par
\par
\page\par
\par
        ASPIC ASSEMBLER                                        PAGE BH-5\par
        PROCESSOR SPECIFIC DIRECTIVES\par
\par
\par
        BH.2.8  .picfix Directive \par
\par
        Format:  \par
\par
                .picfix chip,   mnemonic,       value \par
\par
             This  directive  can  be used to "fix" or change the opcode\par
        value of any pic instruction of the currently selected pic type.\par
        e.g.:  \par
\par
\par
             .picfix    "p12c671",      "clrw", 0x0103 \par
\par
        will  change  the  "clrw"  instruction's opcode to 0x0103 if the\par
        current pic type is "p12c671".  \par
\par
\par
        BH.2.9  .maxram Directive \par
\par
        Format:  \par
\par
                .maxram value \par
\par
             Where value is the highest allowed ram address \par
\par
\par
        BH.2.10  .badram Directive \par
\par
        Format:  \par
\par
                .badram address \par
                .badram lo:hi \par
\par
             Where  address is a single location and lo:hi is a range of\par
        addresses that should not be used.   Multiple  locations  and/or\par
        ranges  may  be  specified  by  seperating  the arguments with a\par
        comma:  \par
\par
                .badram         0x23, 0x28:0x2F, ...\par
\par
             The  ASPIC  assembler will report an error for any absolute\par
        register file address in the badram range.  \par
\par
\par
\page\par
\par
        ASPIC ASSEMBLER                                        PAGE BH-6\par
        PROCESSOR SPECIFIC DIRECTIVES\par
\par
\par
        BH.2.11  .setdmm Directive \par
\par
        Format:  \par
\par
                .setdmm value \par
\par
             The  .setdmm (set Data Memory Map) directive is used to in-\par
        form the assembler and linker about  which  ram  bank  has  been\par
        selected for access.  The PIC17Cxxx microprocessor family allows\par
        upto 2 (or more) banks of 256 byte ram  blocks.   The  PIC18Cxxx\par
        microprocessor  family  allows  upto  16  banks  of 256 byte ram\par
        blocks.  The data memory map value must be set  on  a  256  byte\par
        boundary.  e.g.:  \par
\par
\par
             .setdmm    0x0F00 \par
\par
             The  assembler  verifies  that  any absolute address to the\par
        register file is within the  256  byte  page.   External  direct\par
        references  are  assumed  by  the assembler to be in the correct\par
        area and have valid offsets.  The linker  will  check  all  page\par
        relocations  to verify that they are within the correct address-\par
        ing range.  \par
\par
\par
        BH.3  12-BIT OPCODE PIC \par
\par
\par
        The 12-bit opcode family of PIC processors support the following\par
        assembler arguments:  \par
                (*)f\par
                (*)f,(#)d\par
                (*)f,(#)b\par
                (#)k\par
                label\par
        \par
                where:  f       register file address\par
                        d       destination select:\par
                                        (0, -> w), (1 -> f)\par
                                        the letters w or f may be used\par
                                        to select the destination\par
                        b       bit address in an 8-bit file register\par
                        k       literal constant\par
                        label   label name\par
        \par
                Items enclosed in () are optional.\par
        \par
        \par
           The  terms  f, d, b, k, and label may all be expressions.  \par
\page\par
\par
        ASPIC ASSEMBLER                                        PAGE BH-7\par
        12-BIT OPCODE PIC\par
\par
\par
        \par
           Note  that  not all addressing modes are valid with every in-\par
        struction,  refer to the processor specific  technical data for\par
        valid modes.\par
          \par
        \par
            PIC12C5XX CPU Type\par
                PIC12C508,      PIC12C509,      PIC12CE518\par
                PIC12C508A,     PIC12C509A,     PIC12CE519\par
                PIC12CR509A\par
\par
\par
        BH.4  14-BIT OPCODE PIC \par
\par
\par
        The 14-bit opcode family of PIC processors support the following\par
        assembler arguments:  \par
                (*)f\par
                (*)f,(#)d\par
                (*)f,(#)b\par
                (#)k\par
                label\par
        \par
                where:  f       register file address\par
                        d       destination select:\par
                                        (0, -> w), (1 -> f)\par
                                        the letters w or f may be used\par
                                        to select the destination\par
                        b       bit address in an 8-bit file register\par
                        k       literal constant\par
                        label   label name\par
        \par
                Items enclosed in () are optional.\par
        \par
        \par
           The  terms  f, d, b, k, and label may all be expressions.  \par
        \par
           Note  that  not all addressing modes are valid with every in-\par
        struction,  refer to the processor specific  technical data for\par
        valid modes.\par
          \par
        \par
            PIC12C67X CPU Type\par
                PIC12C671,      PIC12C672,      PIC12LC671,\par
                PIC12LC672\par
                PIC12CE673,     PIC12CE674,     PIC12LCE673,\par
                PIC12LCE674\par
        \par
            PIC14000 CPU Type\par
\page\par
\par
        ASPIC ASSEMBLER                                        PAGE BH-8\par
        14-BIT OPCODE PIC\par
\par
\par
                PIC14000\par
        \par
            PIC16C15X CPU Type\par
                PIC16C154,      PIC16C156,      PIC16C158\par
                PIC16CR154,     PIC16CR156,     PIC16CR158\par
        \par
            PIC16C5X CPU Type\par
                PIC16C52\par
                PIC16C54,       PICC16C54A,     PIC16C54B,\par
                PIC16C54C\par
                PIC16CR54,      PIC16CR54A,     PIC16C54B,\par
                PIC16CR54C\par
                PIC16C55,       PIC16C55A,      PIC16C56,\par
                PIC16C56A\par
                PIC16CR56A\par
                PIC16C57,       PIC16CR57A,     PIC16C57B,\par
                PIC16C57C\par
                PIC16C58A,      PIC16CR58A,     PIC16C58B,\par
                PIC16CR58B\par
        \par
            PIC16C55X CPU Type\par
                PIC16C554,      PIC16C556,      PIC16C558\par
        \par
            PIC16C62X, PIC16C64X and, PIC16C66X CPU Types\par
                PIC16C620,      PIC16C621,      PIC16C622\par
                PIC16C642,      PIC16C662\par
        \par
            PIC16C7XX CPU Type\par
                PIC16C71,       PIC16C72,       PIC16CR72\par
                PIC16C73A,      PIC16C74A,      PIC16C76,       PIC16C77\par
                PIC16C710,      PIC16C711,      PIC16C715\par
        \par
            PIC16C8X CPU Type\par
                PIC16F83,       PIC16CR83,      PIC16F84,\par
                PIC16CR84\par
                PIC16HV540\par
                PIC16F627,      PIC16F628\par
                PIC16F870,      PIC16F871,      PIC16F872,\par
                PIC16F873\par
                PIC16F874,      PIC16F876,      PIC16F877\par
        \par
            PIC16C9XX CPU Type\par
                PIC16C923,      PIC16C924\par
\par
\par
\page\par
\par
        ASPIC ASSEMBLER                                        PAGE BH-9\par
        16-BIT OPCODE PIC\par
\par
\par
        BH.5  16-BIT OPCODE PIC \par
\par
\par
        The 16-bit opcode family of PIC processors support the following\par
        assembler arguments:  \par
                (*)f\par
                (*)f,(#)d\par
                (*)f,(#)s\par
                (*)f,(#)b\par
                (*)f,(*)p       /       (*)p,(*)f\par
                (#)t,(*)f\par
                (#)t,(#)i,(*)f\par
                \{#\}k\par
                label\par
        \par
                where:  f       register file address\par
                        d       destination select:\par
                                        (0, -> w), (1 -> f)\par
                                        the letters w or f may be used\par
                                        to select the destination\par
                        s       destination select:\par
                                        (0, -> f and w), (1, -> f)\par
                                        the letters w or f may be used\par
                                        to select the destination\par
                        t       table byte select:\par
                                        (0, -> lower byte)\par
                                        (1, -> upper byte)\par
                        i       table pointer control\par
                                        (0, -> no change)\par
                                        (1, -> post increment)\par
                        b       bit address of an 8-bit file register\par
                        p       peripheral register file address\par
                        k       literal constant\par
                        label   label name\par
        \par
                Items enclosed in () are optional.\par
        \par
        \par
           The  terms  f, d, s, t, i, b, p, k,  and  label  may  all be\par
        expressions.  \par
        \par
           Note  that  not all addressing modes are valid with every in-\par
        struction,  refer to the processor specific  technical data for\par
        valid modes.\par
          \par
        \par
            PIC17CXXX CPU Type\par
                PIC17C42,       PIC17C42A,      PIC17C43,       PIC17C44\par
                PIC17C752,      PIC17C756,      PIC17C756A\par
\page\par
\par
        ASPIC ASSEMBLER                                       PAGE BH-10\par
        16-BIT OPCODE PIC\par
\par
\par
                PIC17C762,      PIC17C766,      PIC17CR42,\par
                PIC17CR43\par
\par
\par
        BH.6  20-BIT ADDRESSING PIC \par
\par
\par
             The  20-bit addressing family of PIC processors support the\par
        following assembler arguments:  \par
                (*)f(,a)\par
                (*)f,(#)d(,(#)a)\par
                (*)f,(#)s\par
                (*)f,(#)b(,(#)a)\par
                (*)fs,(*)fd\par
                (#)t,(*)f\par
                (#)t,(#)i,(*)f\par
                \{#\}k\par
                label(,(#)s)\par
                ((#)s)\par
                mm\par
        \par
                where:  f       register file address\par
                        fs      register file source\par
                        fd      register file destination\par
                        a       ram access bit\par
                                        (0, -> ACCESS RAM)\par
                                        (1, -> RAM BANK)\par
                        d       destination select:\par
                                        (0, -> w), (1 -> f)\par
                                        the letters w or f may be used\par
                                        to select the destination\par
                        s       fast call/return mode:\par
                                        (0, -> SLOW), (1, -> FAST)\par
                        b       bit address of an 8-bit file register\par
                        mm      TBLRD and TBLWT suffixs\par
                                        ('*',  -> no change)\par
                                        ('*+', -> post-increment)\par
                                        ('*-', -> post-decrement)\par
                                        ('+*', -> pre-increment)\par
                        k       literal constant\par
                        label   label name\par
        \par
                Items enclosed in () are optional.\par
        \par
        \par
           The  terms  f, fs, fd, a, b, d, s, k, and  label  may all be\par
        expressions.  \par
        \par
           Note  that  not all addressing modes are valid with every in-\par
\page\par
\par
        ASPIC ASSEMBLER                                       PAGE BH-11\par
        20-BIT ADDRESSING PIC\par
\par
\par
        struction,  refer to the processor specific  technical data for\par
        valid modes.\par
          \par
        \par
            PIC18CXXX CPU Type\par
                PIC18C242,      PIC18C252\par
                PIC18C442,      PIC18C452\par
                PIC18C658,      PIC18C858\par
\par
\par
        BH.7  PIC OPCODES \par
\par
\par
\par
             The  following  table contains all the mnemonics recognized\par
        by the ASPIC assembler.  The processors supporting each mnemonic\par
        are  indicated by the code 'PIC:12:14:16:20' after each instruc-\par
        tion type.  The designation [] refers to a  required  addressing\par
        mode argument.  \par
\par
                addwf   []              PIC:12:14:16:20\par
                addwfc  []              PIC:--:--:16:20\par
                andwf   []              PIC:12:14:16:20\par
                comf    []              PIC:12:14:16:20\par
                decf    []              PIC:12:14:16:20\par
                decfsz  []              PIC:12:14:16:20\par
                dcfsnz  []              PIC:--:--:16:20\par
                incf    []              PIC:12:14:16:20\par
                incfsz  []              PIC:12:14:16:20\par
                infsnz  []              PIC:--:--:16:20\par
                iorwf   []              PIC:12:14:16:20\par
                movf    []              PIC:12:14:--:20\par
                negw    []              PIC:--:--:16:--\par
                rlf     []              PIC:12:14:--:--\par
                rlcf    []              PIC:--:--:16:20\par
                rlncf   []              PIC:--:--:16:20\par
                rrf     []              PIC:12:14:--:--\par
                rrcf    []              PIC:--:--:16:20\par
                rrncf   []              PIC:--:--:16:20\par
                subfwb  []              PIC:--:--:--:20\par
                subwf   []              PIC:12:14:16:20\par
                subwfb  []              PIC:--:--:16:20\par
                swapf   []              PIC:12:14:16:20\par
                xorwf   []              PIC:12:14:16:20\par
        \par
                movfp   []              PIC:--:--:16:--\par
                movpf   []              PIC:--:--:16:--\par
        \par
                movlb   []              PIC:--:--:16:20\par
\page\par
\par
        ASPIC ASSEMBLER                                       PAGE BH-12\par
        PIC OPCODES\par
\par
\par
                movlr   []              PIC:--:--:16:--\par
        \par
                movff   []              PIC:--:--:--:20\par
        \par
                lfsr    []              PIC:--:--:--:20\par
        \par
                clrf    []              PIC:12:14:16:20\par
                cpfseq  []              PIC:--:--:16:20\par
                cpfsgt  []              PIC:--:--:16:20\par
                cpfslt  []              PIC:--:--:16:20\par
                movwf   []              PIC:12:14:16:20\par
                mulwf   []              PIC:--:--:16:20\par
                negf    []              PIC:--:--:--:20\par
                setf    []              PIC:--:--:16:20\par
                tstfsz  []              PIC:--:--:16:20\par
        \par
                bcf     []              PIC:12:14:16:20\par
                bsf     []              PIC:12:14:16:20\par
                btfsc   []              PIC:12:14:16:20\par
                btfss   []              PIC:12:14:16:20\par
                btg     []              PIC:--:--:16:20\par
        \par
                addlw   []              PIC:--:14:16:20\par
                andlw   []              PIC:12:14:16:20\par
                iorlw   []              PIC:12:14:16:20\par
                movlw   []              PIC:12:14:16:20\par
                mullw   []              PIC:--:--:16:20\par
                retlw   []              PIC:12:14:16:20\par
                sublw   []              PIC:--:14:16:20\par
                xorlw   []              PIC:12:14:16:20\par
        \par
                call    []              PIC:12:14:16:20\par
                goto    []              PIC:12:14:16:20\par
                lcall   []              PIC:--:--:16:--\par
        \par
                bc      []              PIC:--:--:--:20\par
                bn      []              PIC:--:--:--:20\par
                bnc     []              PIC:--:--:--:20\par
                bnn     []              PIC:--:--:--:20\par
                bnov    []              PIC:--:--:--:20\par
                bnc     []              PIC:--:--:--:20\par
                bov     []              PIC:--:--:--:20\par
                bz      []              PIC:--:--:--:20\par
        \par
                bra     []              PIC:--:--:--:20\par
                rcall   []              PIC:--:--:--:20\par
        \par
                tablrd  []              PIC:--:--:16:--\par
                tablwt  []              PIC:--:--:16:--\par
\page\par
\par
        ASPIC ASSEMBLER                                       PAGE BH-13\par
        PIC OPCODES\par
\par
\par
                tlrd    []              PIC:--:--:16:--\par
                tlwt    []              PIC:--:--:16:--\par
                tblrd   []              PIC:--:--:--:20\par
                tblwt   []              PIC:--:--:--:20\par
        \par
                clrw    []              PIC:12:14:--:--\par
                clrwdt                  PIC:12:14:16:20\par
                daw                     PIC:--:--:16:20\par
                nop                     PIC:12:14:16:20\par
                option                  PIC:12:14:--:--\par
                pop                     PIC:--:--:--:20\par
                push                    PIC:--:--:--:20\par
                retfie  []              PIC:--:14:16:20\par
                return  []              PIC:--:14:16:20\par
                sleep                   PIC:12:14:16:20\par
        \par
                tris    []              PIC:12:14:--:--\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX BI\cf1\par
\par
                                 \cf2 ASRAB ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        BI.1  ACKNOWLEDGMENT \par
\par
\par
             Thanks to Ulrich Raich and Razaq Ijoduola for their contri-\par
        bution of the ASRAB cross assembler.  \par
\par
           Ulrich Raich and Razaq Ijoduola\par
           PS Division\par
           CERN\par
           CH-1211 Geneva-23\par
        \par
                Ulrich Raich\par
                Ulrich dot Raich at cern dot ch\par
\par
\par
\par
\par
        BI.2  PROCESSOR SPECIFIC DIRECTIVES \par
\par
\par
             The ASRAB assembler is a port of the ASZ80 assembler.  This\par
        assembler can process Z80, HD64180 (Z180), and Rabbit  2000/3000\par
        (default)  code.   The  following  processor  specific assembler\par
        directives specify which processor to target when processing the\par
        input assembler files.  \par
\par
\par
\page\par
\par
        ASRAB ASSEMBLER                                        PAGE BI-2\par
        PROCESSOR SPECIFIC DIRECTIVES\par
\par
\par
        BI.2.1  .r2k Directive \par
\par
        Format:  \par
\par
                .r2k \par
\par
        The  .r2k  directive  enables processing of the Rabbit 2000/3000\par
        specific mnemonics.  Mnemonics not associated  with  the  Rabbit\par
        2000/3000 processor will be flagged with an <o> error.  Address-\par
        ing modes not supported by the Rabbit 2000/3000 will be  flagged\par
        with  an <a> error.  A synonym of .r2k is .r3k.  The default as-\par
        sembler mode is .r2k.  \par
\par
             The  .r2k  directive  also  selects  the  Rabbit  2000/3000\par
        specific cycles count to be output.  \par
\par
\par
        BI.2.2  .hd64 Directive \par
\par
        Format:  \par
\par
                .hd64 \par
\par
        The  .hd64  directive  enables  processing of the HD64180 (Z180)\par
        specific mnemonics not included  in  the  Z80  instruction  set.\par
        Rabbit  2000/3000  mnemonics encountered will be flagged with an\par
        <o> error.  Addressing modes not supported by the HD64180 (Z180)\par
        will be flagged with an <a> error.  A synonym of .hd64 is .z180. \par
\par
             The  .hd64 directive also selects the HD64180/Z180 specific\par
        cycles count to be output.  \par
\par
\par
        BI.2.3  .z80 Directive \par
\par
        Format:  \par
\par
                .z80 \par
\par
        The  .z80  directive  enables  processing  of  the  Z80 specific\par
        mnemonics.  HD64180 and Rabbit 2000/3000 specific mnemonics will\par
        be flagged with an <o> error.  Addressing modes not supported by\par
        the z80 will be flagged with an <a> error.  \par
\par
             The  .z80  directive  also  selects the Z80 specific cycles\par
        count to be output.  \par
\par
\par
\page\par
\par
        ASRAB ASSEMBLER                                        PAGE BI-3\par
        PROCESSOR SPECIFIC DIRECTIVES\par
\par
\par
        BI.2.4  The .__.CPU.  Variable \par
\par
\par
             The  value of the pre-defined symbol '.__.CPU.' corresponds\par
        to the selected processor type.  The default value  is  0  which\par
        corresponds  to the default processor type.  The following table\par
        lists the processor types and associated values  for  the  ASRAB\par
        assembler:  \par
\par
                Processor Type            .__.CPU. Value\par
                --------------            --------------\par
                 .r2k / .r3k                     0\par
                .hd64 / .z180                    1\par
                    .z80                         2\par
\par
\par
             The  variable '.__.CPU.' is by default defined as local and\par
        will not be output to the created .rel file.  The assembler com-\par
        mand line options -g or -a will not cause the local symbol to be\par
        output to the created .rel file.  \par
\par
             The  assembler  .globl  directive may be used to change the\par
        variable type to global causing its definition to be  output  to\par
        the  .rel file.  The inclusion of the definition of the variable\par
        '.__.CPU.' might be a useful means of validating that seperately\par
        assembled  files have been compiled for the same processor type.\par
        The linker will report an error for variables with multiple  non\par
        equal definitions.  \par
\page\par
\par
        ASRAB ASSEMBLER                                        PAGE BI-4\par
        PROCESSOR SPECIFIC DIRECTIVES\par
\par
\par
        BI.3  RABBIT 2000/3000 ADDRESSING AND INSTRUCTIONS \par
\par
\par
\par
        BI.3.1  Instruction Symbols \par
\par
\par
        b       Bit select\par
                        (000 = bit 0, 001 = bit 1,\par
                         010 = bit 2, 011 = bit 3,\par
                         100 = bit 4, 101 = bit 5,\par
                         110 = bit 6, 111 = bit 7)\par
        cc      Condition code select\par
                        (00 = NZ, 01 = Z, 10 = NC, 11 = C)\par
        d       8-bit (signed) displacement.\par
                Expressed in two\\'s complement.\par
        dd      word register select-destination\par
                        (00 = BC, 01 = DE, 10 = HL, 11 = SP)\par
        dd'     word register select-alternate\par
                        (00 = BC', 01 = DE', 10 = HL')\par
        e       8-bit (signed) displacement added to PC.\par
        f       condition code select\par
                        (000 = NZ, 001 = Z, 010 = NC, 011 = C,\par
                         100 = LZ/NV, 101 = LO/V, 110 = P, 111 = M)\par
        m       the most significant bits(MSB) of a 16-bit constant\par
        mn      16-bit constant\par
        n       8-bit constant or the least significant bits(LSB)\par
                of a 16-bit constant\par
        r, g    byte register select\par
                        (000 = B, 001 = C, 010 = D, 011 = E,\par
                         100 = H, 101 = L, 111 = A)\par
        ss      word register select-source\par
                        (00 = BC, 01 = DE, 10 = HL, 11 = SP)\par
        v       Restart address select\par
                        (010 = 0020h, 011 = 0030h, 100 = 0040h,\par
                         101 = 0050h, 111 = 0070h)\par
        x       an 8-bit constant to load into the XPC\par
        xx      word register select\par
                        (00 = BC, 01 = DE, 10 = IX, 11 = SP)\par
        yy      word register select\par
                        (00 = BC, 01 = DE, 10 = IY, 11 = SP)\par
        zz      word register select\par
                        (00 = BC, 01 = DE, 10 = HL, 11 = AF)\par
\page\par
\par
        ASRAB ASSEMBLER                                        PAGE BI-5\par
        RABBIT 2000/3000 ADDRESSING AND INSTRUCTIONS\par
\par
\par
                C  -    carry bit set\par
                M  -    sign bit set\par
                NC -    carry bit clear\par
                NZ -    zero bit clear\par
                P  -    sign bit clear\par
                PE -    parity even\par
                V  -    overflow bit set\par
                PO -    parity odd\par
                NV -    overflow bit clear\par
                Z  -    zero bit set\par
\par
\par
        The  terms  m, mn, n, and x may all be expressions.  The terms b\par
        and v are not allowed to be external references.  \par
\page\par
\par
        ASRAB ASSEMBLER                                        PAGE BI-6\par
        RABBIT 2000/3000 ADDRESSING AND INSTRUCTIONS\par
\par
\par
        BI.3.2  Rabbit Instructions \par
\par
\par
             The  following list of instructions (with explicit address-\par
        ing modes) are available in the Rabbit 2000/3000 assembler mode.\par
        Those instructions denoted by an asterisk (*) are additional in-\par
        structions not available in the HD64180 or Z80 assembler mode.  \par
\par
         ADC A,n                 DEC IX                  LD A,EIR\par
         ADC A,r                 DEC IY                  LD A,IIR\par
         ADC A,(HL)              DEC r                  *LD A,XPC\par
         ADC A,(IX+d)            DEC ss                  LD A,(BC)\par
         ADC A,(IY+d)            DEC (HL)                LD A,(DE)\par
         ADC HL,ss               DEC (IX+d)              LD A,(mn)\par
         ADD A,n                 DEC (IY+d)             *LD dd,BC\par
         ADD A,r                 DJNZ e                 *LD dd,DE\par
         ADD A,(HL)                                      LD dd,mn\par
         ADD A,(IX+d)            EX AF,AF                LD dd,(mn)\par
         ADD A,(IY+d)            EX DE,HL                LD EIR,A\par
         ADD HL,ss               EX DE,HL               *LD HL,IX\par
         ADD IX,xx               EX (SP),HL             *LD HL,IY\par
         ADD IY,yy               EX (SP),IX             *LD HL,(HL+d)\par
        *ADD SP,d                EX (SP),IY             *LD HL,(IX+d)\par
        *ALTD                    EXX                    *LD HL,(IY+d)\par
        *AND HL,DE                                       LD HL,(mn)\par
        *AND IX,DE               INC IX                 *LD HL,(SP+n)\par
        *AND IY,DE               INC IY                  LD IIR,A\par
         AND n                   INC r                  *LD IX,HL\par
         AND r                   INC ss                  LD IX,mn\par
         AND (HL)                INC (HL)                LD IX,(mn)\par
         AND (IX+d)              INC (IX+d)             *LD IX,(SP+n)\par
         AND (IY+d)              INC (IY+d)             *LD IY,HL\par
                                *IOE                     LD IY,mn\par
         BIT b,r                *IOI                     LD IY,(mn)\par
         BIT b,(HL)             *IPRES                  *LD IY,(SP+n)\par
         BIT b,(IX+d)           *IPSET 0                 LD r,g\par
         BIT b,(IY+d)           *IPSET 1                 LD r,n\par
        *BOOL HL                *IPSET 2                 LD r,(HL)\par
        *BOOL IX                *IPSET 3                 LD r,(IX+d)\par
        *BOOL IY                                         LD r,(IY+d)\par
                                 JP f,mn                 LD SP,HL\par
         CALL mn                 JP mn                   LD SP,IX\par
         CCF                     JP (HL)                 LD SP,IY\par
         CP n                    JP (IX)                *LD XPC,A\par
         CP r                    JP (IY)                 LD (BC),A\par
         CP (HL)                 JR cc,e                 LD (DE),A\par
         CP (IX+d)               JR e                    LD (HL),n\par
         CP (IY+d)                                       LD (HL),r\par
         CPL                    *LCALL x,mn\par
\page\par
\par
        ASRAB ASSEMBLER                                        PAGE BI-7\par
        RABBIT 2000/3000 ADDRESSING AND INSTRUCTIONS\par
\par
\par
        *LD (HL+d),HL           *POP IP                  SBC A,n\par
        *LD (IX+d),HL            POP IX                  SBC A,r\par
         LD (IX+d),n             POP IY                  SBC A,(HL)\par
         LD (IX+d),r             POP zz                  SBC HL,ss\par
        *LD (IY+d),HL           *PUSH IP                 SBC (IX+d)\par
         LD (IY+d),n             PUSH IX                 SBC (IY+d)\par
         LD (IY+d),r             PUSH IY                 SCF\par
         LD (mn),A               PUSH zz                 SET b,r\par
         LD (mn),HL                                      SET b,(HL)\par
         LD (mn),IX              RA                      SET b,(IX+d)\par
         LD (mn),IY              RES b,r                 SET b,(IY+d)\par
         LD (mn),ss              RES b,(HL)              SLA r\par
        *LD (SP+n),HL            RES b,(IX+d)            SLA (HL)\par
        *LD (SP+n),IX            RES b,(IY+d)            SLA (IX+d)\par
        *LD (SP+n),IY            RET                     SLA (IY+d)\par
         LDD                     RET f                   SRA r\par
         LDDR                   *RETI                    SRA (HL)\par
         LDI                    *RL DE                   SRA (IX+d)\par
         LDIR                    RL r                    SRA (IY+d)\par
        *LDP HL,(HL)             RL (HL)                 SRL r\par
        *LDP HL,(IX)             RL (IX+d)               SRL (HL)\par
        *LDP HL,(IY)             RL (IY+d)               SRL (IX+d)\par
        *LDP HL,(mn)             RLA                     SRL (IY+d)\par
        *LDP IX,(mn)             RLC r                   SUB n\par
        *LDP IY,(mn)             RLC (HL)                SUB r\par
        *LDP (HL),HL             RLC (IX+d)              SUB (HL)\par
        *LDP (IX),HL             RLC (IY+d)              SUB (IX+d)\par
        *LDP (IY),HL             RLCA                    SUB (IY+d)\par
        *LDP (mn),HL            *RR DE\par
        *LDP (mn),IX            *RR HL                   XOR n\par
        *LDP (mn),IY            *RR IX                   XOR r\par
         LJP x,mn               *RR IY                   XOR (HL)\par
         LRET                    RR r                    XOR (IX+d)\par
                                 RR (HL)                 XOR (IY+d)\par
        *MUL                     RR (IX+d)\par
                                 RR (IY+d)\par
         NEG                     RRC r\par
         NOP                     RRC (HL)\par
                                 RRC (IX+d)\par
        *OR HL,DE                RRC (IY+d)\par
        *OR IX,DE                RRCA\par
        *OR IY,DE                RST v\par
         OR n\par
         OR r\par
         OR (HL)\par
         OR (IX+d)\par
         OR (IY+d)\par
\par
\par
\page\par
\par
        ASRAB ASSEMBLER                                        PAGE BI-8\par
        Z80/HD64180 ADDRESSING AND INSTRUCTIONS\par
\par
\par
        BI.4  Z80/HD64180 ADDRESSING AND INSTRUCTIONS \par
\par
\par
             The   following   list   specifies   the  format  for  each\par
        Z80/HD64180 addressing mode supported by ASZ80:  \par
\par
                #data           immediate data\par
                                byte or word data\par
        \par
                n               byte value\par
        \par
                rg              a byte register\par
                                a,b,c,d,e,h,l\par
        \par
                rp              a register pair\par
                                bc,de,hl\par
        \par
                (hl)            implied addressing or\par
                                register indirect addressing\par
        \par
                (label)         direct addressing\par
        \par
                (ix+offset)     indexed addressing with\par
                 offset(ix)     an offset\par
        \par
                label           call/jmp/jr label\par
\par
        The  terms  data,  n, label, and offset, may all be expressions.\par
        The terms dir and offset are not allowed to be  external  refer-\par
        ences.  \par
\par
             The  following tables list all Z80/HD64180 mnemonics recog-\par
        nized by the ASRAB assembler.  The designation []  refers  to  a\par
        required addressing mode argument.  \par
\par
             Note that not all addressing modes are valid with every in-\par
        struction, refer to the Z80/HD64180  technical  data  for  valid\par
        modes.  \par
\page\par
\par
        ASRAB ASSEMBLER                                        PAGE BI-9\par
        Z80/HD64180 ADDRESSING AND INSTRUCTIONS\par
\par
\par
        BI.4.1  Inherent Instructions \par
\par
                ccf             cpd\par
                cpdr            cpi\par
                cpir            cpl\par
                daa             di\par
                ei              exx\par
                halt            neg\par
                nop             reti\par
                retn            rla\par
                rlca            rld\par
                rra             rrca\par
                rrd             scf\par
\par
\par
        BI.4.2  Implicit Operand Instructions \par
\par
                adc     a,[]            adc     []\par
                add     a,[]            add     []\par
                and     a,[]            and     []\par
                cp      a,[]            cp      []\par
                dec     a,[]            dec     []\par
                inc     a,[]            inc     []\par
                or      a,[]            or      []\par
                rl      a,[]            rl      []\par
                rlc     a,[]            rlc     []\par
                rr      a,[]            rr      []\par
                rrc     a,[]            rrc     []\par
                sbc     a,[]            sbc     []\par
                sla     a,[]            sla     []\par
                sra     a,[]            sra     []\par
                srl     a,[]            srl     []\par
                sub     a,[]            sub     []\par
                xor     a,[]            xor     []\par
\page\par
\par
        ASRAB ASSEMBLER                                       PAGE BI-10\par
        Z80/HD64180 ADDRESSING AND INSTRUCTIONS\par
\par
\par
        BI.4.3  Load Instruction \par
\par
                ld      rg,[]           ld      [],rg\par
                ld      (bc),a          ld      a,(bc)\par
                ld      (de),a          ld      a,(de)\par
                ld      (label),a       ld      a,(label)\par
                ld      (label),rp      ld      rp,(label)\par
                ld      i,a             ld      r,a\par
                ld      a,i             ld      a,r\par
                ld      sp,hl           ld      sp,ix\par
                ld      sp,iy           ld      rp,#data\par
        \par
                ldd                     lddr\par
                ldi                     ldir\par
\par
\par
        BI.4.4  Call/Return Instructions \par
\par
                call    C,label         ret     C\par
                call    M,label         ret     M\par
                call    NC,label        ret     NC\par
                call    NZ,label        ret     NZ\par
                call    P,label         ret     P\par
                call    PE,label        ret     PE\par
                call    PO,label        ret     PO\par
                call    Z,label         ret     Z\par
                call    label           ret\par
\par
\par
        BI.4.5  Jump and Jump to Subroutine Instructions \par
\par
                jp      C,label         jp      M,label\par
                jp      NC,label        jp      NZ,label\par
                jp      P,label         jp      PE,label\par
                jp      PO,label        jp      Z,label\par
        \par
                jp      (hl)            jp      (ix)\par
                jp      (iy)            jp      label\par
        \par
                djnz    label\par
        \par
                jr      C,label         jr      NC,label\par
                jr      NZ,label        jr      Z,label\par
                jr      label\par
\page\par
\par
        ASRAB ASSEMBLER                                       PAGE BI-11\par
        Z80/HD64180 ADDRESSING AND INSTRUCTIONS\par
\par
\par
        BI.4.6  Bit Manipulation Instructions \par
\par
                bit     n,[]\par
                res     n,[]\par
                set     n,[]\par
\par
\par
        BI.4.7  Interrupt Mode and Reset Instructions \par
\par
                im      n\par
                im      n\par
                im      n\par
                rst     n\par
\par
\par
        BI.4.8  Input and Output Instructions \par
\par
                in      a,(n)           in      rg,(c)\par
                ind                     indr\par
                ini                     inir\par
        \par
                out     (n),a           out     (c),rg\par
                outd                    otdr\par
                outi                    otir\par
\par
\par
        BI.4.9  Register Pair Instructions \par
\par
                add     hl,rp           add     ix,rp\par
                add     iy,rp\par
        \par
                adc     hl,rp           sbc     hl,rp\par
        \par
                ex      (sp),hl         ex      (sp),ix\par
                ex      (sp),iy\par
                ex      de,hl\par
                ex      af,af'\par
        \par
                push    rp              pop     rp\par
\page\par
\par
        ASRAB ASSEMBLER                                       PAGE BI-12\par
        Z80/HD64180 ADDRESSING AND INSTRUCTIONS\par
\par
\par
        BI.4.10  HD64180 Specific Instructions \par
\par
                in0     rg,(n)\par
                out0    (n),rg\par
        \par
                otdm                    otdmr\par
                otim                    otimr\par
        \par
                mlt     bc              mlt     de\par
                mlt     hl              mlt     sp\par
        \par
                slp\par
        \par
                tst     a\par
                tstio   #data\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX BJ\cf1\par
\par
                                \cf2 ASSCMP ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        BJ.1  SC/MP REGISTER SET \par
\par
        The following is a list of the SC/MP registers used by ASSCMP:  \par
\par
                p0,pc      -    16-bit program counter\par
                p1,p2,p3   -    16-bit pointer registers\par
\par
\par
        BJ.2  SC/MP ADDRESSING MODES \par
\par
\par
             The  general addressing modes are normally described in the\par
        form @DISP(X) which correspond to these specific modes:  \par
\par
            DISP        a PC relative address\par
            DISP(X)     a DISPlacement from a pointer register\par
            @DISP(X)    An auto-increment DISPlacement from a\par
                        pointer register\par
\par
\par
             The ASSCMP assembler also allows the ( and ) designators to\par
        be replaced by the [ and ] designators.  \par
\par
             The  ASSCMP  assembler  also allows several shorthand nota-\par
        tions for the addressing modes as shown here:  \par
\par
            (X)         ==>>    0(X)\par
            @(X)        ==>>    @0(X)\par
            @DISP       ==>>    @DISP(PC)\par
\par
\par
             The  xpal,  xpah,  and  xppc  instructions  require  only a\par
        pointer register - p0, p1, p2, p3, or pc.  \par
\page\par
\par
        ASSCMP ASSEMBLER                                       PAGE BJ-2\par
        SC/MP ADDRESSING MODES\par
\par
\par
             The  standard  memory reference instructions:  ld, and, or,\par
        xor, dad, add, and cad also allow an  alternate  immediate  mode\par
        instruction using the following format:  \par
\par
            ld  #DATA\par
\par
\par
             The  #  is  required otherwise DATA will be treated as a PC\par
        relative address.  \par
\par
             The  immediate mode instructions:  ldi, ani, ori, xri, dai,\par
        adi, and cai allow either of these forms:  \par
\par
            ldi #DATA\par
            ldi DATA\par
\par
\par
        BJ.3  SC/MP INSTRUCTION SET \par
\par
\par
             The following tables list all SC/MP mnemonics recognized by\par
        the ASSCMP assembler.  \par
\par
\par
        BJ.3.1  Memory Reference Instructions \par
\par
                ld      @DISP(X) / #data        Load\par
                st      @DISP(X) -------        Store\par
                and     @DISP(X) / #data        AND\par
                or      @DISP(X) / #data        OR\par
                xor     @DISP(X) / #data        Exclusive OR\par
                dad     @DISP(X) / #data        Decimal Add\par
                add     @DISP(X) / #data        Add\par
                cad     @DISP(X) / #data        Complement and Add\par
\par
\par
        BJ.3.2  Immediate Instructions \par
\par
                ldi     #data / data    Load Immediate\par
                ld      #data\par
                ani     #data / data    AND Immediate\par
                and     #data\par
                ori     #data / data    Or Immediate\par
                or      #data\par
                xri     #data / data    Exclusive Or Immediate\par
                xor     #data\par
                dai     #data / data    Decimal Add Immediate\par
                dad     #data\par
                adi     #data / data    Add Immediate\par
\page\par
\par
        ASSCMP ASSEMBLER                                       PAGE BJ-3\par
        SC/MP INSTRUCTION SET\par
\par
\par
                add     #data\par
                cai     #data / data    Complement and Add Immediate\par
                cad     #data\par
\par
\par
        BJ.3.3  Extension Register Instructions \par
\par
                lde             Load AC from Extension\par
                xae             Exchange AC and Extension\par
                ane             AND Extension\par
                ore             OR Extension\par
                xre             Exclusive Or Extension\par
                dae             Decimal Add Extension\par
                ade             Add Extension\par
                cae             Complement and Add Extension\par
\par
\par
        BJ.3.4  Memory Increment/Decrement Instructions \par
\par
                dld     DISP(X)         Increment and Load\par
                ild     DISP(X)         Decrement  aand Load\par
\par
\par
        BJ.3.5  Transfer Instructions \par
\par
                jmp     DISP(X)         Jump\par
                jp      DISP(X)         Jump if Positive\par
                jz      DISP(X)         Jump if Zero\par
                jnz     DISP(X)         Jump if Not Zero\par
\par
\par
        BJ.3.6  Pointer Register Move Instructions \par
\par
                xpal    X               Exchange Pointer Low\par
                xpah    X               Exchange Pointer High\par
                xppc    X               Exchange Pointer with PC\par
\par
\par
\page\par
\par
        ASSCMP ASSEMBLER                                       PAGE BJ-4\par
        SC/MP INSTRUCTION SET\par
\par
\par
        BJ.3.7  Shift, Rotate, Serial I/O Instructions \par
\par
                sio             Serial Input/Output\par
                sr              Shift Right\par
                srl             Shift Right with Link\par
                rr              Rotate Right\par
                rrl             Rotate Right with Link\par
\par
\par
        BJ.3.8  Single-Byte Miscellaneous Instructions \par
\par
                halt            Halt\par
                ccl             Clear Carry Link\par
                scl             Set Carry Link\par
                dint            Disable Interrupt\par
                ien             Enable Interrupt\par
                csa             Copy Status to AC\par
                cas             Copy AC to Status\par
                nop             No Operation\par
\par
\par
        BJ.3.9  Double-Byte Miscellaneous Instruction \par
\par
                dly     #data / data    Delay\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX BK\cf1\par
\par
                                 \cf2 ASST6 ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        BK.1  ST6 REGISTER SET \par
\par
        The following is a list of the ST6 registers used by ASST6:  \par
\par
                a       -       8-bit accumulator\par
                x,y     -       8-bit index registers\par
                v,w     -       8-bit scratch registers\par
\par
\par
        BK.2  ST6 INSTRUCTION SET \par
\par
\par
             The following list specifies the format for each addressing\par
        mode supported by ASST6:  \par
\par
                r               register (a,x,y,w,v) addressing\par
        \par
                #data           immediate data byte\par
        \par
                dir or *dir     8-bit zero page addressing\par
                                0 <= dir <= 255 \par
        \par
                ext             12-bit extended addressing\par
        \par
                (x) or (y)      register indirect addressing\par
        \par
                label           pc-relative branch addressing\par
\par
        The  terms  data, dir, offset, ext, and label may all be expres-\par
        sions.  \par
\par
             Note that not all addressing modes are valid with every in-\par
        struction, refer to the ST6 technical data for valid modes.  \par
\page\par
\par
        ASST6 ASSEMBLER                                        PAGE BK-2\par
        ST6 INSTRUCTION SET\par
\par
\par
        The  following  tables  list all ST6 mnemonics recognized by the\par
        ASST6 assembler.  \par
\par
\par
        BK.2.1  Inherent Instructions \par
\par
                nop                     ret\par
                reti                    stop\par
                wait\par
\par
\par
        BK.2.2  Conditional Branch Instructions \par
\par
                jrc     label           jrnc    label\par
                jrz     label           jrnz    label\par
                jrr     #,*dir,label\par
                jrs     #,*dir,label\par
\par
\par
        BK.2.3  Bit Manipulation Instructions \par
\par
                set     #,*dir          res     #,*dir\par
\par
\par
        BK.2.4  Single Operand Instructions \par
\par
                clr     a               clr     *dir\par
                com     a\par
        \par
                dec     r               dec     *dir\par
                dec     (x)             dec     (y)\par
                inc     r               inc     *dir\par
                inc     (x)             inc     (y)\par
        \par
                rlc     a               sla     a\par
\page\par
\par
        ASST6 ASSEMBLER                                        PAGE BK-3\par
        ST6 INSTRUCTION SET\par
\par
\par
        BK.2.5  Double Operand Instructions \par
\par
                add     a,(x)           add     a,(y)\par
                add     a,*dir          addi    a,#\par
        \par
                and     a,(x)           and     a,(y)\par
                and     a,*dir          andi    a,#\par
        \par
                cp      a,(x)           cp      a,(y)\par
                cp      a,*dir          cpi     a,#\par
        \par
                sub     a,(x)           sub     a,(y)\par
                sub     a,*dir          subi    a,#\par
\par
\par
        BK.2.6  Call to Subroutine and Jump Instructions \par
\par
                call    ext             jmp     ext\par
\par
\par
        BK.2.7  Load and Store Instructions \par
\par
                ld      a,x             ld      a,y\par
                ld      a,v             ld      a,w\par
        \par
                ld      x,a             ld      y,a\par
                ld      v,a             ld      w,a\par
        \par
                ld      a,*dir          ld      *dir,a\par
        \par
                ld      a,(x)           ld      a,(y)\par
                ld      (x),a           ld      (y),a\par
        \par
                ldi     a,#             ld      *dir,#\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX BL\cf1\par
\par
                                 \cf2 ASST7 ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        BL.1  ST7 REGISTER SET \par
\par
        The following is a list of the ST7 registers used by ASST7:  \par
\par
                a       -       8-bit accumulator\par
                x,y     -       8-bit index registers\par
                cc      -       8-bit condition code register\par
                s       -       16-bit stack pointer\par
\par
\par
        BL.2  ST7 INSTRUCTION SET \par
\par
\par
             The following list specifies the format for each addressing\par
        mode supported by ASST7:  \par
\par
                reg             register addressing\par
                                (a,x,y,s,cc)\par
        \par
                #data           immediate data byte\par
        \par
                *saddr          8-bit zero page addressing\par
                                0x00 <= dir <= 0xFF\par
        \par
                laddr           16-bit addressing\par
        \par
                (x)             register indirect addressing\par
\page\par
\par
        ASST7 ASSEMBLER                                        PAGE BL-2\par
        ST7 INSTRUCTION SET\par
\par
\par
                (*sofst,r)      short indexed (r = x,y)\par
                (sofst,r).b\par
        \par
                (lofst,r).w     long indexed (r = x,y)\par
        \par
                (ofst,r)        if ofst is relocatable or\par
                                an external value then\par
                                the (lofst,r).w mode is\par
                                selected by default\par
                                else\par
        \par
                (ofst,r)        if ofst is a locally\par
                                defined constant then\par
                                the (sofst,r).b mode\par
                                is selected when\par
                                0x00 <= ofst <= 0xFF else\par
                                the (lofst,r).w mode\par
                                is selected\par
        \par
                                Instructions supporting\par
                                only a single form will\par
                                use the appropriate form\par
                                but will report an error.\par
        \par
        \par
                [*saddr]        short indirect\par
                [saddr].b\par
        \par
                [laddr].w       long indexed\par
        \par
                [addr]          if addr is relocatable or\par
                                an external value then\par
                                the [laddr].w mode is\par
                                selected by default\par
                                else\par
        \par
                [addr]          if addr is a locally\par
                                defined constant then\par
                                the [saddr].b mode\par
                                is selected when\par
                                0x00 <= addr <= 0xFF else\par
                                the [laddr].w mode\par
                                is selected\par
        \par
                                Instructions supporting\par
                                only a single form will\par
                                use the appropriate form\par
                                but will report an error.\par
\page\par
\par
        ASST7 ASSEMBLER                                        PAGE BL-3\par
        ST7 INSTRUCTION SET\par
\par
\par
                ([*saddr],r)    short indirect indexed\par
                ([saddr].b,r)   (r = x,y)\par
                ([saddr],r).b\par
        \par
                ([laddr].w,r)   long indirect indexed\par
                ([laddr],r).w   (r = x,y)\par
        \par
                ([addr],r)      if addr is relocatable or\par
                                an external value then\par
                                the ([laddr],r).w mode is\par
                                selected by default\par
                                else\par
        \par
                ([addr],r)      if addr is a locally\par
                                defined constant then\par
                                the ([saddr],r).b mode\par
                                is selected when\par
                                0x00 <= addr <= 0xFF else\par
                                the ([laddr],r).w mode\par
                                is selected\par
        \par
                                Instructions supporting\par
                                only a single form will\par
                                use the appropriate form\par
                                but will report an error.\par
        \par
        \par
                label           pc-relative branch addressing\par
\par
\par
\par
        The  terms  data,  saddr,  laddr,  addr, sofst, lofst, ofst, and\par
        label may all be expressions.  \par
\par
             Note that not all addressing modes are valid with every in-\par
        struction, refer to the ST7 technical data for valid modes.  \par
        The  following  tables  list all ST7 mnemonics recognized by the\par
        ASST7 assembler.  The designation [] refers to  a  required  ad-\par
        dressing mode argument.  \par
\page\par
\par
        ASST7 ASSEMBLER                                        PAGE BL-4\par
        ST7 INSTRUCTION SET\par
\par
\par
        BL.2.1  Inherent Instructions \par
\par
                nop                     trap\par
                wfi                     halt\par
                ret                     iret\par
                sim                     rim\par
                scf                     rcf\par
                rsp\par
\par
\par
        BL.2.2  Conditional Branch Instructions \par
\par
                jra     label\par
                jrt     label           jrf     label\par
                jrih    label           jril    label\par
                jrh     label           jrnh    label\par
                jrm     label           jrnm    label\par
                jrmi    label           jrpl    label\par
                jreq    label           jrne    label\par
                jrc     label           jrnc    label\par
                jrult   label           jruge   label\par
                jrugt   label           jrule   label\par
        \par
                jra     [saddr]\par
                jrt     [saddr]         jrf     [saddr]\par
                jrih    [saddr]         jril    [saddr]\par
                jrh     [saddr]         jrnh    [saddr]\par
                jrm     [saddr]         jrnm    [saddr]\par
                jrmi    [saddr]         jrpl    [saddr]\par
                jreq    [saddr]         jrne    [saddr]\par
                jrc     [saddr]         jrnc    [saddr]\par
                jrult   [saddr]         jruge   [saddr]\par
                jrugt   [saddr]         jrule   [saddr]\par
\par
\par
        BL.2.3  Bit Test and Branch Instructions \par
\par
                btjt    saddr,#,label\par
                btjf    saddr,#,label\par
                btjt    [saddr],#,label\par
                btjf    [saddr],#,label\par
\par
\par
\page\par
\par
        ASST7 ASSEMBLER                                        PAGE BL-5\par
        ST7 INSTRUCTION SET\par
\par
\par
        BL.2.4  Bit Manipulation Instructions \par
\par
                bset    saddr,#\par
                bres    saddr,#\par
                bset    [saddr],#\par
                bres    [saddr],#\par
\par
\par
        BL.2.5  Single Operand Instructions \par
\par
                neg     []              cpl     []\par
                srl     []              rrc     []\par
                sra     []              rlc     []\par
                sll     []              sla     []\par
                dec     []              inc     []\par
                tnz     []              swap    []\par
                clr     []\par
        \par
                pop     reg             push    reg\par
\par
\par
        BL.2.6  Double Operand Instructions \par
\par
                add     a,[]            adc     a,[]\par
                and     a,[]            bcp     a,[]\par
                or      a,[]            sbc     a,[]\par
                sub     a,[]            xor     a,[]\par
        \par
                mul     x,a             mul     y,a\par
        \par
                cp      reg,[]\par
        \par
                ld      [],[]\par
\par
\par
        BL.2.7  Call to Subroutine and Jump Instructions \par
\par
                call    []              jp      []\par
        \par
                callr   label           callr   [saddr]\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX BM\cf1\par
\par
                                 \cf2 ASST8 ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        BM.1  ST8 REGISTER SET \par
\par
        The following is a list of the ST8 registers used by ASST8:  \par
\par
                a       -       8-bit accumulator\par
                xl,yl   -       LSB of index registers\par
                xh,yh   -       MSB of index registers\par
                x,y     -       16-Bit index registers\par
                sp      -       16-bit stack pointer\par
                cc      -       8-bit condition code register\par
\par
\par
        BM.2  ST8 INSTRUCTION SET \par
\par
\par
             The following list specifies the format for each addressing\par
        mode supported by ASST8:  \par
\par
                reg             register addressing\par
                                (a,x,xl,xh,y,yl,yh,sp,cc)\par
        \par
                #data           immediate data\par
        \par
                *saddr          8-bit zero page addressing\par
                                0x00 <= saddr <= 0xFF\par
        \par
                laddr           16-bit addressing\par
                                0x0000 <= laddr <= 0xFFFF\par
        \par
                eaddr           24-bit addressing\par
                                0x000000 <= eaddr <= 0xFFFFFF\par
        \par
                (x)             register indirect addressing\par
\page\par
\par
        ASST8 ASSEMBLER                                        PAGE BM-2\par
        ST8 INSTRUCTION SET\par
\par
\par
                (*sofst,r)      short indexed (r = x,y,sp)\par
                (sofst,r).b\par
        \par
                (lofst,r).w     long indexed (r = x,y)\par
        \par
                (eofst,r).e     extended indexed (r = x,y)\par
                                eofst is a lofst value,\par
                                i.e. a 16-bit value where\par
                                (eofst,r).e points to a\par
                                24-bit address\par
        \par
                (ofst,r)        for the ldf instruction the\par
                                (eofst,r).e mode is selected\par
                                else\par
        \par
                (ofst,r)        if ofst is relocatable or\par
                                an external value then\par
                                the (lofst,r).w mode is\par
                                selected by default\par
                                else\par
        \par
                (ofst,r)        if ofst is a locally\par
                                defined constant then\par
                                the (sofst,r).b mode\par
                                is selected when\par
                                0x00 <= ofst <= 0xFF else\par
                                the (lofst,r).w mode\par
                                is selected\par
        \par
                                Instructions supporting\par
                                only a single form will\par
                                use the appropriate form\par
                                but will report an error.\par
        \par
        \par
                [*saddr]        short indirect\par
                [saddr].b\par
        \par
                [laddr].w       long indexed\par
        \par
                [eaddr].e       extended indexed\par
        \par
                [addr]          for the callf, jpf, and ldf\par
                                instructions the [eaddr].e\par
                                mode is selected\par
                                else\par
        \par
                [addr]          if addr is relocatable or\par
                                an external value then\par
\page\par
\par
        ASST8 ASSEMBLER                                        PAGE BM-3\par
        ST8 INSTRUCTION SET\par
\par
\par
                                the [laddr].w mode is\par
                                selected by default\par
                                else\par
        \par
                [addr]          if addr is a locally\par
                                defined constant then\par
                                the [saddr].b mode\par
                                is selected when\par
                                0x00 <= addr <= 0xFF else\par
                                the [laddr].w mode\par
                                is selected\par
        \par
                                Instructions supporting\par
                                only a single form will\par
                                use the appropriate form\par
                                but will report an error.\par
\page\par
\par
        ASST8 ASSEMBLER                                        PAGE BM-4\par
        ST8 INSTRUCTION SET\par
\par
\par
                ([*saddr],r)    short indirect indexed\par
                ([saddr].b,r)   (r = x,y)\par
                ([saddr],r).b\par
        \par
                ([laddr].w,r)   long indirect indexed\par
                ([laddr],r).w   (r = x,y)\par
        \par
                ([eaddr].e,r)   extended indirect indexed\par
                ([eaddr],r).e   (r = x,y)\par
        \par
                ([addr],r)      for the ldf instruction the\par
                                ([eaddr],r).e mode is selected\par
                                else\par
        \par
                ([addr],r)      if addr is relocatable or\par
                                an external value then\par
                                the ([laddr],r).w mode is\par
                                selected by default\par
                                else\par
        \par
                ([addr],r)      if addr is a locally\par
                                defined constant then\par
                                the ([saddr],r).b mode\par
                                is selected when\par
                                0x00 <= addr <= 0xFF else\par
                                the ([laddr],r).w mode\par
                                is selected\par
        \par
                                Instructions supporting\par
                                only a single form will\par
                                use the appropriate form\par
                                but will report an error.\par
        \par
        \par
                label           pc-relative branch addressing\par
\par
\par
\par
        The  terms data, saddr, laddr, eaddr, addr, sofst, lofst, eofst,\par
        ofst, and label may all be expressions.  \par
\par
             Note that not all addressing modes are valid with every in-\par
        struction, refer to the ST8 technical data for valid modes.  \par
        The  following  tables  list all ST8 mnemonics recognized by the\par
        ASST8 assembler.  The designation [] refers to  a  required  ad-\par
        dressing mode argument.  \par
\page\par
\par
        ASST8 ASSEMBLER                                        PAGE BM-5\par
        ST8 INSTRUCTION SET\par
\par
\par
        BM.2.1  Inherent Instructions \par
\par
                nop                     trap\par
                wfi                     wfi\par
                halt                    ret\par
                retf                    iret\par
                sim                     rim\par
                scf                     rcf\par
                rvf                     ccf\par
\par
\par
        BM.2.2  Conditional Branch Instructions \par
\par
                jra     label\par
                jrt     label           jrf     label\par
                jrugt   label           jrule   label\par
                jruge   label           jrult   label\par
                jrnc    label           jrc     label\par
                jrne    label           jreq    label\par
                jrnv    label           jrv     label\par
                jrpl    label           jrmi    label\par
                jrsgt   label           jrsle   label\par
                jrsge   label           jrslt   label\par
                jrnh    label           jrh     label\par
                jrnm    label           jrm     label\par
                jril    label           jrih    label\par
\par
\par
        BM.2.3  Bit Test and Branch Instructions \par
\par
                btjt    laddr,#,label\par
                btjf    laddr,#,label\par
\par
\par
        BM.2.4  Bit Manipulation Instructions \par
\par
                bccm    laddr,#\par
                bcpl    laddr,#\par
                bset    laddr,#\par
                bres    laddr,#\par
\page\par
\par
        ASST8 ASSEMBLER                                        PAGE BM-6\par
        ST8 INSTRUCTION SET\par
\par
\par
        BM.2.5  Single Operand Instructions \par
\par
                neg     []              cpl     []\par
                srl     []              rrc     []\par
                sra     []              rlc     []\par
                sll     []              sla     []\par
                dec     []              inc     []\par
                tnz     []              swap    []\par
                clr     []\par
        \par
                negw    reg             cplw    reg\par
                srlw    reg             rrcw    reg\par
                sraw    reg             rlcw    reg\par
                sllw    reg             slaw    reg\par
                decw    reg             incw    reg\par
                tnzw    reg             swapw   reg\par
                clrw    reg\par
        \par
                pop     reg             push    reg\par
\page\par
\par
        ASST8 ASSEMBLER                                        PAGE BM-7\par
        ST8 INSTRUCTION SET\par
\par
\par
        BM.2.6  Double Operand Instructions \par
\par
                add     a,[]            adc     a,[]\par
                and     a,[]            bcp     a,[]\par
                cp      a,[]            or      a,[]\par
                sbc     a,[]            sub     a,[]\par
                xor     a,[]\par
        \par
                add     sp,#            sub     sp,#\par
        \par
                addw    reg,[]          subw    reg,[]\par
                cpw     reg,[]\par
        \par
                mul     x,a             mul     y,a\par
                div     x,a             div     y,a\par
                divw    x,y\par
        \par
                exg     a,reg           exg     a,laddr\par
                exgw    x,y\par
        \par
                rrwa    x,a             rrwa    y,a\par
                rlwa    x,a             rlwa    y,a\par
        \par
                ld      [],[]\par
                ldf     a,[]            ldf     [],a\par
                ldw     reg,[]          ldw     [],reg\par
        \par
                mov     saddr,saddr\par
                mov     laddr,laddr     mov     laddr,#\par
\par
\par
        BM.2.7  Call to Subroutine and Jump Instructions \par
\par
                call    []              jp      []\par
                callf   eaddr           callf   [eaddr].e\par
                jpf     eaddr           jpf     [eaddr].e\par
        \par
                callr   label\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX BN\cf1\par
\par
                                 \cf2 ASZ8 ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        BN.1  Z8 REGISTER SET \par
\par
        The following is a list of the Z8 registers used by ASZ8:  \par
\par
                r0  ... r15     -        8-bit accumulators\par
                rr0 ... rr15    -       16-bit accumulators\par
\par
\par
        BN.2  Z8 INSTRUCTION SET \par
\par
\par
             The  following  tables  list all Z8 mnemonics recognized by\par
        the ASZ8 assembler.  The designation [] refers to a required ad-\par
        dressing mode argument.  The following list specifies the format\par
        for each addressing mode supported by ASZ8:  \par
\par
                #data           immediate byte data\par
        \par
                addr            location/branch address\par
        \par
                r0  ... r15      8-bit registers\par
        \par
                rr0 ... rr15    16-bit registers\par
        \par
                @rn     or      register indirect addressing\par
                (rn)\par
        \par
                @rrn    or      register indirect addressing\par
                (rrn)\par
        \par
                @addr   or      indirect addressing\par
                (addr)\par
        \par
\page\par
\par
        ASZ8 ASSEMBLER                                         PAGE BN-2\par
        Z8 INSTRUCTION SET\par
\par
\par
                offset(rn)      indexed register addressing\par
\par
        The terms data, addr, and offset may all be expressions.  \par
\par
\par
        The  designation  CC  refers  to a condition code argument.  The\par
        following table contains all the valid condition codes supported\par
        by ASZ8:  \par
\par
                f       Always False            -\par
                t       Always True             -\par
                c       Carry                   C=1\par
                nc      No Carry                C=0\par
                z       Zero                    Z=1\par
                nz      Non-Zero                Z=0\par
                pl      Plus                    S=0\par
                mi      Minus                   S=1\par
                ov      Overflow                V=1\par
                nov     No Overflow             V=0\par
                eq      Equal                   Z=1\par
                ne      Not Equal               Z=0\par
                ge      Greater Than or Equal   (S XOR V)=0\par
                lt      Less Than               (S XOR V)=1\par
                gt      Greater Than            (Z OR (S XOR V))=0\par
                le      Less Than or Equal      (Z OR (S XOR V))=1\par
                uge     Unsigned ge             C=0\par
                ult     Unsigned lt             C=1\par
                ugt     Unsigned gt             (C=0 AND Z=0)=1\par
                ule     Unsigned le             (C OR Z)=1\par
\par
\par
        Note that not all addressing modes are valid with every instruc-\par
        tion, refer to the Z8 technical data for valid modes.  \par
\par
\par
        BN.2.1  Load Instructions \par
\par
                clr     []\par
                ld      [],[]           ldc     [],[]\par
                pop     []              push    []\par
\par
\par
\page\par
\par
        ASZ8 ASSEMBLER                                         PAGE BN-3\par
        Z8 INSTRUCTION SET\par
\par
\par
        BN.2.2  Arithmetic Instructions \par
\par
                adc     [],[]           add     [],[]\par
                cp      [],[]           da      []\par
                dec     []              decw    []\par
                inc     []              incw    []\par
                sbc     [],[]           sub     [],[]\par
\par
\par
        BN.2.3  Logical Instructions \par
\par
                and     [],[]           com     []\par
                or      [],[]           xor     [],[]\par
\par
\par
        BN.2.4  Program Control Instructions \par
\par
                call    []              djnz    [],[]\par
                iret                    jp      CC,[]\par
                jr      CC,[]           ret\par
\par
\par
        BN.2.5  Bit Manipulation Instructions \par
\par
                tcm     [],[]           tm      [],[]\par
                and     [],[]           or      [],[]\par
                xor     [],[]\par
\par
\par
        BN.2.6  Block Transfer Instructions \par
\par
                ldci    [],[]\par
\par
\par
        BN.2.7  Rotate and Shift Instructions \par
\par
                rl      []              rlc     []\par
                rr      []              rrc     []\par
                sra     []              swap    []\par
\par
\par
\page\par
\par
        ASZ8 ASSEMBLER                                         PAGE BN-4\par
        Z8 INSTRUCTION SET\par
\par
\par
        BN.2.8  Cpu Control Instructions \par
\par
                ccf\par
                di                      ei\par
                halt                    nop\par
                rcf                     scf\par
                srp     []\par
                stop                    wait\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX BO\cf1\par
\par
                                 \cf2 ASZ80 ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        BO.1  .z80 DIRECTIVE \par
\par
        Format:  \par
\par
                .z80 \par
\par
        The  .z80  directive enables processing of only the z80 specific\par
        mnemonics.  HD64180/Z180 mnemonics encountered without the .hd64\par
        directive will be flagged with an <o> error.  \par
\par
             The  .z80  directive  also  selects the Z80 specific cycles\par
        count to be output.  \par
\par
\par
        BO.2  .hd64 DIRECTIVE \par
\par
        Format:  \par
\par
                .hd64 \par
\par
        The  .hd64  directive  enables  processing  of  the HD64180/Z180\par
        specific mnemonics not included  in  the  Z80  instruction  set.\par
        HD64180/Z180  mnemonics  encountered without the .hd64 directive\par
        will be flagged with an <o> error.  A synonym of .hd64 is .z180. \par
\par
             The  .hd64 directive also selects the HD64180/Z180 specific\par
        cycles count to be output.  \par
\par
\par
\page\par
\par
        ASZ80 ASSEMBLER                                        PAGE BO-2\par
        THE .__.CPU.  VARIABLE\par
\par
\par
        BO.3  THE .__.CPU.  VARIABLE \par
\par
\par
             The  value of the pre-defined symbol '.__.CPU.' corresponds\par
        to the selected processor type.  The default value  is  0  which\par
        corresponds  to the default processor type.  The following table\par
        lists the processor types and associated values  for  the  ASZ80\par
        assembler:  \par
\par
                Processor Type            .__.CPU. Value\par
                --------------            --------------\par
                    .z80                         0\par
                .hd64 / .z180                    1\par
\par
\par
             The  variable '.__.CPU.' is by default defined as local and\par
        will not be output to the created .rel file.  The assembler com-\par
        mand line options -g or -a will not cause the local symbol to be\par
        output to the created .rel file.  \par
\par
             The  assembler  .globl  directive may be used to change the\par
        the variable type to global causing its definition to be  output\par
        to  the .rel file.  The inclusion of the definition of the vari-\par
        able '.__.CPU.' might be  a  useful  means  of  validating  that\par
        seperately  assembled files have been compiled for the same pro-\par
        cessor type.  The linker will report an error for variables with\par
        multiple non equal definitions.  \par
\par
\par
        BO.4  Z80 REGISTER SET AND CONDITIONS \par
\par
\par
             The  following  is a complete list of register designations\par
        and condition mnemonics:  \par
\par
                byte registers  -       a,b,c,d,e,h,l,i,r\par
                register pairs  -       af,af',bc,de,hl\par
                word registers  -       pc,sp,ix,iy\par
        \par
                C -     carry bit set\par
                M -     sign bit set\par
                NC -    carry bit clear\par
                NZ -    zero bit clear\par
                P -     sign bit clear\par
                PE -    parity even\par
                PO -    parity odd\par
                Z -     zero bit set\par
\par
\par
\page\par
\par
        ASZ80 ASSEMBLER                                        PAGE BO-3\par
        Z80 INSTRUCTION SET\par
\par
\par
        BO.5  Z80 INSTRUCTION SET \par
\par
\par
             The following list specifies the format for each addressing\par
        mode supported by ASZ80:  \par
\par
                #data           immediate data\par
                                byte or word data\par
        \par
                n               byte value\par
        \par
                rg              a byte register\par
                                a,b,c,d,e,h,l\par
        \par
                rp              a register pair\par
                                bc,de,hl\par
        \par
                (hl)            implied addressing or\par
                                register indirect addressing\par
        \par
                (label)         direct addressing\par
        \par
                offset(ix)      indexed addressing with\par
                                an offset\par
        \par
                label           call/jmp/jr label\par
\par
        The terms data, n, label, and offset may all be expressions.  \par
\par
             Note that not all addressing modes are valid with every in-\par
        struction, refer to  the  Z80/HD64180/Z180  technical  data  for\par
        valid modes.  \par
\par
             The  following  tables  list all Z80/HD64180/Z180 mnemonics\par
        recognized by the ASZ80 assembler.  The designation [] refers to\par
        a required addressing mode argument.  \par
\page\par
\par
        ASZ80 ASSEMBLER                                        PAGE BO-4\par
        Z80 INSTRUCTION SET\par
\par
\par
        BO.5.1  Inherent Instructions \par
\par
                ccf             cpd\par
                cpdr            cpi\par
                cpir            cpl\par
                daa             di\par
                ei              exx\par
                halt            neg\par
                nop             reti\par
                retn            rla\par
                rlca            rld\par
                rra             rrca\par
                rrd             scf\par
\par
\par
        BO.5.2  Implicit Operand Instructions \par
\par
                adc     a,[]            adc     []\par
                add     a,[]            add     []\par
                and     a,[]            and     []\par
                cp      a,[]            cp      []\par
                dec     a,[]            dec     []\par
                inc     a,[]            inc     []\par
                or      a,[]            or      []\par
                rl      a,[]            rl      []\par
                rlc     a,[]            rlc     []\par
                rr      a,[]            rr      []\par
                rrc     a,[]            rrc     []\par
                sbc     a,[]            sbc     []\par
                sla     a,[]            sla     []\par
                sra     a,[]            sra     []\par
                srl     a,[]            srl     []\par
                sub     a,[]            sub     []\par
                xor     a,[]            xor     []\par
\page\par
\par
        ASZ80 ASSEMBLER                                        PAGE BO-5\par
        Z80 INSTRUCTION SET\par
\par
\par
        BO.5.3  Load Instruction \par
\par
                ld      rg,[]           ld      [],rg\par
                ld      (bc),a          ld      a,(bc)\par
                ld      (de),a          ld      a,(de)\par
                ld      (label),a       ld      a,(label)\par
                ld      (label),rp      ld      rp,(label)\par
                ld      i,a             ld      r,a\par
                ld      a,i             ld      a,r\par
                ld      sp,hl           ld      sp,ix\par
                ld      sp,iy           ld      rp,#data\par
        \par
                ldd                     lddr\par
                ldi                     ldir\par
\par
\par
        BO.5.4  Call/Return Instructions \par
\par
                call    C,label         ret     C\par
                call    M,label         ret     M\par
                call    NC,label        ret     NC\par
                call    NZ,label        ret     NZ\par
                call    P,label         ret     P\par
                call    PE,label        ret     PE\par
                call    PO,label        ret     PO\par
                call    Z,label         ret     Z\par
                call    label           ret\par
\par
\par
        BO.5.5  Jump and Jump to Subroutine Instructions \par
\par
                jp      C,label         jp      M,label\par
                jp      NC,label        jp      NZ,label\par
                jp      P,label         jp      PE,label\par
                jp      PO,label        jp      Z,label\par
        \par
                jp      (hl)            jp      (ix)\par
                jp      (iy)            jp      label\par
        \par
                djnz    label\par
        \par
                jr      C,label         jr      NC,label\par
                jr      NZ,label        jr      Z,label\par
                jr      label\par
\page\par
\par
        ASZ80 ASSEMBLER                                        PAGE BO-6\par
        Z80 INSTRUCTION SET\par
\par
\par
        BO.5.6  Bit Manipulation Instructions \par
\par
                bit     n,[]\par
                res     n,[]\par
                set     n,[]\par
\par
\par
        BO.5.7  Interrupt Mode and Reset Instructions \par
\par
                im      n\par
                im      n\par
                im      n\par
                rst     n\par
\par
\par
        BO.5.8  Input and Output Instructions \par
\par
                in      a,(n)           in      rg,(c)\par
                ind                     indr\par
                ini                     inir\par
        \par
                out     (n),a           out     (c),rg\par
                outd                    otdr\par
                outi                    otir\par
\par
\par
        BO.5.9  Register Pair Instructions \par
\par
                add     hl,rp           add     ix,rp\par
                add     iy,rp\par
        \par
                adc     hl,rp           sbc     hl,rp\par
        \par
                ex      (sp),hl         ex      (sp),ix\par
                ex      (sp),iy\par
                ex      de,hl\par
                ex      af,af'\par
        \par
                push    rp              pop     rp\par
\page\par
\par
        ASZ80 ASSEMBLER                                        PAGE BO-7\par
        Z80 INSTRUCTION SET\par
\par
\par
        BO.5.10  HD64180/Z180 Specific Instructions \par
\par
                in0     rg,(n)\par
                out0    (n),rg\par
        \par
                otdm                    otdmr\par
                otim                    otimr\par
        \par
                mlt     bc              mlt     de\par
                mlt     hl              mlt     sp\par
        \par
                slp\par
        \par
                tst     a\par
                tstio   #data\par
\page\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
\par
                                   \cf2 APPENDIX BP\cf1\par
\par
                                \cf2 ASZ280 ASSEMBLER\cf1\par
\par
\par
\par
\par
\par
        BP.1  ACKNOWLEDGMENT \par
\par
\par
             The ASZ280 cross assembler was written by John Coffman.  \par
\par
                John Coffman\par
                johninsd at gmail dot com\par
\par
\par
\par
             The  ASZ280  assembler  is a completely table driven assem-\par
        bler.   This  assembler  can  process  Z280  (default),  HD64180\par
        (Z180),  and  Z80 code.  The following processor specific assem-\par
        bler directives specify  which  processor  to  target  and  with\par
        specific instruction options when processing the input assembler\par
        files.  \par
\par
\par
        BP.2  PROCESSOR SPECIFIC DIRECTIVES \par
\par
\par
\par
\page\par
\par
        ASZ280 ASSEMBLER                                       PAGE BP-2\par
        PROCESSOR SPECIFIC DIRECTIVES\par
\par
\par
        BP.2.1  .z80 Directive \par
\par
        Format:  \par
\par
                .z80 \par
\par
        The  .z80  directive  enables  processing  of  the  Z80 specific\par
        mnemonics.  Z180 (HD64180) and Z280 mnemonics  will  be  flagged\par
        with  an  <o>  error.  Addressing modes not supported by the z80\par
        will be flagged with an <a> error.  \par
\par
             The  .z80  directive  also  selects the Z80 specific cycles\par
        count to be output.  \par
\par
\par
        BP.2.2  .z80u Directive \par
\par
        Format:  \par
\par
                .z80u \par
\par
        The  .z80u  directive enables processing of the Z80 specific and\par
        Z80 undocumented instructions.  Z180 (HD64180) and Z280  mnemon-\par
        ics  will  be  flagged  with an <o> error.  Addressing modes not\par
        supported by the z80 will be flagged with an <a> error.  \par
\par
             The  .z80u  directive  also selects the Z80 specific cycles\par
        count to be output.  \par
\par
\par
        BP.2.3  .z180 Directive \par
\par
        Format:  \par
\par
                .z180 \par
\par
        The  .z180  directive  enables  processing  of the Z180 specific\par
        mnemonics not included in the Z80 instruction  set.   Addressing\par
        modes  not supported by the Z180 will be flagged with an <a> er-\par
        ror.  A synonym of .z180 is .hd64.  \par
\par
             The  .z180/.hd64  directive  also  selects the Z180/HD64180\par
        specific cycles count to be output.  \par
\par
\par
\page\par
\par
        ASZ280 ASSEMBLER                                       PAGE BP-3\par
        PROCESSOR SPECIFIC DIRECTIVES\par
\par
\par
        BP.2.4  .z280 Directive \par
\par
        Format:  \par
\par
                .z280 \par
\par
        The  .z280  directive  enables  processing  of the Z280 specific\par
        mnemonics,  includes  i/o   instructions,   but   excludes   all\par
        privileged  instructions.  Addressing modes not supported by the\par
        Z280 will be flagged with an <a> error.  \par
\par
             The  .z280  directive also selects the Z280 specific cycles\par
        count to be output.  \par
\par
\par
        BP.2.5  .z280n Directive \par
\par
        Format:  \par
\par
                .z280n \par
\par
        The  .z280n  directive  enables  processing of the Z280 specific\par
        mnemonics,  excludes  i/o   instructions,   and   excludes   all\par
        privileged  instructions.  Addressing modes not supported by the\par
        Z280 will be flagged with an <a> error.  \par
\par
             The  .z280n directive also selects the Z280 specific cycles\par
        count to be output.  \par
\par
\par
        BP.2.6  .z280p Directive \par
\par
        Format:  \par
\par
                .z280p \par
\par
        The  .z280p  directive  enables  processing of the Z280 specific\par
        mnemonics,  includes  i/o   instructions,   and   includes   all\par
        privileged  instructions.  Addressing modes not supported by the\par
        Z280 will be flagged with an <a> error.  \par
\par
             The  .z280p directive also selects the Z280 specific cycles\par
        count to be output.  \par
\par
\par
\page\par
\par
        ASZ280 ASSEMBLER                                       PAGE BP-4\par
        PROCESSOR SPECIFIC DIRECTIVES\par
\par
\par
        BP.2.7  The .__.CPU.  Variable \par
\par
        The  value  of  the pre-defined symbol '.__.CPU.' corresponds to\par
        the selected processor type.  The following table lists the pro-\par
        cessor types and associated values for the ASZ280 assembler:  \par
\par
                Processor Type            .__.CPU. Value\par
                --------------            --------------\par
                    .z80                        0x83\par
                    .z80u                       0x87\par
                    .z180/.hd64                 0x8B\par
                    .z280                       0x33\par
                    .z280n                      0x11\par
                    .z280p                      0xF3\par
\par
\par
             The  variable '.__.CPU.' is by default defined as local and\par
        will not be output to the created .rel file.  The assembler com-\par
        mand line options -g or -a will not cause the local symbol to be\par
        output to the created .rel file.  \par
\par
             The  assembler  .globl  directive may be used to change the\par
        variable type to global causing its definition to be  output  to\par
        the  .rel file.  The inclusion of the definition of the variable\par
        '.__.CPU.' might be a useful means of validating that seperately\par
        assembled  files have been compiled for the same processor type.\par
        The linker will report an error for variables with multiple  non\par
        equal definitions.  \par
\page\par
\par
        ASZ280 ASSEMBLER                                       PAGE BP-5\par
        PROCESSOR SPECIFIC DIRECTIVES\par
\par
\par
        BP.3  Z280 ADDRESSING AND INSTRUCTIONS \par
\par
\par
\par
        BP.3.1  Registers \par
\par
         Recognized Registers\par
         -----------------------------------------------------\par
          8-bit  data registers:        A,B,C,D,E,H,L\par
          16-Bit data registers:        BC,DE,HL,IX,IY\par
          Accumulator/Flag registers:   AF,AF'\par
          Program Counter:              PC\par
          Stack Pointer:                SP\par
         -----------------------------------------------------\par
\par
\par
        BP.3.2  Condition Codes \par
\par
         Condition Codes for Jump, Call, and Return Instructions\par
         -----------------------------------------------------\par
                NZ -    Not Zero        zero bit clear\par
                Z  -    Zero            zero bit set\par
                NC -    No Carry        carry bit clear\par
                C  -    Carry           carry bit set\par
                NV -    No Overflow     overflow bit clear\par
                V  -    Overflow        overflow bit set\par
                PE -    Parity Even     (overflow bit set)\par
                PO -    Parity Odd      (overflow bit clear)\par
                NS -    No Sign         sign bit clear\par
                P  -    Plus            sign bit clear\par
                S -     Sign            sign bit set\par
                M  -    Minus           sign bit set\par
         -----------------------------------------------------\par
        \par
             Condition Codes for Jump Relative Instruction\par
         -----------------------------------------------------\par
                NZ -    Not Zero        zero bit clear\par
                Z  -    Zero            zero bit set\par
                NC -    No Carry        carry bit clear\par
                C  -    Carry           carry bit set\par
         -----------------------------------------------------\par
\page\par
\par
        ASZ280 ASSEMBLER                                       PAGE BP-6\par
        Z280 ADDRESSING AND INSTRUCTIONS\par
\par
\par
        BP.3.3  Z280 Instructions \par
\par
\par
             The  following list of instructions (with addressing modes)\par
        are available in the Z280 assembler mode.  \par
\par
\par
        BP.3.3.1  Instruction Modes  - \par
\par
         Addressing Mode Notes\par
         -----------------------------------------------------\par
          R     8-bit registers:        A,B,C,D,E,H,L\par
        \par
          RX    16-Bit registers:       BC,DE,HL,IX,IY,SP\par
        \par
          IM    Immediate               #byte, #word\par
        \par
          IR    Indirect Register       (HL)\par
        \par
          DA    Direct Address          (address)\par
        \par
          X     Indexed                 (HL+ofst),ofst(HL)\par
                                        (IX+ofst),ofst(IX)\par
                                        (IY+Ofst),ofst(IY)\par
        \par
          SX    Short Index             (HL+ofst),ofst(HL)\par
                                        (IX+ofst),ofst(IX)\par
                                        (IY+ofst),ofst(IY)\par
                                        -128 <= ofst <= 127\par
        \par
          RA    PC Relative Address     [address]\par
                        8-bit offset:   -128 <= ofst <= 127\par
                        16-bit offset:  -32768 <= ofst <= 32767\par
        \par
          SR    Stack Pointer Relative  (SP+ofst)\par
        \par
          BX    Base Index              (HL+IX),(HL+IY),(IX+IY)\par
         -----------------------------------------------------\par
\page\par
\par
        ASZ280 ASSEMBLER                                       PAGE BP-7\par
        Z280 ADDRESSING AND INSTRUCTIONS\par
\par
\par
        BP.3.3.2  Argument Formats  - \par
\par
             The  instruction  format  arguments  are  described in this\par
        table.  Note that not all addressing  arguments  are  valid  for\par
        every mode, refer to the z280 technical data for valid operands.\par
\par
         Argument Formats\par
         -----------------------------------------------------\par
         A,B,C,D,E,H,L,AF,AF'   Explicit 8-Bit Register\par
        \par
         BC,DE,HL,IX,IY,SP,PC   Explicit 16-Bit Register\par
        \par
         DEHL                   Explicit 32-Bit Register\par
        \par
         r                      A,B,C,D,E,H,L Register\par
        \par
         rr                     BC, DE, or HL Register\par
        \par
         src                    Any Valid Source Argument\par
                                (Instruction Dependent)\par
        \par
         dst                    Any Valid Destination Argument\par
                                (Instruction Dependent)\par
        \par
         n                      Byte Argument\par
        \par
         nn                     Word Argument\par
        \par
         XY                     IX or IY Register\par
        \par
         XX                     HL, IX, or IY Register\par
        \par
         cc                     Condition Codes\par
        \par
         dat                    RST Number       0 <= dat <= 7\par
        \par
         p                      IM Interrupt Mode  0 <= p <= 3\par
         -----------------------------------------------------\par
\page\par
\par
        ASZ280 ASSEMBLER                                       PAGE BP-8\par
        Z280 ADDRESSING AND INSTRUCTIONS\par
\par
\par
        BP.3.3.3  8-Bit Load Group Instructions  - \par
                             Addressing Modes Available\par
         Format         R   RX  IM  IR  DA  X   SX  RA  SR  BX\par
         ------        --- --- --- --- --- --- --- --- --- ---\par
         EX A,src       *   *       *   *   *   *   *   *   *\par
         EX H,L\par
         LD A,src       *   *   *   *   *   *   *   *   *   *\par
         LD dst,A       *   *   *   *   *   *   *   *   *   *\par
         LD dst,n       *   *       *   *   *   *   *   *   *\par
         -----------------------------------------------------\par
         LD r,src       *   *   *   *           *\par
         LD dst,r       *   *       *           *\par
         LDUD A,src                 *           *\par
         LDUD dst,A                 *           *\par
         LDUP A,src                 *           *\par
         LDUP dst,A                 *           *\par
         EXTS A\par
         -----------------------------------------------------\par
\par
\par
        BP.3.3.4  16-Bit Load and Exchange Group Instructions  - \par
                             Addressing Modes Available\par
         Format           R   IM  IR  DA  X   SX  RA  SR  BX\par
         ------          --- --- --- --- --- --- --- --- ---\par
         EX DE,HL\par
         EX XY,HL\par
         EX (SP),XX\par
         EX AF,AF'\par
         EXX\par
         -----------------------------------------------------\par
         LD XX,src            *       *   *       *   *   *\par
         LD dst,XX                    *   *       *   *   *\par
         LD RR,src            *   *   *       *\par
         LD dst,RR                *   *       *\par
         LD dst,nn        *       *   *           *\par
         -----------------------------------------------------\par
         LD SP,src        *   *   *   *       *\par
         LD dst,SP                *   *       *\par
         LDA XX,src                   *   *       *   *   *\par
         POP dst          *       *   *           *\par
         PUSH src         *   *   *   *           *\par
         -----------------------------------------------------\par
\page\par
\par
        ASZ280 ASSEMBLER                                       PAGE BP-9\par
        Z280 ADDRESSING AND INSTRUCTIONS\par
\par
\par
        BP.3.3.5  Block Transfer and Search Group Instructions  - \par
         Format                         Format\par
         ------                         ------\par
         CPD                            LDD\par
         CPDR                           LDDR\par
         CPI                            LDI\par
         CPIR                           LDIR\par
         -----------------------------------------------------\par
\par
\par
        BP.3.3.6  8-Bit Arithmetic and Logic Group  - \par
                             Addressing Modes Available\par
         Format         R   RX  IM  IR  DA  X   SX  RA  SR  BX\par
         ------        --- --- --- --- --- --- --- --- --- ---\par
         ADC A,src      *   *   *   *   *   *   *   *   *   *\par
         ADD A,src      *   *   *   *   *   *   *   *   *   *\par
         AND A,src      *   *   *   *   *   *   *   *   *   *\par
         CP A,src       *   *   *   *   *   *   *   *   *   *\par
         CPL A\par
         DAA A\par
         -----------------------------------------------------\par
         DEC dst        *   *       *   *   *   *   *   *   *\par
         DIV A,src      *   *   *       *   *   *   *   *   *\par
         DIVU A,src     *   *   *       *   *   *   *   *   *\par
         EXTS A\par
         INC dst        *   *       *   *   *   *   *   *   *\par
         MULT A,src     *   *   *   *   *   *   *   *   *   *\par
         -----------------------------------------------------\par
         MULTU A,src    *   *   *   *   *   *   *   *   *   *\par
         NEG A\par
         OR A,src       *   *   *   *   *   *   *   *   *   *\par
         SBC A,src      *   *   *   *   *   *   *   *   *   *\par
         SUB A,src      *   *   *   *   *   *   *   *   *   *\par
         XOR A,src      *   *   *   *   *   *   *   *   *   *\par
         -----------------------------------------------------\par
\page\par
\par
        ASZ280 ASSEMBLER                                      PAGE BP-10\par
        Z280 ADDRESSING AND INSTRUCTIONS\par
\par
\par
        BP.3.3.7  16-Bit Arithmetic Operation Instructions  - \par
                             Addressing Modes Available\par
         Format                 R   IM  IR  DA  X   RA\par
         ------                --- --- --- --- --- ---\par
         ADC XX,src             *\par
         ADD XX,src             *\par
         AND XX,A\par
         ADDW HL,src            *   *       *   *   *\par
         CPW HL,src             *   *       *   *   *\par
         -----------------------------------------------------\par
         DECW dst               *       *   *   *   *\par
         DIV DEHL,src           *   *       *   *   *\par
         DIVU DEHL,src          *   *       *   *   *\par
         EXTS HL\par
         INCW dst               *       *   *   *   *\par
         -----------------------------------------------------\par
         MULT HL,src            *   *       *   *   *\par
         MULTU HL,src           *   *       *   *   *\par
         NEG HL\par
         SBC XX,src             *\par
         SUBW HL,src            *   *       *   *   *\par
         -----------------------------------------------------\par
\par
\par
        BP.3.3.8  Bit Manipulation, Rotate and Shift Group  - \par
                             Addressing Modes Available\par
         Format                     IR  DA  RA\par
         ------                    --- --- ---\par
         BIT dst                    *   *   *\par
         RES dst                    *   *   *\par
         RL dst                     *   *   *\par
         RLA\par
         RLC dst                    *   *   *\par
         RLCA        \par
         -----------------------------------------------------\par
         RLD                            *\par
         RR dst                     *   *   *\par
         RR A\par
         RRC dst                    *   *   *\par
         RRCA\par
         RRD                            *\par
         -----------------------------------------------------\par
         SET dst                    *   *   * \par
         SLA dst                    *   *   * \par
         SRA dst                    *   *   * \par
         SRL dst                    *   *   * \par
         TSET dst                   *   *   * \par
         -----------------------------------------------------\par
\page\par
\par
        ASZ280 ASSEMBLER                                      PAGE BP-11\par
        Z280 ADDRESSING AND INSTRUCTIONS\par
\par
\par
        BP.3.3.9  Program Control Group Instructions  - \par
                             Addressing Modes Available\par
         Format                     IR  DA  RA\par
         ------                    --- --- ---\par
         CALL cc,dst                *   *   *\par
         CCF\par
         DJNZ dst                           *\par
         JAF dst                            *\par
         JAR dst                            *\par
         -----------------------------------------------------\par
         JP cc,dst                  *   *   *\par
         JR cc,dst                          *\par
         RET cc\par
         RST dat\par
         SC nn\par
         SCF\par
         -----------------------------------------------------\par
\par
\par
        BP.3.3.10  Program Control Group Instructions  - \par
         Format                         Format\par
         ------                         ------\par
         IN dst,(C)                     OUT (C),src\par
         IN A,(n)                       OUT (n),A\par
         INW HL,(C)                     OUTW (C),HL\par
         IND                            OUTD\par
         INDW                           OUTDW\par
         INDR                           OTDR\par
         INDRW                          OTDRW\par
         INI                            OUTI\par
         INIW                           OTIW\par
         INIR                           OTIR\par
         INIRW                          OTIRW\par
         TSTI (C)\par
         -----------------------------------------------------\par
\page\par
\par
        ASZ280 ASSEMBLER                                      PAGE BP-12\par
        Z280 ADDRESSING AND INSTRUCTIONS\par
\par
\par
        BP.3.3.11  CPU Control Group Instructions  - \par
         Format                         Format\par
         ------                         ------\par
         DI mask                        LDCTL dst,src\par
         EI mask                        NOP\par
         HALT                           PCACHE\par
         IM p                           RETI\par
         LD A,src                       RETIL\par
         LD src,A                       RETN\par
         -----------------------------------------------------\par
\par
\par
        BP.3.3.12  Extended Instructions  - \par
         Format                         Format\par
         ------                         ------\par
         EPUM src                       EPUF\par
         MEPU dst                       EPUI\par
         -----------------------------------------------------\par
\par
\par
        BP.3.4  Z280 Excution Cycles \par
\par
\par
             The  instruction  cycle timing was taken from Appendix E of\par
        the Z280 CPU manual.  They are greatly influenced  by  the  con-\par
        tents of the cache.  \par
\par
\par
                         Z280 Manual Appendix E Excerpt\par
\par
             The  autonomous  operation  of the three stages in the\par
             Z280 cpu instruction pipeline makes  it  difficult  to\par
             calculate exact instruction execution times.  Further-\par
             more, execution times are affected by cache  activity;\par
             the current cache contents determine the number of ex-\par
             ternal memory transactions made during the fetch  exe-\par
             cution of a given instruction.  \par
\par
\par
\par
             Thus  all timings are approximate and should be looked upon\par
        as the smallest number of cycles.  \par
\page\par
\par
        ASZ280 ASSEMBLER                                      PAGE BP-13\par
        Z280 ADDRESSING AND INSTRUCTIONS\par
\par
\par
        BP.4  Z80/HD64180 ADDRESSING AND INSTRUCTIONS \par
\par
\par
             The   following   list   specifies   the  format  for  each\par
        Z80/HD64180 addressing mode supported by ASZ280:  \par
\par
                #data           immediate data\par
                                byte or word data\par
                n               byte value\par
                rg              a byte register\par
                                a,b,c,d,e,h,l\par
                rp              a register pair\par
                                bc,de,hl\par
                (hl)            implied addressing or\par
                                register indirect addressing\par
                (label)         direct addressing\par
                (ix+offset)     indexed addressing with\par
                 offset(ix)     an offset\par
                label           call/jmp/jr label\par
\par
        The  terms  data,  n, label, and offset, may all be expressions.\par
        The terms dir and offset are not allowed to be  external  refer-\par
        ences.   The  following  tables  list  all Z80/HD64180 mnemonics\par
        recognized by the ASRAB assembler.  The designation [] refers to\par
        a required addressing mode argument.  \par
\par
             Note that not all addressing modes are valid with every in-\par
        struction, refer to the Z80/HD64180  technical  data  for  valid\par
        modes.  \par
\par
\par
        BP.4.1  Inherent Instructions \par
\par
                ccf             cpd\par
                cpdr            cpi\par
                cpir            cpl\par
                daa             di\par
                ei              exx\par
                halt            neg\par
                nop             reti\par
                retn            rla\par
                rlca            rld\par
                rra             rrca\par
                rrd             scf\par
\page\par
\par
        ASZ280 ASSEMBLER                                      PAGE BP-14\par
        Z80/HD64180 ADDRESSING AND INSTRUCTIONS\par
\par
\par
        BP.4.2  Implicit Operand Instructions \par
\par
                adc     a,[]            adc     []\par
                add     a,[]            add     []\par
                and     a,[]            and     []\par
                cp      a,[]            cp      []\par
                dec     a,[]            dec     []\par
                inc     a,[]            inc     []\par
                or      a,[]            or      []\par
                rl      a,[]            rl      []\par
                rlc     a,[]            rlc     []\par
                rr      a,[]            rr      []\par
                rrc     a,[]            rrc     []\par
                sbc     a,[]            sbc     []\par
                sla     a,[]            sla     []\par
                sra     a,[]            sra     []\par
                srl     a,[]            srl     []\par
                sub     a,[]            sub     []\par
                xor     a,[]            xor     []\par
\par
\par
        BP.4.3  Load Instruction \par
\par
                ld      rg,[]           ld      [],rg\par
                ld      (bc),a          ld      a,(bc)\par
                ld      (de),a          ld      a,(de)\par
                ld      (label),a       ld      a,(label)\par
                ld      (label),rp      ld      rp,(label)\par
                ld      i,a             ld      r,a\par
                ld      a,i             ld      a,r\par
                ld      sp,hl           ld      sp,ix\par
                ld      sp,iy           ld      rp,#data\par
        \par
                ldd                     lddr\par
                ldi                     ldir\par
\page\par
\par
        ASZ280 ASSEMBLER                                      PAGE BP-15\par
        Z80/HD64180 ADDRESSING AND INSTRUCTIONS\par
\par
\par
        BP.4.4  Call/Return Instructions \par
\par
                call    C,label         ret     C\par
                call    M,label         ret     M\par
                call    NC,label        ret     NC\par
                call    NZ,label        ret     NZ\par
                call    P,label         ret     P\par
                call    PE,label        ret     PE\par
                call    PO,label        ret     PO\par
                call    Z,label         ret     Z\par
                call    label           ret\par
\par
\par
        BP.4.5  Jump and Jump to Subroutine Instructions \par
\par
                jp      C,label         jp      M,label\par
                jp      NC,label        jp      NZ,label\par
                jp      P,label         jp      PE,label\par
                jp      PO,label        jp      Z,label\par
        \par
                jp      (hl)            jp      (ix)\par
                jp      (iy)            jp      label\par
        \par
                djnz    label\par
        \par
                jr      C,label         jr      NC,label\par
                jr      NZ,label        jr      Z,label\par
                jr      label\par
\par
\par
        BP.4.6  Bit Manipulation Instructions \par
\par
                bit     n,[]\par
                res     n,[]\par
                set     n,[]\par
\par
\par
        BP.4.7  Interrupt Mode and Reset Instructions \par
\par
                im      n\par
                im      n\par
                im      n\par
                rst     n\par
\page\par
\par
        ASZ280 ASSEMBLER                                      PAGE BP-16\par
        Z80/HD64180 ADDRESSING AND INSTRUCTIONS\par
\par
\par
        BP.4.8  Input and Output Instructions \par
\par
                in      a,(n)           in      rg,(c)\par
                ind                     indr\par
                ini                     inir\par
        \par
                out     (n),a           out     (c),rg\par
                outd                    otdr\par
                outi                    otir\par
\par
\par
        BP.4.9  Register Pair Instructions \par
\par
                add     hl,rp           add     ix,rp\par
                add     iy,rp\par
        \par
                adc     hl,rp           sbc     hl,rp\par
        \par
                ex      (sp),hl         ex      (sp),ix\par
                ex      (sp),iy\par
                ex      de,hl\par
                ex      af,af'\par
        \par
                push    rp              pop     rp\par
\par
\par
        BP.4.10  HD64180 Specific Instructions \par
\par
                in0     rg,(n)\par
                out0    (n),rg\par
        \par
                otdm                    otdmr\par
                otim                    otimr\par
        \par
                mlt     bc              mlt     de\par
                mlt     hl              mlt     sp\par
        \par
                slp\par
        \par
                tst     a\par
                tstio   #data\par
\page\par
\par
        ASZ280 ASSEMBLER                                      PAGE BP-17\par
        Z80/HD64180 ADDRESSING AND INSTRUCTIONS\par
\par
\par
        BP.4.11  Z80 Undocumented Instructions \par
\par
            op = adc, add, and, cp, or, sbc, sub, xor\par
                op      a,ixh           op      a,ixl\par
                op      a,iyh           or      a,iyl\par
        \par
            op = dec, inc\par
                op      ixh             inc     ixl\par
                op      iyh             inc     iyl\par
        \par
                in      ixh,(c)         in      ixl,(c)\par
                in      iyh,(c)         in      iyl,(c)\par
        \par
                ld      ixh,r           r = a, b, c, d, e\par
                ld      ixl,r           r = a, b, c, d, e\par
        \par
                ld      iyh,r           r = a, b, c, d, e\par
                ld      iyl,r           r = a, b, c, d, e\par
        \par
                ld      r,ixh           r = a, b, c, d, e\par
                ld      r,ixl           r = a, b, c, d, e\par
        \par
                ld      r,iyh           r = a, b, c, d, e\par
                ld      r,iyl           r = a, b, c, d, e\par
        \par
                ld      ixh,#n          ld      ixl,#n\par
                ld      iyh,#n          ld      iyl,#n\par
        \par
                ld      ixh,ixh         ld      ixl,ixh\par
                ld      ixh,ixl         ld      ixl,ixl\par
                ld      iyh,iyh         ld      iyl,iyh\par
                ld      iyh,iyl         ld      iyl,iyl\par
        \par
                sll     offset(ix)      sll     offset(iy)\par
                sll     a               sll     b\par
                sll     c               sll     d\par
                sll     e               sll     h\par
                sll     l\par
\page\par
}
 